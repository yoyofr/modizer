/*
 * ASAP.ppcs - C# version of ASAP
 *
 * Copyright (C) 2008-2010  Piotr Fusik
 *
 * This file is part of ASAP (Another Slight Atari Player),
 * see http://asap.sourceforge.net
 *
 * ASAP is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * ASAP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ASAP; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

#define CSHARP

using System;
using System.IO;

namespace Sf.Asap
{
	/// <summary>Format of output samples.</summary>
	public enum ASAP_SampleFormat
	{
		/// Unsigned 8-bit.
		U8,
		/// Signed 16-bit little-endian.
		S16LE,
		/// Signed 16-bit big-endian.
		S16BE
	}

	/// <summary>8-bit Atari chip music emulator.</summary>
	/// <remarks>This class performs no I/O operations - all music data
	/// must be passed in byte arrays.</remarks>
	public class ASAP
	{

#include "acpu.c"
#include "apokeysnd.c"
#include "asap.c"

#undef const

		readonly ASAP_State ast = new ASAP_State();

		/// <summary>ASAP version.</summary>
		public const string Version = "2.1.2";

		/// <summary>Maximum length of a supported input file.</summary>
		/// <remarks>You can assume that files longer than this are not supported by ASAP.</remarks>
		public const int ModuleMax = 65000;

		/// <summary>Output sample rate.</summary>
		public const int SampleRate = ASAP_SAMPLE_RATE;

		/// <summary>WAV file header length.</summary>
		/// <seealso cref="GetWavHeader" />
		public const int WavHeaderBytes = 44;

		/// <summary>Checks whether the extension of the passed filename is known to ASAP.</summary>
		/// <param name="filename">File name. The extension is used to determine the file format.</param>
		public static bool IsOurFile(string filename)
		{
			return ASAP_IsOurFile(filename);
		}

		/// <summary>Returns information about a module.</summary>
		/// <param name="filename">File name. The extension is used to determine the file format.</param>
		/// <param name="module">Contents of the file.</param>
		/// <param name="module_len">Length of the file.</param>
		public static ASAP_ModuleInfo GetModuleInfo(string filename, byte[] module, int module_len)
		{
			ASAP_ModuleInfo module_info = new ASAP_ModuleInfo();
			if (!ASAP_GetModuleInfo(module_info, filename, module, module_len))
				throw new Exception();
			return module_info;
		}

		/// <summary>Parses a string and returns the number of milliseconds it represents.</summary>
		/// <param name="s">String representation of time in the <c>"mm:ss.xxx"</c> format.</param>
		/// <returns>Number of milliseconds represented by the string.</returns>
		public static int ParseDuration(string s)
		{
			if (s == null || s.Length == 0)
				return -1;
			int r = ASAP_ParseDuration(s);
			if (r < 0)
				throw new FormatException("Invalid duration");
			return r;
		}

		/// <summary>Loads music data ("module").</summary>
		/// <param name="filename">File name. The extension is used to determine the file format.</param>
		/// <param name="module">Contents of the file.</param>
		/// <param name="module_len">Length of the file.</param>
		public void Load(string filename, byte[] module, int module_len)
		{
			if (!ASAP_Load(ast, filename, module, module_len))
				throw new Exception();
		}

		/// <summary>Returns information about the loaded module.</summary>
		public ASAP_ModuleInfo GetModuleInfo()
		{
			return ast.module_info;
		}

		/// <summary>Prepares to play the specified song of the loaded module.</summary>
	    /// <param name="song">Zero-based song index.</param>
		/// <param name="duration">Playback time in milliseconds, -1 means indefinitely.</param>
		public void PlaySong(int song, int duration)
		{
			ASAP_PlaySong(ast, song, duration);
		}

		/// <summary>Mutes the selected POKEY channels.</summary>
		/// <param name="mask">An 8-bit mask which selects POKEY channels to be muted.</param>
		public void MutePokeyChannels(int mask)
		{
			ASAP_MutePokeyChannels(ast, mask);
		}

		/// <summary>Returns current playback position in milliseconds.</summary>
		public int GetPosition()
		{
			return ASAP_GetPosition(ast);
		}

		/// <summary>Returns current playback position in blocks.</summary>
		public int GetBlocksPlayed()
		{
			return ast.blocks_played;
		}

		/// <summary>Changes the playback position.</summary>
		/// <param name="position">The requested absolute position in milliseconds.</param>
		public void Seek(int position)
		{
			ASAP_Seek(ast, position);
		}

		/// <summary>Fills leading bytes of the specified buffer with WAV file header.</summary>
		/// <remarks>The number of changed bytes is <see cref="WavHeaderBytes" />.</remarks>
		/// <param name="buffer">The destination buffer.</param>
		/// <param name="format">Format of samples.</param>
		public void GetWavHeader(byte[] buffer, ASAP_SampleFormat format)
		{
			ASAP_GetWavHeader(ast, buffer, format);
		}

		/// <summary>Fills the specified buffer with generated samples.</summary>
		/// <param name="buffer">The destination buffer.</param>
		/// <param name="format">Format of samples.</param>
		public int Generate(byte[] buffer, ASAP_SampleFormat format)
		{
			return ASAP_Generate(ast, buffer, buffer.Length, format);
		}

	}
}
