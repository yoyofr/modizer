*****************************************************************************
* Musicline Editor File Format                   * Conny Cyréus - Musicline *
*****************************************************************************

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"MLED"		Start of MlEd file

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"MODL"		MlEd type identifier
	4	4	     ?		Chunk length
	8	?	     ?		Last Saved ID2_hex Numbers
-----------------------------------------------------------------------------

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"VERS"		Chunk identifier
	4	4	     ?		Chunk length
	8	2	     ?		Version number (word)
       10	4	"0.60"		Version string
-----------------------------------------------------------------------------

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"COMP"		Chunk identifier
	4	4	     ?		Chunk length
	8	?	     ?		Composer (string)
-----------------------------------------------------------------------------

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"INFO"		Chunk identifier
	4	4	     ?		Chunk length
	8	?	     ?		Info (string)
-----------------------------------------------------------------------------

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"TUNE"		Chunk identifier
	4	4	     ?		Chunk length
	8	?	     ?		Tune data
-----------------------------------------------------------------------------

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"PART"		Chunk identifier
	4	4	     ?		Chunk length
	8	2	     ?		Part number
       10	?	     ?		Part data
-----------------------------------------------------------------------------

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"ARPG"		Chunk identifier
	4	4	     ?		Chunk length
	8	2	     ?		Arpeggio number
       10	?	     ?		Arpeggio data
-----------------------------------------------------------------------------

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"INST"		Chunk identifier
	4	4	     ?		Chunk length
	8	?	     ?		Instrument data
-----------------------------------------------------------------------------

   Offset  Length     Contents		Meaning
-----------------------------------------------------------------------------
	0	4	"SMPL"		Chunk identifier
	4	4	     ?		Chunk length ( Packed Sample )
	8	4	     ?		Original Sample length
	12	1	     ?		Command Byte
	13	1	     ?		PADBYTE
	14	?	     ?		Sample data
-----------------------------------------------------------------------------

*****************************************************************************
* Musicline Editor Module Structures             * Conny Cyréus - Musicline *
*****************************************************************************

***** TUNE DATA *****

tune_Title		ds.b	32
tune_Tempo		ds.w	1
tune_Speed		ds.b	1
tune_Groove		ds.b	1
tune_Volume		ds.w	1	(0-64)
tune_PlayMode		ds.b	1	(4channels,8channels replayer)
tune_Channels		ds.b	1	(number of channels)
tune_Ch1Size		ds.l	1	(Size of Channel data)
tune_Ch2Size...
tune_Ch1Data		ds.b	(tune_Ch1Size)
tune_Ch2Data...

***** PART DATA *****

part_Data		ds.b	Chunk length

The part data is packed. To unpack part data do like this;

a0 = Packed part data
a1 = Destination (Unpacked part data)

.p1		move.b	(a0)+,d6
		bmi.b	.pok
		moveq	#6-1,d7
.p2		lsr.b	#1,d6
		bcc.b	.p3
		move.b	(a0)+,(a1)
		move.b	(a0)+,1(a1)
.p3		addq	#2,a1
		dbf	d7,.p2
		bra.b	.p1
.pend		rts

One part line is 12 bytes

part_Note	ds.b	1	(note number)
part_Inst	ds.b	1	(inst number)
part_Fx_1	ds.w	1	(fx word 1)
part_Fx_2	ds.w	1	(fx word 2)
part_Fx_3	ds.w	1	(fx word 3)
part_Fx_4	ds.w	1	(fx word 4)
part_Fx_5	ds.w	1	(fx word 5)


***** ARPEGGIO DATA *****

arpg_Data		rs.b	Chunk length

One arpeggio line is 6 bytes

arpg_Note	ds.b	1	(note number)
arpg_Smpl	ds.b	1	(Smpl number)
arpg_Fx_1	ds.w	1	(fx word 1)
arpg_Fx_2	ds.w	1	(fx word 2)

***** INSTRUMENT DATA *****

inst_Title		ds.b	32
inst_SmplNumber		ds.b	1
inst_SmplType		ds.b	1	(0=sample 1=16wave 2=32wave 3=64wave 4=128wave 5=256wave)
inst_SmplPointer	ds.l	1
inst_SmplLength		ds.w	1
inst_SmplRepPointer	ds.l	1
inst_SmplRepLength	ds.w	1
inst_FineTune		ds.w	1
inst_SemiTone		ds.w	1
inst_SmplStart		ds.w	1
inst_SmplEnd		ds.w	1
inst_SmplRepStart	ds.w	1
inst_SmplRepLen		ds.w	1
inst_Volume		ds.w	1
inst_Transpose		ds.w	1
inst_Effects1		ds.b	1
inst_Effects2		ds.b	1

WSLOOP			=	7	;Effects1

** EnvelopeGenerator **
ADSR			=	0	;Effects1
ADSRHOLDSUSTAIN		=	0	;inst_EnvTraPhaFilBits

inst_EnvAttLen		ds.w	1
inst_EnvDecLen		ds.w	1
inst_EnvSusLen		ds.w	1
inst_EnvRelLen		ds.w	1
inst_EnvAttSpd		ds.w	1
inst_EnvDecSpd		ds.w	1
inst_EnvSusSpd		ds.w	1
inst_EnvRelSpd		ds.w	1
inst_EnvAttVol		ds.w	1
inst_EnvDecVol		ds.w	1
inst_EnvSusVol		ds.w	1
inst_EnvRelVol		ds.w	1

** Vibrato **
VIBRATO			=	1	;Effects1

inst_VibDir		ds.b	1
inst_VibWaveNum		ds.b	1
inst_VibSpeed		ds.w	1
inst_VibDelay		ds.w	1
inst_VibAtkSpd		ds.w	1
inst_VibAttack		ds.w	1
inst_VibDepth		ds.w	1

** Tremolo **
TREMOLO			=	2	;Effects1

inst_TreDir		ds.b	1
inst_TreWaveNum		ds.b	1
inst_TreSpeed		ds.w	1
inst_TreDelay		ds.w	1
inst_TreAtkSpd		ds.w	1
inst_TreAttack		ds.w	1
inst_TreDepth		ds.w	1

** Arpeggio **
ARPEGGIO		=	3	;Effects1

inst_ArpTable		ds.w	1
inst_ArpSpeed		ds.b	1
inst_ArpGroove		ds.b	1

** Transform **
TRANSFORM		=	0	;Effects2
TRANSFORMINIT		=	1	;inst_EnvTraPhaFilBits
TRANSFORMSTEP		=	2	;inst_EnvTraPhaFilBits

inst_EnvTraPhaFilBits	ds.b	1
inst_TraWaveNums	ds.b	5
inst_TraStart		ds.w	1
inst_TraRepeat		ds.w	1
inst_TraRepEnd		ds.w	1
inst_TraSpeed		ds.w	1
inst_TraTurns		ds.w	1
inst_TraDelay		ds.w	1

** Phase **
PHASE			=	1	;Effects2
PHASEINIT		=	3	;inst_EnvTraPhaFilBits
PHASESTEP		=	4	;inst_EnvTraPhaFilBits
PHASEFILL		=	5	;inst_EnvTraPhaFilBits

inst_PhaStart		ds.w	1
inst_PhaRepeat		ds.w	1
inst_PhaRepEnd		ds.w	1
inst_PhaSpeed		ds.w	1
inst_PhaTurns		ds.w	1
inst_PhaDelay		ds.w	1
inst_PhaType		ds.w	1

** Mix **
MIX			=	2	;Effects2
MIXINIT			=	0	;inst_MixResLooBits
MIXSTEP			=	1       ;inst_MixResLooBits
MIXBUFF			=	2       ;inst_MixResLooBits
MIXCOUNTER		=	3       ;inst_MixResLooBits

inst_MixResLooBits	ds.b	1
inst_MixWaveNum		ds.b	1
inst_MixStart		ds.w	1
inst_MixRepeat		ds.w	1
inst_MixRepEnd		ds.w	1
inst_MixSpeed		ds.w	1
inst_MixTurns		ds.w	1
inst_MixDelay		ds.w	1

** Resonance **
RESONANCE		=	3	;Effects2
RESONANCEINIT		=	4       ;inst_MixResLooBits
RESONANCESTEP		=	5       ;inst_MixResLooBits

inst_ResStart		ds.w	1
inst_ResRepeat		ds.w	1
inst_ResRepEnd		ds.w	1
inst_ResSpeed		ds.w	1
inst_ResTurns		ds.w	1
inst_ResDelay		ds.w	1
inst_ResAmp		ds.w	1

** Filter **
FILTER			=	4	;Effects2
FILTERINIT		=	6       ;inst_EnvTraPhaFilBits
FILTERSTEP		=	7       ;inst_EnvTraPhaFilBits

inst_FilStart		ds.w	1
inst_FilRepeat		ds.w	1
inst_FilRepEnd		ds.w	1
inst_FilSpeed		ds.w	1
inst_FilTurns		ds.w	1
inst_FilDelay		ds.w	1
inst_FilType		ds.w	1

** Loop **
LOOP			=	4	;Effects1
LOOPSTOP		=	5	;Effects1
LOOPINIT		=	6       ;inst_MixResLooBits
LOOPSTEP		=	7       ;inst_MixResLooBits

inst_LooStart		ds.w	1
inst_LooRepeat		ds.w	1
inst_LooRepEnd		ds.w	1
inst_LooLength		ds.w	1
inst_LooLpStep		ds.w	1
inst_LooWait		ds.w	1
inst_LooDelay		ds.w	1
inst_LooTurns		ds.w	1

***** SAMPLE DATA *****

smpl_Title		ds.b	32
smpl_PadByte		ds.b	1
smpl_Type		ds.b	1
smpl_Pointer		ds.l	1
smpl_Length		ds.w	1	(sample length in words)
smpl_RepPointer		ds.l	1
smpl_RepLength		ds.w	1
smpl_FineTune		ds.w	1
smpl_SemiTone		ds.w	1
smpl_SampleData		ds.b	(smpl_Length)

If the smpl_Length is 128 words you must add 240 bytes to smpl_SampleData area.
Then you must convert the sample to 5 octaves, like this;

		lea	smpl_SampleData,a0
		lea	smpl_SampleData+256,a1
		move	#240-1,d0
.makewaves	move.b	(a0)+,(a1)+
		addq	#1,a0
		dbf	d0,.makewaves
		rts

