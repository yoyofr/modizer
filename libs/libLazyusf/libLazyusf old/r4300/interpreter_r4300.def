/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *   Mupen64plus - interpreter_r4300.def                                   *
 *   Mupen64Plus homepage: http://code.google.com/p/mupen64plus/           *
 *   Copyright (C) 2002 Hacktarux                                          *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

DECLARE_JUMP(J,   (jinst_index<<2) | ((PCADDR+4) & 0xF0000000), 1, &state->reg[0],  0, 0)
DECLARE_JUMP(JAL, (jinst_index<<2) | ((PCADDR+4) & 0xF0000000), 1, &state->reg[31], 0, 0)
DECLARE_JUMP(BEQ,     PCADDR + (iimmediate+1)*4, irs == irt, &state->reg[0], 0, 0)
DECLARE_JUMP(BNE,     PCADDR + (iimmediate+1)*4, irs != irt, &state->reg[0], 0, 0)
DECLARE_JUMP(BLEZ,    PCADDR + (iimmediate+1)*4, irs <= 0,   &state->reg[0], 0, 0)
DECLARE_JUMP(BGTZ,    PCADDR + (iimmediate+1)*4, irs > 0,    &state->reg[0], 0, 0)

DECLARE_INSTRUCTION(ADDI)
{
   irt32 = irs32 + iimmediate;
   sign_extended(irt);
   ADD_TO_PC(1);
}

DECLARE_INSTRUCTION(ADDIU)
{
   irt32 = irs32 + iimmediate;
   sign_extended(irt);
   ADD_TO_PC(1);
}

DECLARE_INSTRUCTION(SLTI)
{
   if (irs < iimmediate) irt = 1;
   else irt = 0;
   ADD_TO_PC(1);
}

DECLARE_INSTRUCTION(SLTIU)
{
   if ((unsigned long long)irs < (unsigned long long)((long long)iimmediate))
     irt = 1;
   else irt = 0;
   ADD_TO_PC(1);
}

DECLARE_INSTRUCTION(ANDI)
{
   irt = irs & (unsigned short)iimmediate;
   ADD_TO_PC(1);
}

DECLARE_INSTRUCTION(ORI)
{
   irt = irs | (unsigned short)iimmediate;
   ADD_TO_PC(1);
}

DECLARE_INSTRUCTION(XORI)
{
   irt = irs ^ (unsigned short)iimmediate;
   ADD_TO_PC(1);
}

DECLARE_INSTRUCTION(LUI)
{
   irt32 = iimmediate << 16;
   sign_extended(irt);
   ADD_TO_PC(1);
}

DECLARE_JUMP(BEQL,    PCADDR + (iimmediate+1)*4, irs == irt, &state->reg[0], 1, 0)
DECLARE_JUMP(BNEL,    PCADDR + (iimmediate+1)*4, irs != irt, &state->reg[0], 1, 0)
DECLARE_JUMP(BLEZL,   PCADDR + (iimmediate+1)*4, irs <= 0,   &state->reg[0], 1, 0)
DECLARE_JUMP(BGTZL,   PCADDR + (iimmediate+1)*4, irs > 0,    &state->reg[0], 1, 0)

DECLARE_INSTRUCTION(DADDI)
{
   irt = irs + iimmediate;
   ADD_TO_PC(1);
}

DECLARE_INSTRUCTION(DADDIU)
{
   irt = irs + iimmediate;
   ADD_TO_PC(1);
}

//dword processing is big-endian

// TODOXXX refactor the following functions to remove the
// lsaddr and lsrpt locals. this may lead to a small speedup too
DECLARE_INSTRUCTION(LDL)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   uint64_t* const lsrtp = (uint64_t*)(&irt);
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr & 0xFFFFFFF8);
   if (address == 0)
   {
     return;
   }
   const uint64_t dword = read_dword_from_memory(address);
   switch (lsaddr & 7)
   {
   case 0:
     *lsrtp = dword;
     break;
   case 1:
     *lsrtp = (*lsrtp & 0x00000000000000FF) | (dword <<  8);
     break;
   case 2:
     *lsrtp = (*lsrtp & 0x000000000000FFFF) | (dword << 16);
     break;
   case 3:
     *lsrtp = (*lsrtp & 0x0000000000FFFFFF) | (dword << 24);
     break;
   case 4:
     *lsrtp = (*lsrtp & 0x00000000FFFFFFFF) | (dword << 32);
     break;
   case 5:
     *lsrtp = (*lsrtp & 0x000000FFFFFFFFFF) | (dword << 40);
     break;
   case 6:
     *lsrtp = (*lsrtp & 0x0000FFFFFFFFFFFF) | (dword << 48);
     break;
   case 7:
     *lsrtp = (*lsrtp & 0x00FFFFFFFFFFFFFF) | (dword << 56);
     break;
   }
}

DECLARE_INSTRUCTION(LDR)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   uint64_t* const lsrtp = (uint64_t*)(&irt);
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr & 0xFFFFFFF8);
   if (0 == address)
   {
     return;
   }
   const uint64_t dword = read_dword_from_memory(address);
   switch (lsaddr & 7)
   {
   case 0:
     *lsrtp = (*lsrtp & 0xFFFFFFFFFFFFFF00ULL) | (dword >> 56);
     break;
   case 1:
     *lsrtp = (*lsrtp & 0xFFFFFFFFFFFF0000ULL) | (dword >> 48);
     break;
   case 2:
     *lsrtp = (*lsrtp & 0xFFFFFFFFFF000000ULL) | (dword >> 40);
     break;
   case 3:
     *lsrtp = (*lsrtp & 0xFFFFFFFF00000000ULL) | (dword >> 32);
     break;
   case 4:
     *lsrtp = (*lsrtp & 0xFFFFFF0000000000ULL) | (dword >> 24);
     break;
   case 5:
     *lsrtp = (*lsrtp & 0xFFFF000000000000ULL) | (dword >> 16);
     break;
   case 6:
     *lsrtp = (*lsrtp & 0xFF00000000000000ULL) | (dword >>  8);
     break;
   case 7:
     *lsrtp = dword;
     break;
   }
}

DECLARE_INSTRUCTION(LB)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr);
   if (address != 0)
   {
     *lsrtp = sign_extend8(read_byte_from_memory(address));
   }
}

DECLARE_INSTRUCTION(LH)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr);
   if (address != 0)
   {
     *lsrtp = sign_extend16(read_hword_from_memory(address));
   }
}

DECLARE_INSTRUCTION(LWL)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr & 0xFFFFFFFC);
   if (address == 0)
   {
     return;
   }
   const uint32_t word = read_word_from_memory(address);
   switch (lsaddr & 3)
   {
   case 0:
     *lsrtp = sign_extend32(word);
     break;
   case 1:
     *lsrtp = sign_extend32((*lsrtp & 0xFF) | (word << 8));
     break;
   case 2:
     *lsrtp = sign_extend32((*lsrtp & 0xFFFF) | (word << 16));
     break;
   case 3:
     *lsrtp = sign_extend32((*lsrtp & 0xFFFFFF) | (word << 24));
     break;
   }
}

DECLARE_INSTRUCTION(LW)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr);
   if (address != 0)
   {
     *lsrtp = sign_extend32(read_word_from_memory(address));
   }
}

DECLARE_INSTRUCTION(LBU)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr);
   if (address != 0)
   {
     *lsrtp = read_byte_from_memory(address);
   }
}

DECLARE_INSTRUCTION(LHU)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr);
   if (address != 0)
   {
     *lsrtp = read_hword_from_memory(address);
   }
}

DECLARE_INSTRUCTION(LWR)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr & 0xFFFFFFFC);
   if (address == 0)
   {
     return;
   }
   const uint32_t word = read_word_from_memory(address);
   switch (lsaddr & 3)
   {
   case 0:
     *lsrtp = (*lsrtp & 0xFFFFFFFFFFFFFF00LL) | (word >> 24);
     break;
   case 1:
     *lsrtp = (*lsrtp & 0xFFFFFFFFFFFF0000LL) | (word >> 16);
     break;
   case 2:
     *lsrtp = (*lsrtp & 0xFFFFFFFFFF000000LL) | (word >> 8);
     break;
   case 3:
     *lsrtp = sign_extend32(word);
     break;
   }
}

DECLARE_INSTRUCTION(LWU)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr);
   if (address != 0)
   {
     *lsrtp = read_word_from_memory(address);
   }
}

DECLARE_INSTRUCTION(SB)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lsaddr);
   if (address != 0)
   {
     const uint8_t byte = (uint8_t)(*lsrtp);
     write_byte_to_memory(address, byte);
     CHECK_MEMORY(address);
   }
}

DECLARE_INSTRUCTION(SH)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lsaddr);
   if (address != 0)
   {
     const uint16_t hword = (uint16_t)(*lsrtp);
     write_hword_to_memory(address, hword);
     CHECK_MEMORY(address)
   }
}

DECLARE_INSTRUCTION(SWL)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lsaddr & 0xFFFFFFFC);
   if (address == 0)
   {
     return;
   }
   const uint32_t word = (uint32_t)(*lsrtp);
   //TODO: shifts?
   switch (lsaddr & 3)
   {
   case 0:
     write_word_to_memory(address, word);
     break;
   case 1:
     write_masked_word_to_memory(address, word >>  8, 0x00ffffff);
     break;
   case 2:
     write_masked_word_to_memory(address, word >> 16, 0x0000ffff);
     break;
   case 3:
     write_masked_word_to_memory(address, word >> 24, 0x000000ff);
     break;
   }
   CHECK_MEMORY(address)
}

DECLARE_INSTRUCTION(SW)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lsaddr);
   if (address != 0)
   {
     const uint32_t word = (uint32_t)(*lsrtp);
     write_word_to_memory(address, word);
     CHECK_MEMORY(address)
   }
}

DECLARE_INSTRUCTION(SDL)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   uint64_t* const lsrtp = (uint64_t*)&irt;
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lsaddr & 0xFFFFFFF8);
   if (address == 0)
   {
     return;
   }
   switch (lsaddr & 7)
   {
   case 0:
     write_dword_to_memory(address, *lsrtp);
     break;
   case 1:
     write_masked_dword_to_memory(address, *lsrtp >>  8, 0x00FFFFFFFFFFFFFFULL);
     break;
   case 2:
     write_masked_dword_to_memory(address, *lsrtp >> 16, 0x0000FFFFFFFFFFFFULL);
     break;
   case 3:
     write_masked_dword_to_memory(address, *lsrtp >> 24, 0x000000FFFFFFFFFFULL);
     break;
   case 4:
     write_masked_dword_to_memory(address, *lsrtp >> 32, 0x00000000FFFFFFFFULL);
     break;
   case 5:
     write_masked_dword_to_memory(address, *lsrtp >> 40, 0x0000000000FFFFFFULL);
     break;
   case 6:
     write_masked_dword_to_memory(address, *lsrtp >> 48, 0x000000000000FFFFULL);
     break;
   case 7:
     write_masked_dword_to_memory(address, *lsrtp >> 56, 0x00000000000000FFULL);
     break;
   }
   CHECK_MEMORY(address)
   CHECK_MEMORY(address + sizeof(uint32_t))
}

DECLARE_INSTRUCTION(SDR)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   uint64_t* const lsrtp = (uint64_t*)(&irt);
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lsaddr & 0xFFFFFFF8);
   if (address == 0)
   {
     return;
   }
   switch (lsaddr & 7)
   {
   case 0:
     write_masked_dword_to_memory(address, *lsrtp << 56, 0xFF00000000000000ULL);
     break;
   case 1:
     write_masked_dword_to_memory(address, *lsrtp << 48, 0xFFFF000000000000ULL);
     break;
   case 2:
     write_masked_dword_to_memory(address, *lsrtp << 40, 0xFFFFFF0000000000ULL);
     break;
   case 3:
     write_masked_dword_to_memory(address, *lsrtp << 32, 0xFFFFFFFF00000000ULL);
     break;
   case 4:
     write_masked_dword_to_memory(address, *lsrtp << 24, 0xFFFFFFFFFF000000ULL);
     break;
   case 5:
     write_masked_dword_to_memory(address, *lsrtp << 16, 0xFFFFFFFFFFFF0000ULL);
     break;
   case 6:
     write_masked_dword_to_memory(address, *lsrtp <<  8, 0xFFFFFFFFFFFFFF00ULL);
     break;
   case 7:
     write_dword_to_memory(address, *lsrtp);
     break;
   }
   CHECK_MEMORY(address)
   CHECK_MEMORY(address + sizeof(uint32_t))
}

DECLARE_INSTRUCTION(SWR)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lsaddr & 0xFFFFFFFC);
   if (address == 0)
   {
     return;
   }
   const uint32_t word = (uint32_t)(*lsrtp);
   switch (lsaddr & 3)
   {
   case 0:
     write_masked_word_to_memory(address, word << 24, 0xFF000000);
     break;
   case 1:
     write_masked_word_to_memory(address, word << 16, 0xFFFF0000);
     break;
   case 2:
     write_masked_word_to_memory(address, word <<  8, 0xFFFFFF00);
     break;
   case 3:
     write_word_to_memory(address, word);
     break;
   }
   CHECK_MEMORY(address)
}

DECLARE_INSTRUCTION(CACHE)
{
   ADD_TO_PC(1);
}

DECLARE_INSTRUCTION(LL)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr);
   if (address != 0)
   {
     *lsrtp = sign_extend32(read_word_from_memory(address));
     state->llbit = 1;
   }
}

DECLARE_INSTRUCTION(LWC1)
{
   if (check_cop1_unusable(state)) {return;}
   const uint8_t lslfft = lfft;
   const uint32_t lslfaddr = (uint32_t)(lfoffset + state->reg[lfbase]);
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lslfaddr);
   if (address != 0)
   {
     *((int32_t*)state->reg_cop1_simple[lslfft]) = (int32_t)read_word_from_memory(address);
   }
}

DECLARE_INSTRUCTION(LDC1)
{
   if (check_cop1_unusable(state)) {return;}
   const uint8_t lslfft = lfft;
   const uint32_t lslfaddr = (uint32_t)(lfoffset + state->reg[lfbase]);
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lslfaddr);
   if (address != 0)
   {
     *(uint64_t*)state->reg_cop1_double[lslfft] = read_dword_from_memory(address);
   }
}

DECLARE_INSTRUCTION(LD)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   uint64_t* const lsrtp = (uint64_t*)(&irt);
   ADD_TO_PC(1);
   const uint32_t address = get_read_address(lsaddr);
   if (address != 0)
   {
     *lsrtp = read_dword_from_memory(address);
   }
}

DECLARE_INSTRUCTION(SC)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   if(state->llbit)
   {
      const uint32_t address = get_write_address(lsaddr);
      if (address != 0)
      {
        const uint32_t word = (uint32_t)(*lsrtp);
        write_word_to_memory(address, word);
        CHECK_MEMORY(address)
      }
      //is it right???
      state->llbit = 0;
      *lsrtp = 1;
   }
   else
   {
      *lsrtp = 0;
   }
}

DECLARE_INSTRUCTION(SWC1)
{
   if (check_cop1_unusable(state)) {return;}
   const uint8_t lslfft = lfft;
   const uint32_t lslfaddr = (uint32_t)(lfoffset + state->reg[lfbase]);
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lslfaddr);
   if (address != 0)
   {
     const uint32_t word = *((uint32_t*)state->reg_cop1_simple[lslfft]);
     write_word_to_memory(address, word);
     CHECK_MEMORY(address)
   }
}

DECLARE_INSTRUCTION(SDC1)
{
   if (check_cop1_unusable(state)) {return;}
   const uint8_t lslfft = lfft;
   const uint32_t lslfaddr = (uint32_t)(lfoffset + state->reg[lfbase]);
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lslfaddr);
   if (address != 0)
   {
     const uint64_t dword = *((uint64_t*)state->reg_cop1_double[lslfft]);
     write_dword_to_memory(address, dword);
     CHECK_MEMORY(address)
     CHECK_MEMORY(address + sizeof(uint32_t))
   }
}

DECLARE_INSTRUCTION(SD)
{
   const uint32_t lsaddr = (uint32_t)(iimmediate + irs32);
   int64_t* const lsrtp = &irt;
   ADD_TO_PC(1);
   const uint32_t address = get_write_address(lsaddr);
   if (address != 0)
   {
     const uint64_t dword = *lsrtp;
     write_dword_to_memory(address, dword);
     CHECK_MEMORY(address)
     CHECK_MEMORY(address + sizeof(uint32_t))
   }
}
