noise-waveform generation
-------------------------

Originally my implementation had been based on the information given here: 
http://www.sidmusic.org/sid/sidtech5.html and the respective information
still seems to be popular when it comes to "older" theories on how the SID's 
noise generation works. I have again looked into my respective impl while 
investigating problems with the song Bojojoing.sid 
(see http://www.dekadence64.org/sidwav.txt  ) and I peeked at what new findings 
the guys at resid might meanwhile (2021) have come up with. Indeed resid does  
seem to have come up with some new tricks and since resid is practically the 
gold standard with regard to SID emulation, I decided to adopt some of 
their modelling as the base for my updated noise implementation. (Their 
analysis can be found here: 
https://github.com/libsidplayfp/SID_schematics/wiki/Noise-Generator )

However there still seem to be quite a few "random rules" 
in resid's latest implementation and to me this seems to be an indication
that even their most recent modelling is probably still missing some
mechanisms used in the real SID hardware.

also see http://www.ffd2.com/fridge/blahtune/SID.primer for basic background
information



By default wave-output in WebSid is only calculated 1x at the end of a
respective 1-output-sample interval (e.g. at a 48kHz sample rate), i.e. 
there may be glitches when waveforms are switched within the respective 
interval - which hopefull should not matter too much in most scenarios. 

However oversampling is relevant for noise-WF:
1) high-frequency noise may update multiple times within the interval and 
   without proper oversampling, this noise would get too low-freq and too loud.
   
   example: Below the noise output (N) changed 4 times during the "sample 1" 
   interval and at the beginning of the sample it wasn't even noise, but 
   a pulse (P) signal that created the output:
   
    5    NNN   NNN   NNN
    4                   NNN   NNN
	3
	2                                     NNN   
    1 PPP   NNN   NNN      NNN   NNNNNNNNN
     |------------|------------|------------|--- > time
      sample 1     sample 2     sample 3
   
   Eventhough the most recent noise output at the end of "sample 1" is 1, 
   half of the time the signal was actually 5 and the average signal 
   amplitude that should be used as the result for "sample 1" should be close 
   to 3.
   
      
2) "combined-waveform output" would normally feed back into the shift-register 
   in "every" clock cycle. But WebSid does not normally calculate the waveform
   output in every cycle (but only one approximated output per output sample).
   

solution: track intra-sample noise-signal changes and calculate the feedback
at least at those points where the noise output signal is updated.


noise-reset
-----------

Most information regarding this "feature" seems to be some "rough approximation", 
e.g. http://www.sidmusic.org/sid/sidtech5.html "the delay before a 
WF is actually reset via TEST may be as long as 2000-8000 cycles", i.e.:

The test-bit will eventually cause the noise shift-register to be 
refilled (which can be used to "reset" a shift-register that has been emptied
by the feedback from combined-noise-waveforms): in reality this is a process 
that behaves quite differently on different SID models or even different 
chips of the same model. For practical purposes there seems to be no 
point to precisely model respective timing behavoir since any realworld music 
actually using this, would severely limit the number of devices that it 
could be run on successfully.


also see https://sourceforge.net/p/vice-emu/bugs/290/



combined-WF feedback
--------------------
(see resid's 2-phase model)


observations using VICE 3.5 (obviously this test should be verified with a real
C64 but this emulator seems to run fine with regard to the relevant testcases
so it probably handles this scenario sufficiently well):

t0: d412 set to 0x48 (pulse / TEST) => d41b output: 0xff (as expected)

t1: d412 set to 0xf8 (all / TEST)	=> d41b output: 0x0 (as guessed)
t2: d412 set to 0x80 (noise) => d41b output: 0xfe 

	=> clearing the test-bit here explicitly triggered a noise shift but 
	except for the bit0 everything is still set in the output, i.e. the 
	0-output of the combined-WF did not feed back into the shift register.
	0xfe will eventially drop when the sequence is repeatedly looped to t1,
	i.e. 0 is feed into bit0 while shifting with no feedback.. eventually this 
	reaches the bits used for noise waveform output (i.e. 0, 2, etc)

	=> according to resid's special case handling this "no-feedback" is due 
	to the follow-up WF being a pure 0x8 noise WF - and there might have been 
	a feedback if the follow-up had been something else instead..

	
	
	
general test cases: 

	Hollywood_Poker_Pro.sid, Wizax_demo.sid, Billie_Jean.sid


test case: Bojojoing.sid#1

	the respective WF toggling sequence used in this song is:

		t0:	F1 (4 cycles) 
		t1: F9 (4 cycles) 	=> i.e. accumulator is reset here
		t2: 81 (x cycles) 
		.. loop

	during the 4 cycles following t0 the respective combined output (probably 0) 
	should be fed back into the shift register, effectively clearing all the 
	feedback bits (it is unlikely that a regular shift occurs exactly in this 
	4-cycle window). Eventhough technically incorrect, it would probably be 
	good enough if a respective feedback were to be applied just once for this
	4 cycle interval - so there should be some room for optimizations.

	The "clear test-bit" in t2 then always triggers the respective shift of the 
	shift register. But according to resid's strange "special rules" handling a 
	"0xf -> 0x8" waveform transition is one of those exceptions where no feedback 
	occurs during the shift.


test case: Wonderland_XIII_tune_1.sid

	similar to the above: just without use of gate-bit - and combined-noise is never 
	used without test-bit here. 

	This should mean that there is never any feedback from the combined waveform into 
	the shift register (since test-bit is set) and since forced shift triggered by 
	"clear test-bit" (see t1, t3, etc) supposedly does NOT use feedback when 
	transitioning to pure noise (0x8 waveform).

	Still the "clear test-bit" will make sure that a basic shift is performed every 13 
	cycles.. (theoretically there might be additional normally scheduled shifts 
	if the frequency is high enough to actually reach the threshold within the 4
	available cycles. also the 2 cycle shift-delay might cause many of those shifts to 
	be aborted by the set test-bit. However freq seems to be reset to 0 so regular 
	shifts are probably no used here..)


	t0: F8	(9 cycles)
	t1: 80	(4 cycles) 
	t2: F8	(9 cycles)
	t3: 80	(4 cycles)
	t4: F8	(9 cycles)
	t5: 80	(4 cycles)
	t6: F8	(9 cycles)
	t7: 80	(4 cycles)
	t8: F8	(9 cycles)
	t9: 80	(4 cycles)
	.. etc
	
	It is unclear what exact effect the above is actually aiming for. (todo: compare 
	with some recordings from the real HW)
	
	The NMI player also updates the waveform but that seems to be used independently for 
	some Ice_Guys.sid type digi-playback.
	
	
	
	
	