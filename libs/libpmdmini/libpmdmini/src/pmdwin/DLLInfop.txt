==============================================================================
                     PMD for Windows 「PMDWin」 Ver.0.50
                        Copyright & Programmed by C60
                                 DLL 仕様書
==============================================================================


------------------------------------------------------------------------------
▼はじめに
    本仕様書は、PMDWin.dll から export されている関数一覧です。
    PMDWin Ver0.17 以降で使用できます。
    Ｃ言語で使う場合は FMPMD_SDK005.zip に同梱されている PMDWinImport.h,
    PMDWin.lib を include して下さい(あるいは LoadLibrary 等で
    動的に読み込んでください)
    Delphi で用いる場合は、FMPMD_SDK005.zip に同梱されている PMDWin.pas,
    PCMMusDriver.pas を組み込んでお使いください。
    
    
------------------------------------------------------------------------------
▼主な変更点
    ・Ver0.40 より、FileIOインターフェイスに対応しました。
      詳細は、FileIOInfo.txt を参照してください。
    ・Ver0.31 より、setfmcalc55k() 相当の処理を fmgen 側ではなく
      PMDWin.dll 側で持つようにしました。
    ・Ver0.31 より、getmemo(), getmemo2(), getmemo3(), fgetmemo(),
      fgetmemo2(), fgetmemo3() の戻り値を最大 1024 バイトに制限するように
      しました。
    ・Ver0.30 より、fmgen の仕様変更に伴い setfmcalc55k() を実行しても
      効果がなくなりました。
    ・Ver0.17 より、COM 風インターフェイス、pmd_CoCreateInstance が
      実装されました。PMDWin のインスタンスを複数取得して利用することが
      できます。
    ・Ver0.17 より、setppzrate(), setfmcalc55k() が追加され、setpcmrate()
      で任意の正の値を設定できるようになりました。
    ・Ver0.16 より、setfmwait(), setssgwait(), setrhythmwait(),
      setadpcmwait() が追加されました。
    ・Ver0.15 より、getloopcount() が追加されました。
    ・Ver0.14 より、music_load2(), fgetmemo(), fgetmemo2(), fgetmemo3() が
      追加されました。
    ・Ver0.09 より、関数の呼び出し規約を cdecl から stdcall へ変更しました。
    ・Ver0.09 より、getppcfilename() では PPC/PVI のみを取得するように
      しました。現在 ADPCM/P86 パートで演奏中の PPC/P86 ファイル名を
      取得するには getpcmfilename() を用いてください。
    
    
------------------------------------------------------------------------------
▼注意点
    １）PMDWin.dll では音声の出力は行いません。
    　　プレイヤ側で wave デバイスに PCM データの出力を行う必要があります。
    ２）PMDWin.dll は一部を除きスレッドセーフではありません。
    　　複数のスレッドから同時にアクセスする場合は、クリティカルセクション
    　　等で保護してください。
    　　getlength(), getlength2() のうちのどちらかと getmemo(), getmemo2(),
    　　getmemo3(), fgetmemo(), fgetmemo2(), fgetmemo3() のうちのひとつ、
    　　他の関数の組み合わせのみ、別のスレッドから同時に実行できます。
    
    
------------------------------------------------------------------------------
▼関数の使用手順(例：DLLインターフェイスを用いる場合)
    getversion(), getinterfaceversion() でバージョンチェック
    　↓
    pmdwininit() で初期化
    　↓
    setpcmdir(), setpcmrate() 等で動作環境の設定
    　↓
    music_load() あるいは music_load2() で曲データの読み込み
    　↓
    music_start() で演奏開始
    　↓
    getpcmdata() で PCM データの取得。プレイヤで wave デバイスに出力
    　↓
    music_stop() で演奏終了
    　↓
    現在の曲を再演奏するなら、music_start() から。
    次の曲を演奏するなら、music_load() あるいは music_load2() から。
    
    
------------------------------------------------------------------------------
▼ファンクション一覧

    上段はＣ言語、下段は Delphi での定義です。なお、Ｃ言語では
        typedef unsigned char uchar;
    Delphi では
        type PSmallInt = ^SmallInt;
    です。
    
    
===============================================================================
    int getversion(void);
    function getversion : Integer;
-------------------------------------------------------------------------------
    input           無し
    output          DLL のバージョン
-------------------------------------------------------------------------------

    PMDWin.dll のバージョンを取得します。
    10進数で100の位がメジャーバージョン、下2桁がマイナーバージョンです。
    現在の戻り値は050です。
    
    
===============================================================================
    int getinterfaceversion(void);
    function getinterfaceversion : Integer;
-------------------------------------------------------------------------------
    input           無し
    output          DLL インターフェイスのバージョン
-------------------------------------------------------------------------------
    
    PMDWin.dll のインターフェイスのバージョンを取得します。
    10進数で100の位がメジャーバージョン、下2桁がマイナーバージョンです。
    現在の戻り値は118です。
    
    下位バージョンから export されている関数の削減、仕様変更があった場合には
    メジャーバージョンが上がります。
    下位バージョンから export されている関数の追加のみの場合にはメジャーバー
    ジョンは変わらず、マイナーバージョンのみが上がります。
    下位バージョンから export されている関数が変わらないときにはバージョンは
    変化しません。
    
    
===============================================================================
    HRESULT WINAPI pmd_CoCreateInstance(REFCLSID rclsid, LPUNKNOWN pUnkOuter,
        DWORD dwClsContext, REFIID riid, LPVOID * ppv);
    function pmd_CoCreateInstance(const clsid: TCLSID; unkOuter: IUnknown;
        dwClsContext: Longint; const iid: TIID; var pv) : HResult; stdcall;
-------------------------------------------------------------------------------

    PMDWin の インスタンスを生成し、インターフェイスポインタを取得します。
    詳細は、COMInfop.txt を参照してください。
    
    
===============================================================================
    bool pmdwininit(char *path);
    function pmdwininit(path : PChar) : Boolean;
-------------------------------------------------------------------------------
    input
        path        リズム音の wav が存在するディレクトリ
    output          初期化に成功したら true, 成功しなかったら false
-------------------------------------------------------------------------------
    
    PMDWin.dll の初期化を行います。
    以下のファンクションを使用する前に一度呼び出してください。
    
    path の最後の「\」は付けても付けなくても構いません。
    path が NULL の場合は作業フォルダ(ショートカットで指定したフォルダ、
    あるいはプレイヤがあるフォルダ)から読み込みます。
    
    
===============================================================================
    bool loadrhythmsample(char *path);
    function loadrhythmsample(path : PChar) : Boolean;
-------------------------------------------------------------------------------
    input
        path        リズム音の wav が存在するディレクトリ
    output          読み込みに成功したら true, 成功しなかったら false
-------------------------------------------------------------------------------
    
    リズム音の wave を再度読み込みます。
    実行すると曲の演奏が止まります。
    
    path の最後の「\」は付けても付けなくても構いません。
    path が NULL の場合は作業フォルダ(ショートカットで指定したフォルダ、
    あるいはプレイヤがあるフォルダ)から読み込みます。
    
    
===============================================================================
    bool setpcmdir(char **path);
    function setpcmdir(pcmdir : Array of PChar) : Boolean;
-------------------------------------------------------------------------------
    input
        path        PCM の検索パスのポインタ配列
    output          path が64個を超えたら false
-------------------------------------------------------------------------------
    
    PCM(PPC,PPS,P86,PVI,PZI) の検索パスを指定します。
    path はPCM の検索パスのポインタ配列です。
    music_load() で読み込まれる曲データと同じディレクトリは最初に必ず
    検索されるので、ここで指定する必要はありません。
    
    path の最後の「\」は付けても付けなくても構いません。
    MAX_PCMDIR(現在64)ディレクトリまで指定できます。
    最後には NULL か "" を指定してください。
    
    ex) c:\pmd\ppc, c:\pmd\pvi を指定するとき
        
        char *path[MAX_PCMDIR+1];
        path[0] = "c:\pmd\ppc";
        path[1] = "c:\pmd\pvi";
        path[2] = NULL; または path[2] = "";
    
    
===============================================================================
    void setpcmrate(int rate);
    procedure setpcmrate(rate : Integer);
-------------------------------------------------------------------------------
    input
        rate        再生周波数
    output          なし
-------------------------------------------------------------------------------
    
    getpcmdata() で取得する PCM の周波数を指定します。
    rate は任意の値を指定できますが、下位互換性確保のため、API 内部で
    setppzrate(), setfmcalc55k() も自動的に実行されます。
    
    ・rate = SOUND_55K または rate = SOUND_55K_2 の場合
        出力する PCM の周波数、PPZ 駆動周波数は 44kHz
        fmcalc55k(true);
        
    ・rate != SOUND_55K かつ rate != SOUND_55K_2 の場合
        出力する PCM の周波数、PPZ 駆動周波数は rate で指定された値。
        fmcalc55k(false);
    
    
    setppzrate(), setfmcalc55k() は、本 API の後に実行してください。
    
    
===============================================================================
    void setppzrate(int rate);
    procedure setppzrate(rate : Integer);
-------------------------------------------------------------------------------
    input
        rate        PPZ8 駆動周波数(Hz)
    output          なし
-------------------------------------------------------------------------------
    
    PPZ8 の駆動周波数を指定します。rate は任意の値（1以上)を指定できます。
    
    setpcmrate() を実行すると、本 API で指定された値が上書きされるので、
    setpcmrate() の後に実行するようにして下さい。
    
    
===============================================================================
    void setfmcalc55k(bool flag);
    procedure setfmcalc55k(flag : Boolean);
-------------------------------------------------------------------------------
    input
        flag        // FM 音源の合成処理を 55kHz で行うなら true
                    // setpcmrate() で指定した値で行うなら false
    output          なし
-------------------------------------------------------------------------------
    FM 音源の合成処理を 55kHz で行うかどうかを指定します。
    55kHz で合成を行うと音質は向上しますが、若干処理が重くなります。
    本 API の指定は、getpcmdata() で取得される PCM データの周波数とは
    無関係です。
    
    setpcmrate() を実行すると、本 API で指定された値が上書きされるので、
    setpcmrate() の後に実行するようにして下さい。
    
    
===============================================================================
    void setppsuse(bool value);
    procedure setppsuse(value : Boolean);
-------------------------------------------------------------------------------
    input           PPS を鳴らすなら true。SSG Rhythm を鳴らすなら false
    output          なし
-------------------------------------------------------------------------------

    PPS を鳴らすかどうかを指定します。
    PPS を鳴らさない場合は、代わりに SSG リズムが鳴ります。

===============================================================================
    void setrhythmwithssgeffect(bool value);
    procedure setrhythmwithssgeffect(value : Boolean);
-------------------------------------------------------------------------------
    input           SSG リズムと同時に OPNA リズムを鳴らすなら true
    output          なし
-------------------------------------------------------------------------------

    SSG リズム(あるいは PPS)と同時に OPNA リズムを鳴らすかどうかを
    指定します。
    

===============================================================================
    void setpmd86pcmmode(bool value);
    procedure setpmd86pcmmode(value : Boolean);
-------------------------------------------------------------------------------
    input           PMD86 の PCM部 を ADPCM 互換にするなら true
    output          なし
-------------------------------------------------------------------------------

    PMD86 の PCM部 を ADPCM 互換にするかどうかを指定します。
    

===============================================================================
    bool getpmd86pcmmode(void);
    function getpmd86pcmmode : Boolean;
-------------------------------------------------------------------------------
    input           なし
    output          PMD86 の PCM部 が ADPCM 互換にするなら true
-------------------------------------------------------------------------------

    PMD86 の PCM部 が ADPCM 互換かどうかを取得します。
    

===============================================================================
    int music_load(char *filename);
    function music_load(filename : PChar) : Integer;
-------------------------------------------------------------------------------
    input
        filename    曲データのファイル名(フルパス)
    output          下記の戻り値を参照
-------------------------------------------------------------------------------
    
    ファイル名で示される曲データを PMDWin.dll に読み込みます。
    曲データで PCM ファイルが指定されている場合は、最初に曲データの
    存在するディレクトリ、見つからなかったら setpcmdir() で指定された
    ディレクトリより PCM の読み込みが行われます。
    実際に演奏させるためには、music_start() を呼び出す必要があります。
    
    戻り値：
        PMDWIN_OK                   正常終了
        ERR_OPEN_MUSIC_FILE         曲 データを開けなかった
        ERR_WRONG_MUSIC_FILE        PMD の曲データではなかった
        ERR_OPEN_PPC_FILE           PPC を開けなかった
        ERR_WRONG_PPC_FILE          PPC が異常
        WARNING_PPC_ALREADY_LOAD    PPC は既に読み込まれていた
        ERR_OPEN_PPS_FILE           PPS を開けなかった
        WARNING_PPS_ALREADY_LOAD    PPS は既に読み込まれていた
        ERR_OPEN_PPZ1_FILE          PPZ(Buffer 1)を開けなかった
        ERR_OPEN_PPZ2_FILE          PPZ(Buffer 2)を開けなかった
        ERR_WRONG_PPZ1_FILE         PPZ(Buffer 1)が異常
        ERR_WRONG_PPZ2_FILE         PPZ(Buffer 2)が異常
        WARNING_PPZ1_ALREADY_LOAD   PPZ(Buffer 1)は既に読み込まれていた
        WARNING_PPZ2_ALREADY_LOAD   PPZ(Buffer 2)は既に読み込まれていた
        ERR_OUT_OF_MEMORY           メモリ不足
        ERR_OTHER                   その他のエラー
                                    (もし出た場合は連絡をお願いします)
    
    
===============================================================================
    int music_load2(uchar *musdata, int size);
    function music_load2(musdata : Pointer; size : Integer) : Integer;
-------------------------------------------------------------------------------
    input
        musdata     曲データのポインタ
        size        曲データのサイズ
    output          下記の戻り値を参照
-------------------------------------------------------------------------------
    
    musdata と size で指定されるメモリ上の曲データを PMDWin.dll に
    読み込みます。
    PCM は setpcmdir() で指定されたディレクトリより読み込まれます。
    実際に演奏させるためには、music_start() を呼び出す必要があります。
    
    戻り値：
        PMDWIN_OK                   正常終了
        ERR_WRONG_MUSIC_FILE        PMD の曲データではなかった
        ERR_OPEN_PPC_FILE           PPC を開けなかった
        ERR_WRONG_PPC_FILE          PPC が異常
        WARNING_PPC_ALREADY_LOAD    PPC は既に読み込まれていた
        ERR_OPEN_PPS_FILE           PPS を開けなかった
        WARNING_PPS_ALREADY_LOAD    PPS は既に読み込まれていた
        ERR_OPEN_PPZ1_FILE          PPZ(Buffer 1)を開けなかった
        ERR_OPEN_PPZ2_FILE          PPZ(Buffer 2)を開けなかった
        ERR_WRONG_PPZ1_FILE         PPZ(Buffer 1)が異常
        ERR_WRONG_PPZ2_FILE         PPZ(Buffer 2)が異常
        WARNING_PPZ1_ALREADY_LOAD   PPZ(Buffer 1)は既に読み込まれていた
        WARNING_PPZ2_ALREADY_LOAD   PPZ(Buffer 2)は既に読み込まれていた
        ERR_OUT_OF_MEMORY           メモリ不足
        ERR_OTHER                   その他のエラー
                                    (もし出た場合は連絡をお願いします)
    
    
===============================================================================
    void music_start(void);
    procedure music_start;
-------------------------------------------------------------------------------
    input           なし
    output          なし
-------------------------------------------------------------------------------
    
    music_load() あるいは music_load2() で読み込まれた曲の合成開始を
    指示します。
    実際の PCM データの取得には、getpcmdata() を使用してください。
    
    
===============================================================================
    void music_stop(void);
    procedure music_stop;
-------------------------------------------------------------------------------
    input           なし
    output          なし
-------------------------------------------------------------------------------
    
    曲の合成を終了します。
    実行後に getpcmdata() を呼び出しても無音データしか取得できません。
    
    
===============================================================================
    void fadeout(int speed);
    procedure fadeout(speed : Integer);
-------------------------------------------------------------------------------
    input
        speed       フェードアウトの速度(１〜１２７)
    output          なし
-------------------------------------------------------------------------------
    
    曲のフェードアウトを行います(PMD 互換)
    speed は１〜１２７で、大きいほど速くなります。
    
    
===============================================================================
    void fadeout2(int speed);
    procedure fadeout2(speed : Integer);
-------------------------------------------------------------------------------
    input
        speed       フェードアウトするまでの時間(ms 単位、1〜2147483647)
    output          なし
-------------------------------------------------------------------------------
    
    曲のフェードアウトを行います(高音質)
    speed はフェードアウトするまでの時間(ms 単位)を指定します。
    
    
===============================================================================
    void getpcmdata(short *buf, int nsamples);
    procedure getpcmdata(buf : PSmallInt; nsamples : Integer);
-------------------------------------------------------------------------------
    input
        buf         PCM データを格納するバッファのポインタ
        nsamples    取得するサンプル数
    output          なし
-------------------------------------------------------------------------------
    
    PMDWin.dll で合成された PCM データを取得します。
    music_start() で曲の演奏が開始していない時には無音データが取得されます。
    得られる PCM データは 16bit, stereo, setpcmrate() で指定した周波数です。
    バッファサイズは、nsamples * 4(bytes)必要です。
    この関数で取得した PCM データをプレイヤ側で再生させてください。
    
    ex) setpcmrate(SOUND_44K);      // 44.1kHz を指定
        getpcmdata(buf, 44100);     // 1秒分のデータを buf に取得
                                    // (ワークの内容も１秒分進みます)
    
    ※この関数を呼び出したときにワークの変更が行われます。
    　ビューアー等でワークのデータを表示させる場合は、少しづつ読み出さないと
    　表示がぎこちなくなってしまいます。


===============================================================================
    void setppsinterpolation(bool ip);
    procedure setppsinterpolation(ip : Boolean);
-------------------------------------------------------------------------------
    input
        ip          一次補間を行うなら true
    output          なし
-------------------------------------------------------------------------------
    
    PPS パートで一次補間を行うかどうかを指定します。
    一次補間を行うと音質は上がりますが、処理が重くなります。
    
    
===============================================================================
    void setp86interpolation(bool ip);
    procedure setp86interpolation(ip : Boolean);
-------------------------------------------------------------------------------
    input
        ip          一次補間を行うなら true
    output          なし
-------------------------------------------------------------------------------
    
    P86 パートで一次補間を行うかどうかを指定します。
    一次補間を行うと音質は上がりますが、処理が重くなります。
    
    
===============================================================================
    void setppzinterpolation(bool ip);
    procedure setppzinterpolation(ip : Boolean);
-------------------------------------------------------------------------------
    input
        ip          一次補間を行うなら true
    output          なし
-------------------------------------------------------------------------------
    
    PPZ8 パートで一次補間を行うかどうかを指定します。
    一次補間を行うと音質は上がりますが、処理が重くなります。
    
    
===============================================================================
    char *getmemo(char *dest, uchar *musdata, int size, int al);
    function getmemo(dest : PChar; musdata : Pointer; size, al : Integer)
        : PChar;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
        musdata     曲データのポインタ
        size        曲データのサイズ
        al          取得文字列の種類
    output          dest と同じ
-------------------------------------------------------------------------------

    メモ文字列を取得します。
    musdata = NULL または size = 0 の場合は PMDWin.dll に読み込まれて
    いる曲データをの文字列を取得し、その他の場合は musdata と size で
    指定されるメモリ上の曲データのメモ文字列を取得します。
    dest で指定されるバッファは 1024 バイト以上確保して下さい。
    
    メモ番号と定義内容の対応は以下の通りです。
        AL      定義
        -2      #PPZFile(1,2共用。MMLに記述した文字列そのまま)
        -1      #PPSFile
         0      #PCMFile または #PPCFile
         1      #Title
         2      #Composer
         3      #Arranger
         4      #Memo(1個目)
         5      #Memo(2個目)
         :
         :
    
    getlength(), getlength2() のうちのどちらかと getmemo(), getmemo2(),
    getmemo3(), fgetmemo(), fgetmemo2(), fgetmemo3() のうちのひとつ、
    他の関数の組み合わせのみ、別のスレッドから同時に実行できます。
    
    
===============================================================================
    char *getmemo2(char *dest, uchar *musdata, int size, int al);
    function getmemo2(dest : PChar; musdata : Pointer; size, al : Integer)
        : PChar;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
        musdata     曲データのポインタ
        size        曲データのサイズ
        al          取得文字列の種類
    output          dest と同じ
-------------------------------------------------------------------------------
    
    getmemo とほぼ同様ですが、２バイト半角文字を通常の半角文字に
    変換して取得します。
    dest で指定されるバッファは 1024 バイト以上確保して下さい。
    
    getlength(), getlength2() のうちのどちらかと getmemo(), getmemo2(),
    getmemo3(), fgetmemo(), fgetmemo2(), fgetmemo3() のうちのひとつ、
    他の関数の組み合わせのみ、別のスレッドから同時に実行できます。


===============================================================================
    char *getmemo3(char *dest, uchar *musdata, int size, int al);
    function getmemo3(dest : PChar; musdata : Pointer; size, al : Integer)
        : PChar;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
        musdata     曲データのポインタ
        size        曲データのサイズ
        al          取得文字列の種類
    output          dest と同じ
-------------------------------------------------------------------------------
    
    getmemo2 に加えてさらにエスケープシーケンスの除去を行います。
    dest で指定されるバッファは 1024 バイト以上確保して下さい。
    
    getlength(), getlength2() のうちのどちらかと getmemo(), getmemo2(),
    getmemo3(), fgetmemo(), fgetmemo2(), fgetmemo3() のうちのひとつ、
    他の関数の組み合わせのみ、別のスレッドから同時に実行できます。


===============================================================================
    int fgetmemo(char *dest, char *filename, int al);
    function fgetmemo(dest : PChar; filename : PChar; al : Integer) : Integer;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
        filename    曲データのファイル名（フルパス）
        al          取得文字列の種類
    output          下記の戻り値を参照
-------------------------------------------------------------------------------

    メモ文字列を取得します。
    ファイル名で指定する以外は getmemo と同じです。
    filename = NULL の場合は PMDWin.dll に読み込まれている曲データの
    文字列を取得し、その他の場合は filename で指定される曲データの
    メモ文字列を取得します。
    dest で指定されるバッファは 1024 バイト以上確保して下さい。

    戻り値：
        PMDWIN_OK                   正常終了
        ERR_OPEN_MUSIC_FILE         曲 データを開けなかった
        ERR_OUT_OF_MEMORY           メモリ不足

    getlength(), getlength2() のうちのどちらかと getmemo(), getmemo2(),
    getmemo3(), fgetmemo(), fgetmemo2(), fgetmemo3() のうちのひとつ、
    他の関数の組み合わせのみ、別のスレッドから同時に実行できます。


===============================================================================
    int fgetmemo2(char *dest, char *filename, int al);
    function fgetmemo2(dest : PChar; filename : PChar; al : Integer) : Integer;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
        filename    曲データのファイル名（フルパス）
        al          取得文字列の種類
    output          fgetmemo() と同じ
-------------------------------------------------------------------------------

    fgetmemo とほぼ同様ですが、２バイト半角文字を通常の半角文字に
    変換して取得します。
    dest で指定されるバッファは 1024 バイト以上確保して下さい。
    
    getlength(), getlength2() のうちのどちらかと getmemo(), getmemo2(),
    getmemo3(), fgetmemo(), fgetmemo2(), fgetmemo3() のうちのひとつ、
    他の関数の組み合わせのみ、別のスレッドから同時に実行できます。


===============================================================================
    int fgetmemo3(char *dest, char *filename, int al);
    function fgetmemo3(dest : PChar; filename : PChar; al : Integer) : Integer;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
        filename    曲データのファイル名（フルパス）
        al          取得文字列の種類
    output          fgetmemo() と同じ
-------------------------------------------------------------------------------

    fgetmemo2 に加えてさらにエスケープシーケンスの除去を行います。
    dest で指定されるバッファは 1024 バイト以上確保して下さい。
    
    getlength(), getlength2() のうちのどちらかと getmemo(), getmemo2(),
    getmemo3(), fgetmemo(), fgetmemo2(), fgetmemo3() のうちのひとつ、
    他の関数の組み合わせのみ、別のスレッドから同時に実行できます。


===============================================================================
    char *getmusicfilename(char *dest);
    function getmusicfilename(dest : PChar) : PChar;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
    output          dest と同じ
-------------------------------------------------------------------------------
    
    PMDWin.dll に読み込まれている曲データのファイル名(フルパス)を
    取得します。
    
    
===============================================================================
    char *getpcmfilename(char *dest);
    function getpcmfilename(dest : PChar) : PChar;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
    output          dest と同じ
-------------------------------------------------------------------------------
    
    PMDWin.dll に読み込まれている PPC/P86 のファイル名(フルパス)を
    取得します(P86 を使用している場合は P86 のファイル名を、使用して
    いない場合はPPC のファイル名を取得します)
    
    
===============================================================================
    char *getppcfilename(char *dest);
    function getppcfilename(dest : PChar) : PChar;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
    output          dest と同じ
-------------------------------------------------------------------------------
    
    PMDWin.dll に読み込まれている PPC のファイル名(フルパス)を
    取得します。
    
    
===============================================================================
    char *getppsfilename(char *dest);
    function getppsfilename(dest : PChar) : PChar;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
    output          dest と同じ
-------------------------------------------------------------------------------
    
    PMDWin.dll に読み込まれている PPS のファイル名(フルパス)を
    取得します。
    
    
===============================================================================
    char *getp86filename(char *dest);
    function getp86filename(dest : PChar) : PChar;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
    output          dest と同じ
-------------------------------------------------------------------------------
    
    PMDWin.dll に読み込まれている P86 のファイル名(フルパス)を
    取得します。
    
    
===============================================================================
    char *getppzfilename(char *dest, int bufnum);
    function getppzfilename(dest : PChar; bufnum : Integer) : PChar;
-------------------------------------------------------------------------------
    input
        dest        取得した文字列を格納するアドレスのポインタ
        bufnum      バッファ番号(0 または 1)
    output          dest と同じ
-------------------------------------------------------------------------------
    
    PMDWin.dll に読み込まれている PPZ8 の PCM ファイル名(フルパス)を
    取得します。
    
    
===============================================================================
    int ppc_load(char *filename);
    function ppc_load(filename : PChar) : Integer;
-------------------------------------------------------------------------------
    input
        filename    PPC のファイル名
    output          下記の戻り値を参照
-------------------------------------------------------------------------------
    
    ファイル名で示される PPC データを 強制的に PMDWin.dll に読み込みます。
    (曲データで指定されている場合は music_load() あるいは music_load2() で
    　同時に読み込まれるので通常は用いる必要はありません)
    ファイル名はフルパスで指定してください。setpcmdir() で指定された
    ディレクトリの検索は行いません。
    
    戻り値：
        PMDWIN_OK                   正常終了
        ERR_OPEN_PPC_FILE           PPC を開けなかった
        ERR_WRONG_PPC_FILE          PPC が異常
        WARNING_PPC_ALREADY_LOAD    PPC は既に読み込まれていた
        ERR_OUT_OF_MEMORY           メモリ不足


===============================================================================
    int pps_load(char *filename);
    function pps_load(filename : PChar) : Integer;
-------------------------------------------------------------------------------
    input
        filename    PPS のファイル名
    output          下記の戻り値を参照
-------------------------------------------------------------------------------
    
    ファイル名で示される PPS データを 強制的に PMDWin.dll に読み込みます。
    (曲データで指定されている場合はmusic_load() あるいは music_load2() で
    　同時に読み込まれるので通常は用いる必要はありません)
    ファイル名はフルパスで指定してください。setpcmdir() で指定された
    ディレクトリの検索は行いません。
    
    戻り値：
        PMDWIN_OK                   正常終了
        ERR_OPEN_PPS_FILE           PPS を開けなかった
        WARNING_PPS_ALREADY_LOAD    PPS は既に読み込まれていた
        ERR_OUT_OF_MEMORY           メモリ不足
        ERR_OTHER                   その他のエラー
                                    (もし出た場合は連絡をお願いします)


===============================================================================
    int p86_load(char *filename);
    function p86_load(filename : PChar) : Integer;
-------------------------------------------------------------------------------
    input
        filename    P86 のファイル名
    output          下記の戻り値を参照
-------------------------------------------------------------------------------
    
    ファイル名で示される P86 データを 強制的に PMDWin.dll に読み込みます。
    (曲データで指定されている場合は music_load() あるいは music_load2() で
    　同時に読み込まれるので通常は用いる必要はありません)
    ファイル名はフルパスで指定してください。setpcmdir() で指定された
    ディレクトリの検索は行いません。
    
    戻り値：
        PMDWIN_OK                   正常終了
        ERR_OPEN_P86_FILE           P86 を開けなかった
        ERR_WRONG_P86_FILE          P86 が異常
        WARNING_P86_ALREADY_LOAD    P86 は既に読み込まれていた
        ERR_OUT_OF_MEMORY           メモリ不足
        ERR_OTHER                   その他のエラー
                                    (もし出た場合は連絡をお願いします)


===============================================================================
    int ppz_load(char *filename, int bufnum);
    function ppz_load(filename : PChar; bufnum : Integer) : Integer;
-------------------------------------------------------------------------------
    input
        filename    PPZ のファイル名
        bufnum      バッファ番号(0 または 1)
    output          下記の戻り値を参照
-------------------------------------------------------------------------------
    
    ファイル名で示される PPZ データを 強制的に PMDWin.dll に読み込みます。
    (曲データで指定されている場合は music_load() あるいは music_load2() で
    　同時に読み込まれるので通常は用いる必要はありません)
    ファイル名はフルパスで指定してください。setpcmdir() で指定された
    ディレクトリの検索は行いません。
    
    戻り値：
        PMDWIN_OK                   正常終了
        ERR_OPEN_PPZ1_FILE          PPZ(Buffer 1)を開けなかった
        ERR_OPEN_PPZ2_FILE          PPZ(Buffer 2)を開けなかった
        ERR_WRONG_PPZ1_FILE         PPZ(Buffer 1)が異常
        ERR_WRONG_PPZ2_FILE         PPZ(Buffer 2)が異常
        WARNING_PPZ1_ALREADY_LOAD   PPZ(Buffer 1)は既に読み込まれていた
        WARNING_PPZ2_ALREADY_LOAD   PPZ(Buffer 2)は既に読み込まれていた
        ERR_OUT_OF_MEMORY           メモリ不足
        ERR_OTHER                   その他のエラー
                                    (もし出た場合は連絡をお願いします)
    
    
===============================================================================
    int maskon(int ch);
    function maskon(ch : Integer) : Integer;
-------------------------------------------------------------------------------
    input
        ch          マスクをかけるチャンネル(０〜２３)
    output          下記の戻り値を参照
-------------------------------------------------------------------------------

    パートマスクをかけます。
    チャンネル番号とパートの対応は以下のとおりです。
    
        0〜5    FM1 (A)〜FM6(F)
        6〜8    SSG1(G)〜SSG3(I)
        9       ADPCM(J)
        10      リズムパート(K)
        11〜13  FMEx1〜FMEx3
        14      Rhythm音源全体
        15      なし
        16〜23  PPZ1〜PPZ8
        
        
    戻り値：
        PMDWIN_OK                   正常終了
        ERR_WRONG_PARTNO            パート番号が異常
    
    
===============================================================================
    int maskoff(int ch);
    function maskoff(ch : Integer) : Integer;
-------------------------------------------------------------------------------
    input
        ch          マスクをかけるチャンネル(０〜２３)
    output          下記の戻り値を参照
-------------------------------------------------------------------------------
    
    パートマスクを解除します。
    チャンネル番号は maskon() と同様です。
    
        戻り値：
            PMDWIN_OK                   正常終了
            ERR_WRONG_PARTNO            パート番号が異常
            ERR_NOT_MASKED              指定パートはマスクされていない
            ERR_EFFECT_USED             指定パートは効果音で使用中
            ERR_MUSIC_STOPPED           曲が止まっている
    
    
===============================================================================
    void setfmvoldown(int voldown);
    procedure setfmvoldown(voldown : Integer);
-------------------------------------------------------------------------------
    input
        voldown     ＦＭパートの音量補正値(０〜２５５)
    output          なし
-------------------------------------------------------------------------------
    
    FM パートの音量を指定した値だけ下げます。
    
    
===============================================================================
    void setssgvoldown(int voldown);
    procedure setssgvoldown(voldown : Integer);
-------------------------------------------------------------------------------
    input
        voldown     ＳＳＧパートの音量補正値(０〜２５５)
    output          なし
-------------------------------------------------------------------------------
    
    SSG パートの音量を指定した値だけ下げます。
    
    
===============================================================================
    void setrhythmvoldown(int voldown);
    procedure setrhythmvoldown(voldown : Integer);
-------------------------------------------------------------------------------
    input
        voldown     OPNA リズム音源の音量補正値(０〜２５５)
    output          なし
-------------------------------------------------------------------------------
    
    OPNA リズム音源の音量を指定した値だけ下げます。
    
    
===============================================================================
    void setadpcmvoldown(int voldown);
    procedure setadpcmvoldown(voldown : Integer);
-------------------------------------------------------------------------------
    input
        voldown     ADPCM の音量補正値(０〜２５５)
    output          なし
-------------------------------------------------------------------------------
    
    ADPCM の音量を指定した値だけ下げます。
    
    
===============================================================================
    void setppzvoldown(int voldown);
    procedure setppzvoldown(voldown : Integer);
-------------------------------------------------------------------------------
    input
        voldown     PPZ8 の音量補正値(０〜２５５)
    output          なし
-------------------------------------------------------------------------------
    
    PPZ8 の音量を指定した値だけ下げます。
    
    
===============================================================================
    int getfmvoldown(void);
    function getfmvoldown : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          ＦＭパートの音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    FM パートの音量補正値(MML で指定された値。指定されていない場合は
    setfmvoldown() で指定した値)を取得します。
    
    
===============================================================================
    int getfmvoldown2(void);
    function getfmvoldown2 : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          ＦＭパートの音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    FM パートの音量補正値(setfmvoldown() で指定した値)を取得します。
    
    
===============================================================================
    int getssgvoldown(void);
    function getssgvoldown : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          ＳＳＧパートの音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    SSG パートの音量補正値(MML で指定された値。指定されていない場合は
    setssgvoldown() で指定した値)を取得します。
    
    
===============================================================================
    int getssgvoldown2(void);
    function getssgvoldown2 : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          ＳＳＧパートの音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    SSG パートの音量補正値(setssgvoldown() で指定した値)を取得します。
    
    
===============================================================================
    int getrhythmvoldown(void);
    function getrhythmvoldown : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          OPNA リズム音源の音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    OPNA リズム音源の音量補正値(MML で指定された値。指定されていない場合は
    setrhythmvoldown() で指定した値)を取得します。
    
    
===============================================================================
    int getrhythmvoldown2(void);
    function getrhythmvoldown2 : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          OPNA リズム音源の音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    OPNA リズム音源の音量補正値(setrhythmvoldown() で指定した値)を
    取得します。
    
    
===============================================================================
    int getadpcmvoldown(void);
    function getadpcmvoldown : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          ADPCM の音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    ADPCM の音量補正値(MML で指定された値。指定されていない場合は
    setadpcmvoldown() で指定した値)を取得します。
    
    
===============================================================================
    int getadpcmvoldown2(void);
    function getadpcmvoldown2 : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          ADPCM の音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    ADPCM の音量補正値(setadpcmvoldown() で指定した値)を取得します。
    
    
===============================================================================
    int getppzvoldown(void);
    function getppzvoldown : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          PPZ8 の音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    PPZ8 の音量補正値(MML で指定された値。指定されていない場合は
    setppzvoldown() で指定した値)を取得します。
    
    
===============================================================================
    int getppzvoldown2(void);
    function getppzvoldown2 : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          PPZ8 の音量補正値(０〜２５５)
-------------------------------------------------------------------------------
    
    PPZ8 の音量補正値(setppzvoldown() で指定した値)を取得します。
    
    
===============================================================================
    void setpos(int pos);
    procedure setpos(pos : Integer);
-------------------------------------------------------------------------------
    input           再生位置(ms 単位)
    output          なし
-------------------------------------------------------------------------------
    
    演奏を指定した位置(ms 単位)にスキップします。
    
    
===============================================================================
    void setpos2(int pos);
    procedure setpos2(pos : Integer);
-------------------------------------------------------------------------------
    input           再生位置(TimerB count 単位)
    output          なし
-------------------------------------------------------------------------------
    
    演奏を指定した位置(TimerB count 単位)にスキップします。
    
    
===============================================================================
    int getpos(void);
    function getpos : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          再生位置(ms 単位)
-------------------------------------------------------------------------------
    
    演奏開始後の再生位置(ms 単位)を取得します。
    
    
===============================================================================
    int getpos2(void);
    function getpos2 : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          再生位置(TimerB count 単位)
-------------------------------------------------------------------------------
    
    演奏開始後の再生位置(TimerB count 単位)を取得します。
    
    
===============================================================================
    bool getlength(char *filename, int *length, int *loop);
    function getlength(filename : PChar;
        var length : Integer; var loop : Integer) : Boolean;
-------------------------------------------------------------------------------
    input
        filename    長さを取得する曲データのファイル名(フルパス)
    output
        戻り値      ファイルを読めて正常に取得できたら true
        length      １ループ目の長さ(ms 単位)
        loop        ２ループ目以降の１ループの長さ(ms 単位)
-------------------------------------------------------------------------------
    
    filename で指定される曲の長さ(ms 単位)を取得します。
    length で１ループ目の長さ、loop で２ループ目以降の１ループの長さを
    取得します。２ループ分計算するため相当重いです。
    
    getlength, getlength2 のうちのどちらかと getmemo, getmemo2, getmemo3
    のうちのひとつ、他の関数の組み合わせのみ、別のスレッドから同時に
    実行できます。


===============================================================================
    bool getlength2(char *filename, int *length, int *loop);
    function getlength2(filename : PChar;
        var length : Integer; var loop : Integer) : Boolean;
-------------------------------------------------------------------------------
    input
        filename    長さを取得する曲データのファイル名(フルパス)
    output
        戻り値      ファイルを読めて正常に取得できたら true
        length      １ループ目の長さ(TimerB count 単位)
        loop        ２ループ目以降の１ループの長さ(TimerB count 単位)
-------------------------------------------------------------------------------
    
    filename で指定される曲の長さ(TimerB count 単位)を取得します。
    length で１ループ目の長さ、loop で２ループ目以降の１ループの長さを
    取得します。２ループ分計算するため相当重いです。
    
    getlength, getlength2 のうちのどちらかと getmemo, getmemo2, getmemo3
    のうちのひとつ、他の関数の組み合わせのみ、別のスレッドから同時に
    実行できます。


===============================================================================
    int getloopcount(void);
    function getloopcount : Integer;
-------------------------------------------------------------------------------
    input           なし
    output          ループ回数
-------------------------------------------------------------------------------
    
    現在のループ回数を取得します。
    
    戻り値：
        -1                          演奏停止中
        0以上                       ループ回数
    
    
===============================================================================
    void setfmwait(int nsec);
    function setfmwait(nsec : Integer);
-------------------------------------------------------------------------------
    input           wait(nsec 単位)
    output          なし
-------------------------------------------------------------------------------
    
    FM パートのレジスタにデータを出力する前の wait を設定します。
    デフォルトは 15000 です。通常は変更する必要はありません。


===============================================================================
    void setssgwait(int nsec);
    function setssgwait(nsec : Integer);
-------------------------------------------------------------------------------
    input           wait(nsec 単位)
    output          なし
-------------------------------------------------------------------------------
    
    SSG パートのレジスタにデータを出力する前の wait を設定します。
    デフォルトは 15000 です。通常は変更する必要はありません。


===============================================================================
    void setrhythmwait(int nsec);
    function setrhythmwait(nsec : Integer);
-------------------------------------------------------------------------------
    input           wait(nsec 単位)
    output          なし
-------------------------------------------------------------------------------
    
    OPNA リズムパートのレジスタにデータを出力する前の wait を設定します。
    デフォルトは 15000 です。通常は変更する必要はありません。


===============================================================================
    void setadpcmwait(int nsec);
    function setadpcmwait(nsec : Integer);
-------------------------------------------------------------------------------
    input           wait(nsec 単位)
    output          なし
-------------------------------------------------------------------------------
    
    ADPCM パートのレジスタにデータを出力する前の wait を設定します。
    デフォルトは 15000 です。通常は変更する必要はありません。


===============================================================================
    OPEN_WORK *getopenwork(void);
    function getopenwork : POPEN_WORK;
-------------------------------------------------------------------------------
    input           なし
    output          全体公開ワークのポインタ
-------------------------------------------------------------------------------
    全体公開ワークのポインタを取得します。
    
    ※ワークへの書き込みは行わないで下さい。
    ※OPEN_WORK の構造は今後変更する可能性があります。


===============================================================================
    QQ *getpartwork(int ch);
    function getpartwork(ch : Integer) : PQQ;
-------------------------------------------------------------------------------
    input
        ch          パートワークを取得するチャンネル(０〜２３)
    output          パートワークのポインタ
-------------------------------------------------------------------------------
    
    指定パートのワークのポインタを取得します。
    チャンネル番号とパートの対応は maskon() と同じです。
    パートワークのポインタが取得できない場合には NULL を返します。
    
    ※ワークへの書き込みは行わないで下さい。
    
    

------------------------------------------------------------------------------
▼連絡先

    E-mail                  HQD00151@nifty.com
    Homepage                http://c60.la.coocan.jp/
    Twitter                 c60fmp



                                                                Ｃ６０
