/* DO NOT EDIT! GENERATED AUTOMATICALLY! */
/* Categories of Unicode characters.  */
/* Generated automatically by gen-uni-tables.c for Unicode 9.0.0.  */
#define header_0 16
#define header_2 9
#define header_3 127
#define header_4 15
static const
struct
  {
    int header[1];
    int level1[2];
    short level2[2 << 7];
    /*unsigned*/ int level3[18 << 4];
  }
u_categ_Ll =
{
  { 2 },
  {
        3 * sizeof (int) / sizeof (short) +     0,
        3 * sizeof (int) / sizeof (short) +   128
  },
  {
        3 +   256 * sizeof (short) / sizeof (int) +     0,
        3 +   256 * sizeof (short) / sizeof (int) +    16,
        3 +   256 * sizeof (short) / sizeof (int) +    32,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +    48,
       -1,
       -1,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +    64,
        3 +   256 * sizeof (short) / sizeof (int) +    80,
        3 +   256 * sizeof (short) / sizeof (int) +    96,
       -1,
       -1,
       -1,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   112,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   128,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   144,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   160,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   176,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   192,
       -1,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   208,
       -1,
       -1,
       -1,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   224,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   240,
        3 +   256 * sizeof (short) / sizeof (int) +   256,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
        3 +   256 * sizeof (short) / sizeof (int) +   272,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1,
       -1
  },
  {
    0x00000000, 0x00000000, 0x00000000, 0x07FFFFFE,
    0x00000000, 0x00200000, 0x80000000, 0xFF7FFFFF,
    0xAAAAAAAA, 0x55AAAAAA, 0xAAAAAB55, 0xD4AAAAAA,
    0x4E243129, 0xE6512D2A, 0xB5555240, 0xAA29AAAA,
    0xAAAAAAAA, 0x93FAAAAA, 0xFFFFAA85, 0xFFFFFFFF,
    0xFFEFFFFF, 0x0000FFFF, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x388A0000,
    0x00010000, 0xFFFFF000, 0xAAE37FFF, 0x192FAAAA,
    0x00000000, 0xFFFF0000, 0xFFFFFFFF, 0xAAAAAAAA,
    0xAAAAA802, 0xAAAAAAAA, 0xAAAAD554, 0xAAAAAAAA,
    0xAAAAAAAA, 0x0000AAAA, 0x00000000, 0xFFFFFFFE,
    0x000000FF, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x3F000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x000001FF, 0x00000000, 0x00000000, 0x00000000,
    0xFFFFFFFF, 0x00000FFF, 0x00000000, 0xFEFFF800,
    0x07FFFFFF, 0x00000000, 0x00000000, 0x00000000,
    0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA,
    0xBFEAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA,
    0x003F00FF, 0x00FF00FF, 0x00FF003F, 0x3FFF00FF,
    0x00FF00FF, 0x40DF00FF, 0x00CF00DC, 0x00DC00FF,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x0008C400, 0x32108000, 0x000043C0, 0x00000000,
    0x00000010, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0xFFFF0000, 0x7FFFFFFF, 0x0FDA1562,
    0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x0008501A,
    0xFFFFFFFF, 0x000020BF, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0xAAAAAAAA, 0x00002AAA,
    0x0AAAAAAA, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0xAAABAAA8, 0xAAAAAAAA, 0x95FEAAAA,
    0xAABA50AA, 0x00A002AA, 0x00000000, 0x04000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0xFFFF0000, 0x07FFFFFF, 0xFFFF003F,
    0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00F8007F, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x07FFFFFE, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0xFFFFFF00, 0x0000FFFF, 0x00000000,
    0x00000000, 0x00000000, 0xFF000000, 0x0FFFFFFF,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0xFFFFFFFF, 0x0007FFFF,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0xFFFFFFFF, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0xFC000000, 0x000FFFFF, 0xFFDFC000, 0x000000FF,
    0x0FFFFFFC, 0xEBC00000, 0x0000FFEF, 0xFFFFFC00,
    0xC000000F, 0x00FFFFFF, 0xFFFC0000, 0x00000FFF,
    0xFFFFFFC0, 0xFC000000, 0x000FFFFF, 0xFFFFC000,
    0x000000FF, 0x0FFFFFFC, 0xFFC00000, 0x0000FFFF,
    0xFFFFFC00, 0x0000003F, 0xF7FFFFFC, 0xF0000003,
    0x0FDFFFFF, 0xFFC00000, 0x003F7FFF, 0xFFFF0000,
    0x0000FDFF, 0xFFFFFC00, 0x00000BF7, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0xFFFFFFFC, 0x0000000F, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000
  }
};
