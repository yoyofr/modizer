/*   -*- buffer-read-only: t -*- vi: set ro:
 *
 *  DO NOT EDIT THIS FILE   (tpmtool-args.c)
 *
 *  It has been AutoGen-ed
 *  From the definitions    tpmtool-args.def
 *  and the template file   options
 *
 * Generated from AutoOpts 42:1:17 templates.
 *
 *  AutoOpts is a copyrighted work.  This source file is not encumbered
 *  by AutoOpts licensing, but is provided under the licensing terms chosen
 *  by the tpmtool author or copyright holder.  AutoOpts is
 *  licensed under the terms of the LGPL.  The redistributable library
 *  (``libopts'') is licensed under the terms of either the LGPL or, at the
 *  users discretion, the BSD license.  See the AutoOpts and/or libopts sources
 *  for details.
 *
 * The tpmtool program is copyrighted and licensed
 * under the following terms:
 *
 *  Copyright (C) 2000-2020 Free Software Foundation, and others, all rights reserved.
 *  This is free software. It is licensed for use, modification and
 *  redistribution under the terms of the GNU General Public License,
 *  version 3 or later <http://gnu.org/licenses/gpl.html>
 *
 *  tpmtool is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  tpmtool is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __doxygen__
#define OPTION_CODE_COMPILE 1
#include "tpmtool-args.h"
#include <sys/types.h>
#include <sys/stat.h>

#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#ifdef  __cplusplus
extern "C" {
#endif
extern FILE * option_usage_fp;
#define zCopyright      (tpmtool_opt_strs+0)
#define zLicenseDescrip (tpmtool_opt_strs+283)


#ifndef NULL
#  define NULL 0
#endif

/**
 *  static const strings for tpmtool options
 */
static char const tpmtool_opt_strs[2257] =
/*     0 */ "tpmtool 3.6.13\n"
            "Copyright (C) 2000-2020 Free Software Foundation, and others, all rights reserved.\n"
            "This is free software. It is licensed for use, modification and\n"
            "redistribution under the terms of the GNU General Public License,\n"
            "version 3 or later <http://gnu.org/licenses/gpl.html>\n\0"
/*   283 */ "tpmtool is free software: you can redistribute it and/or modify it under\n"
            "the terms of the GNU General Public License as published by the Free\n"
            "Software Foundation, either version 3 of the License, or (at your option)\n"
            "any later version.\n\n"
            "tpmtool is distributed in the hope that it will be useful, but WITHOUT ANY\n"
            "WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n"
            "FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n"
            "details.\n\n"
            "You should have received a copy of the GNU General Public License along\n"
            "with this program.  If not, see <http://www.gnu.org/licenses/>.\n\0"
/*   886 */ "Enable debugging\0"
/*   903 */ "DEBUG\0"
/*   909 */ "debug\0"
/*   915 */ "Input file\0"
/*   926 */ "INFILE\0"
/*   933 */ "infile\0"
/*   940 */ "Output file\0"
/*   952 */ "OUTFILE\0"
/*   960 */ "outfile\0"
/*   968 */ "Generate an RSA private-public key pair\0"
/*  1008 */ "GENERATE_RSA\0"
/*  1021 */ "generate-rsa\0"
/*  1034 */ "Any generated key will be registered in the TPM\0"
/*  1082 */ "REGISTER\0"
/*  1091 */ "register\0"
/*  1100 */ "Any generated key will be a signing key\0"
/*  1140 */ "SIGNING\0"
/*  1148 */ "signing\0"
/*  1156 */ "Any generated key will be a legacy key\0"
/*  1195 */ "LEGACY\0"
/*  1202 */ "legacy\0"
/*  1209 */ "Any registered key will be a user key\0"
/*  1247 */ "USER\0"
/*  1252 */ "user\0"
/*  1257 */ "Any registered key will be a system key\0"
/*  1297 */ "SYSTEM\0"
/*  1304 */ "system\0"
/*  1311 */ "Prints the public key of the provided key\0"
/*  1353 */ "PUBKEY\0"
/*  1360 */ "pubkey\0"
/*  1367 */ "Lists all stored keys in the TPM\0"
/*  1400 */ "LIST\0"
/*  1405 */ "list\0"
/*  1410 */ "Delete the key identified by the given URL (UUID).\0"
/*  1461 */ "DELETE\0"
/*  1468 */ "delete\0"
/*  1475 */ "Tests the signature operation of the provided object\0"
/*  1528 */ "TEST_SIGN\0"
/*  1538 */ "test-sign\0"
/*  1548 */ "Specify the security level [low, legacy, medium, high, ultra].\0"
/*  1611 */ "SEC_PARAM\0"
/*  1621 */ "sec-param\0"
/*  1631 */ "Specify the number of bits for key generate\0"
/*  1675 */ "BITS\0"
/*  1680 */ "bits\0"
/*  1685 */ "Use the DER format for keys.\0"
/*  1714 */ "INDER\0"
/*  1720 */ "no-inder\0"
/*  1729 */ "no\0"
/*  1732 */ "Use DER format for output keys\0"
/*  1763 */ "OUTDER\0"
/*  1770 */ "no-outder\0"
/*  1780 */ "SRK has well known password (20 bytes of zeros)\0"
/*  1828 */ "SRK_WELL_KNOWN\0"
/*  1843 */ "srk-well-known\0"
/*  1858 */ "display extended usage information and exit\0"
/*  1902 */ "help\0"
/*  1907 */ "extended usage information passed thru pager\0"
/*  1952 */ "more-help\0"
/*  1962 */ "output version information and exit\0"
/*  1998 */ "version\0"
/*  2006 */ "TPMTOOL\0"
/*  2014 */ "tpmtool - GnuTLS TPM tool\n"
            "Usage:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]...\n\0"
/*  2098 */ "bugs@gnutls.org\0"
/*  2114 */ "\n\0"
/*  2116 */ "Program that allows handling cryptographic data from the TPM chip.\n\0"
/*  2184 */ "tpmtool 3.6.13\0"
/*  2199 */ "tpmtool [options]\n"
            "tpmtool --help for usage instructions.\n";

/**
 *  debug option description:
 */
/** Descriptive text for the debug option */
#define DEBUG_DESC      (tpmtool_opt_strs+886)
/** Upper-cased name for the debug option */
#define DEBUG_NAME      (tpmtool_opt_strs+903)
/** Name string for the debug option */
#define DEBUG_name      (tpmtool_opt_strs+909)
/** Compiled in flag settings for the debug option */
#define DEBUG_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))

/**
 *  infile option description:
 */
/** Descriptive text for the infile option */
#define INFILE_DESC      (tpmtool_opt_strs+915)
/** Upper-cased name for the infile option */
#define INFILE_NAME      (tpmtool_opt_strs+926)
/** Name string for the infile option */
#define INFILE_name      (tpmtool_opt_strs+933)
/** Compiled in flag settings for the infile option */
#define INFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  outfile option description:
 */
/** Descriptive text for the outfile option */
#define OUTFILE_DESC      (tpmtool_opt_strs+940)
/** Upper-cased name for the outfile option */
#define OUTFILE_NAME      (tpmtool_opt_strs+952)
/** Name string for the outfile option */
#define OUTFILE_name      (tpmtool_opt_strs+960)
/** Compiled in flag settings for the outfile option */
#define OUTFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  generate-rsa option description:
 */
/** Descriptive text for the generate-rsa option */
#define GENERATE_RSA_DESC      (tpmtool_opt_strs+968)
/** Upper-cased name for the generate-rsa option */
#define GENERATE_RSA_NAME      (tpmtool_opt_strs+1008)
/** Name string for the generate-rsa option */
#define GENERATE_RSA_name      (tpmtool_opt_strs+1021)
/** Compiled in flag settings for the generate-rsa option */
#define GENERATE_RSA_FLAGS     (OPTST_DISABLED)

/**
 *  register option description with
 *  "Must also have options" and "Incompatible options":
 */
/** Descriptive text for the register option */
#define REGISTER_DESC      (tpmtool_opt_strs+1034)
/** Upper-cased name for the register option */
#define REGISTER_NAME      (tpmtool_opt_strs+1082)
/** Name string for the register option */
#define REGISTER_name      (tpmtool_opt_strs+1091)
/** Other options that are required by the register option */
static int const aRegisterMustList[] = {
    INDEX_OPT_GENERATE_RSA, NO_EQUIVALENT };
/** Compiled in flag settings for the register option */
#define REGISTER_FLAGS     (OPTST_DISABLED)

/**
 *  signing option description with
 *  "Must also have options" and "Incompatible options":
 */
/** Descriptive text for the signing option */
#define SIGNING_DESC      (tpmtool_opt_strs+1100)
/** Upper-cased name for the signing option */
#define SIGNING_NAME      (tpmtool_opt_strs+1140)
/** Name string for the signing option */
#define SIGNING_name      (tpmtool_opt_strs+1148)
/** Other options that are required by the signing option */
static int const aSigningMustList[] = {
    INDEX_OPT_GENERATE_RSA, NO_EQUIVALENT };
/** Other options that appear in conjunction with the signing option */
static int const aSigningCantList[] = {
    INDEX_OPT_LEGACY, NO_EQUIVALENT };
/** Compiled in flag settings for the signing option */
#define SIGNING_FLAGS     (OPTST_DISABLED)

/**
 *  legacy option description with
 *  "Must also have options" and "Incompatible options":
 */
/** Descriptive text for the legacy option */
#define LEGACY_DESC      (tpmtool_opt_strs+1156)
/** Upper-cased name for the legacy option */
#define LEGACY_NAME      (tpmtool_opt_strs+1195)
/** Name string for the legacy option */
#define LEGACY_name      (tpmtool_opt_strs+1202)
/** Other options that are required by the legacy option */
static int const aLegacyMustList[] = {
    INDEX_OPT_GENERATE_RSA, NO_EQUIVALENT };
/** Other options that appear in conjunction with the legacy option */
static int const aLegacyCantList[] = {
    INDEX_OPT_SIGNING, NO_EQUIVALENT };
/** Compiled in flag settings for the legacy option */
#define LEGACY_FLAGS     (OPTST_DISABLED)

/**
 *  user option description with
 *  "Must also have options" and "Incompatible options":
 */
/** Descriptive text for the user option */
#define USER_DESC      (tpmtool_opt_strs+1209)
/** Upper-cased name for the user option */
#define USER_NAME      (tpmtool_opt_strs+1247)
/** Name string for the user option */
#define USER_name      (tpmtool_opt_strs+1252)
/** Other options that are required by the user option */
static int const aUserMustList[] = {
    INDEX_OPT_REGISTER, NO_EQUIVALENT };
/** Other options that appear in conjunction with the user option */
static int const aUserCantList[] = {
    INDEX_OPT_SYSTEM, NO_EQUIVALENT };
/** Compiled in flag settings for the user option */
#define USER_FLAGS     (OPTST_DISABLED)

/**
 *  system option description with
 *  "Must also have options" and "Incompatible options":
 */
/** Descriptive text for the system option */
#define SYSTEM_DESC      (tpmtool_opt_strs+1257)
/** Upper-cased name for the system option */
#define SYSTEM_NAME      (tpmtool_opt_strs+1297)
/** Name string for the system option */
#define SYSTEM_name      (tpmtool_opt_strs+1304)
/** Other options that are required by the system option */
static int const aSystemMustList[] = {
    INDEX_OPT_REGISTER, NO_EQUIVALENT };
/** Other options that appear in conjunction with the system option */
static int const aSystemCantList[] = {
    INDEX_OPT_USER, NO_EQUIVALENT };
/** Compiled in flag settings for the system option */
#define SYSTEM_FLAGS     (OPTST_DISABLED)

/**
 *  pubkey option description:
 */
/** Descriptive text for the pubkey option */
#define PUBKEY_DESC      (tpmtool_opt_strs+1311)
/** Upper-cased name for the pubkey option */
#define PUBKEY_NAME      (tpmtool_opt_strs+1353)
/** Name string for the pubkey option */
#define PUBKEY_name      (tpmtool_opt_strs+1360)
/** Compiled in flag settings for the pubkey option */
#define PUBKEY_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  list option description:
 */
/** Descriptive text for the list option */
#define LIST_DESC      (tpmtool_opt_strs+1367)
/** Upper-cased name for the list option */
#define LIST_NAME      (tpmtool_opt_strs+1400)
/** Name string for the list option */
#define LIST_name      (tpmtool_opt_strs+1405)
/** Compiled in flag settings for the list option */
#define LIST_FLAGS     (OPTST_DISABLED)

/**
 *  delete option description:
 */
/** Descriptive text for the delete option */
#define DELETE_DESC      (tpmtool_opt_strs+1410)
/** Upper-cased name for the delete option */
#define DELETE_NAME      (tpmtool_opt_strs+1461)
/** Name string for the delete option */
#define DELETE_name      (tpmtool_opt_strs+1468)
/** Compiled in flag settings for the delete option */
#define DELETE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  test-sign option description:
 */
/** Descriptive text for the test-sign option */
#define TEST_SIGN_DESC      (tpmtool_opt_strs+1475)
/** Upper-cased name for the test-sign option */
#define TEST_SIGN_NAME      (tpmtool_opt_strs+1528)
/** Name string for the test-sign option */
#define TEST_SIGN_name      (tpmtool_opt_strs+1538)
/** Compiled in flag settings for the test-sign option */
#define TEST_SIGN_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  sec-param option description:
 */
/** Descriptive text for the sec-param option */
#define SEC_PARAM_DESC      (tpmtool_opt_strs+1548)
/** Upper-cased name for the sec-param option */
#define SEC_PARAM_NAME      (tpmtool_opt_strs+1611)
/** Name string for the sec-param option */
#define SEC_PARAM_name      (tpmtool_opt_strs+1621)
/** Compiled in flag settings for the sec-param option */
#define SEC_PARAM_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  bits option description:
 */
/** Descriptive text for the bits option */
#define BITS_DESC      (tpmtool_opt_strs+1631)
/** Upper-cased name for the bits option */
#define BITS_NAME      (tpmtool_opt_strs+1675)
/** Name string for the bits option */
#define BITS_name      (tpmtool_opt_strs+1680)
/** Compiled in flag settings for the bits option */
#define BITS_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))

/**
 *  inder option description:
 */
/** Descriptive text for the inder option */
#define INDER_DESC      (tpmtool_opt_strs+1685)
/** Upper-cased name for the inder option */
#define INDER_NAME      (tpmtool_opt_strs+1714)
/** disablement name for the inder option */
#define NOT_INDER_name  (tpmtool_opt_strs+1720)
/** disablement prefix for the inder option */
#define NOT_INDER_PFX   (tpmtool_opt_strs+1729)
/** Name string for the inder option */
#define INDER_name      (NOT_INDER_name + 3)
/** Compiled in flag settings for the inder option */
#define INDER_FLAGS     (OPTST_DISABLED)

/**
 *  outder option description:
 */
/** Descriptive text for the outder option */
#define OUTDER_DESC      (tpmtool_opt_strs+1732)
/** Upper-cased name for the outder option */
#define OUTDER_NAME      (tpmtool_opt_strs+1763)
/** disablement name for the outder option */
#define NOT_OUTDER_name  (tpmtool_opt_strs+1770)
/** disablement prefix for the outder option */
#define NOT_OUTDER_PFX   (tpmtool_opt_strs+1729)
/** Name string for the outder option */
#define OUTDER_name      (NOT_OUTDER_name + 3)
/** Compiled in flag settings for the outder option */
#define OUTDER_FLAGS     (OPTST_DISABLED)

/**
 *  srk-well-known option description:
 */
/** Descriptive text for the srk-well-known option */
#define SRK_WELL_KNOWN_DESC      (tpmtool_opt_strs+1780)
/** Upper-cased name for the srk-well-known option */
#define SRK_WELL_KNOWN_NAME      (tpmtool_opt_strs+1828)
/** Name string for the srk-well-known option */
#define SRK_WELL_KNOWN_name      (tpmtool_opt_strs+1843)
/** Compiled in flag settings for the srk-well-known option */
#define SRK_WELL_KNOWN_FLAGS     (OPTST_DISABLED)

/*
 *  Help/More_Help/Version option descriptions:
 */
#define HELP_DESC       (tpmtool_opt_strs+1858)
#define HELP_name       (tpmtool_opt_strs+1902)
#ifdef HAVE_WORKING_FORK
#define MORE_HELP_DESC  (tpmtool_opt_strs+1907)
#define MORE_HELP_name  (tpmtool_opt_strs+1952)
#define MORE_HELP_FLAGS (OPTST_IMM | OPTST_NO_INIT)
#else
#define MORE_HELP_DESC  HELP_DESC
#define MORE_HELP_name  HELP_name
#define MORE_HELP_FLAGS (OPTST_OMITTED | OPTST_NO_INIT)
#endif
#ifdef NO_OPTIONAL_OPT_ARGS
#  define VER_FLAGS     (OPTST_IMM | OPTST_NO_INIT)
#else
#  define VER_FLAGS     (OPTST_SET_ARGTYPE(OPARG_TYPE_STRING) | \
                         OPTST_ARG_OPTIONAL | OPTST_IMM | OPTST_NO_INIT)
#endif
#define VER_DESC        (tpmtool_opt_strs+1962)
#define VER_name        (tpmtool_opt_strs+1998)
/**
 *  Declare option callback procedures
 */
extern tOptProc
    optionBooleanVal,   optionNestedVal,    optionNumericVal,
    optionPagedUsage,   optionPrintVersion, optionResetOpt,
    optionStackArg,     optionTimeDate,     optionTimeVal,
    optionUnstackArg,   optionVendorOption;
static tOptProc
    doOptDebug, doOptInfile, doUsageOpt;
#define VER_PROC        optionPrintVersion

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 *  Define the tpmtool Option Descriptions.
 * This is an array of OPTION_CT entries, one for each
 * option that the tpmtool program responds to.
 */
static tOptDesc optDesc[OPTION_CT] = {
  {  /* entry idx, value */ 0, VALUE_OPT_DEBUG,
     /* equiv idx, value */ 0, VALUE_OPT_DEBUG,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DEBUG_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --debug */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptDebug,
     /* desc, NAME, name */ DEBUG_DESC, DEBUG_NAME, DEBUG_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 1, VALUE_OPT_INFILE,
     /* equiv idx, value */ 1, VALUE_OPT_INFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ INFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --infile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptInfile,
     /* desc, NAME, name */ INFILE_DESC, INFILE_NAME, INFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 2, VALUE_OPT_OUTFILE,
     /* equiv idx, value */ 2, VALUE_OPT_OUTFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ OUTFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --outfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ OUTFILE_DESC, OUTFILE_NAME, OUTFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 3, VALUE_OPT_GENERATE_RSA,
     /* equiv idx, value */ 3, VALUE_OPT_GENERATE_RSA,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ GENERATE_RSA_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --generate-rsa */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ GENERATE_RSA_DESC, GENERATE_RSA_NAME, GENERATE_RSA_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 4, VALUE_OPT_REGISTER,
     /* equiv idx, value */ 4, VALUE_OPT_REGISTER,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ REGISTER_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --register */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ aRegisterMustList, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ REGISTER_DESC, REGISTER_NAME, REGISTER_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 5, VALUE_OPT_SIGNING,
     /* equiv idx, value */ 5, VALUE_OPT_SIGNING,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SIGNING_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --signing */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ aSigningMustList, aSigningCantList,
     /* option proc      */ NULL,
     /* desc, NAME, name */ SIGNING_DESC, SIGNING_NAME, SIGNING_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 6, VALUE_OPT_LEGACY,
     /* equiv idx, value */ 6, VALUE_OPT_LEGACY,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ LEGACY_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --legacy */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ aLegacyMustList, aLegacyCantList,
     /* option proc      */ NULL,
     /* desc, NAME, name */ LEGACY_DESC, LEGACY_NAME, LEGACY_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 7, VALUE_OPT_USER,
     /* equiv idx, value */ 7, VALUE_OPT_USER,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ USER_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --user */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ aUserMustList, aUserCantList,
     /* option proc      */ NULL,
     /* desc, NAME, name */ USER_DESC, USER_NAME, USER_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 8, VALUE_OPT_SYSTEM,
     /* equiv idx, value */ 8, VALUE_OPT_SYSTEM,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SYSTEM_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --system */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ aSystemMustList, aSystemCantList,
     /* option proc      */ NULL,
     /* desc, NAME, name */ SYSTEM_DESC, SYSTEM_NAME, SYSTEM_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 9, VALUE_OPT_PUBKEY,
     /* equiv idx, value */ 9, VALUE_OPT_PUBKEY,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PUBKEY_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pubkey */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PUBKEY_DESC, PUBKEY_NAME, PUBKEY_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 10, VALUE_OPT_LIST,
     /* equiv idx, value */ 10, VALUE_OPT_LIST,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ LIST_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --list */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ LIST_DESC, LIST_NAME, LIST_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 11, VALUE_OPT_DELETE,
     /* equiv idx, value */ 11, VALUE_OPT_DELETE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DELETE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --delete */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ DELETE_DESC, DELETE_NAME, DELETE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 12, VALUE_OPT_TEST_SIGN,
     /* equiv idx, value */ 12, VALUE_OPT_TEST_SIGN,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ TEST_SIGN_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --test-sign */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ TEST_SIGN_DESC, TEST_SIGN_NAME, TEST_SIGN_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 13, VALUE_OPT_SEC_PARAM,
     /* equiv idx, value */ 13, VALUE_OPT_SEC_PARAM,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SEC_PARAM_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --sec-param */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ SEC_PARAM_DESC, SEC_PARAM_NAME, SEC_PARAM_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 14, VALUE_OPT_BITS,
     /* equiv idx, value */ 14, VALUE_OPT_BITS,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ BITS_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --bits */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ optionNumericVal,
     /* desc, NAME, name */ BITS_DESC, BITS_NAME, BITS_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 15, VALUE_OPT_INDER,
     /* equiv idx, value */ 15, VALUE_OPT_INDER,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ INDER_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --inder */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ INDER_DESC, INDER_NAME, INDER_name,
     /* disablement strs */ NOT_INDER_name, NOT_INDER_PFX },

  {  /* entry idx, value */ 16, VALUE_OPT_OUTDER,
     /* equiv idx, value */ 16, VALUE_OPT_OUTDER,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ OUTDER_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --outder */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ OUTDER_DESC, OUTDER_NAME, OUTDER_name,
     /* disablement strs */ NOT_OUTDER_name, NOT_OUTDER_PFX },

  {  /* entry idx, value */ 17, VALUE_OPT_SRK_WELL_KNOWN,
     /* equiv idx, value */ 17, VALUE_OPT_SRK_WELL_KNOWN,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SRK_WELL_KNOWN_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --srk-well-known */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ SRK_WELL_KNOWN_DESC, SRK_WELL_KNOWN_NAME, SRK_WELL_KNOWN_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ INDEX_OPT_VERSION, VALUE_OPT_VERSION,
     /* equiv idx value  */ NO_EQUIVALENT, VALUE_OPT_VERSION,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ VER_FLAGS, AOUSE_VERSION,
     /* last opt argumnt */ { NULL },
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ VER_PROC,
     /* desc, NAME, name */ VER_DESC, NULL, VER_name,
     /* disablement strs */ NULL, NULL },



  {  /* entry idx, value */ INDEX_OPT_HELP, VALUE_OPT_HELP,
     /* equiv idx value  */ NO_EQUIVALENT, VALUE_OPT_HELP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ OPTST_IMM | OPTST_NO_INIT, AOUSE_HELP,
     /* last opt argumnt */ { NULL },
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doUsageOpt,
     /* desc, NAME, name */ HELP_DESC, NULL, HELP_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ INDEX_OPT_MORE_HELP, VALUE_OPT_MORE_HELP,
     /* equiv idx value  */ NO_EQUIVALENT, VALUE_OPT_MORE_HELP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ MORE_HELP_FLAGS, AOUSE_MORE_HELP,
     /* last opt argumnt */ { NULL },
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL,  NULL,
     /* option proc      */ optionPagedUsage,
     /* desc, NAME, name */ MORE_HELP_DESC, NULL, MORE_HELP_name,
     /* disablement strs */ NULL, NULL }
};


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/** Reference to the upper cased version of tpmtool. */
#define zPROGNAME       (tpmtool_opt_strs+2006)
/** Reference to the title line for tpmtool usage. */
#define zUsageTitle     (tpmtool_opt_strs+2014)
/** There is no tpmtool configuration file. */
#define zRcName         NULL
/** There are no directories to search for tpmtool config files. */
#define apzHomeList     NULL
/** The tpmtool program bug email address. */
#define zBugsAddr       (tpmtool_opt_strs+2098)
/** Clarification/explanation of what tpmtool does. */
#define zExplain        (tpmtool_opt_strs+2114)
/** Extra detail explaining what tpmtool does. */
#define zDetail         (tpmtool_opt_strs+2116)
/** The full version string for tpmtool. */
#define zFullVersion    (tpmtool_opt_strs+2184)
/* extracted from optcode.tlib near line 342 */

#if defined(ENABLE_NLS)
# define OPTPROC_BASE OPTPROC_TRANSLATE | OPTPROC_NXLAT_OPT
  static tOptionXlateProc translate_option_strings;
#else
# define OPTPROC_BASE OPTPROC_NONE
# define translate_option_strings NULL
#endif /* ENABLE_NLS */

#define tpmtool_full_usage (NULL)
#define tpmtool_short_usage (tpmtool_opt_strs+2199)

#endif /* not defined __doxygen__ */

/*
 *  Create the static procedure(s) declared above.
 */
/**
 * The callout function that invokes the optionUsage function.
 *
 * @param[in] opts the AutoOpts option description structure
 * @param[in] od   the descriptor for the "help" (usage) option.
 * @noreturn
 */
static void
doUsageOpt(tOptions * opts, tOptDesc * od)
{
    int ex_code;
    ex_code = TPMTOOL_EXIT_SUCCESS;
    optionUsage(&tpmtoolOptions, ex_code);
    /* NOTREACHED */
    exit(TPMTOOL_EXIT_FAILURE);
    (void)opts;
    (void)od;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the debug option.
 * Specifies the debug level.
 * @param[in] pOptions the tpmtool options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptDebug(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static struct {long rmin, rmax;} const rng[1] = {
        { 0 ,  9999 } };
    int  ix;

    if (pOptions <= OPTPROC_EMIT_LIMIT)
        goto emit_ranges;
    optionNumericVal(pOptions, pOptDesc);

    for (ix = 0; ix < 1; ix++) {
        if (pOptDesc->optArg.argInt < rng[ix].rmin)
            continue;  /* ranges need not be ordered. */
        if (pOptDesc->optArg.argInt == rng[ix].rmin)
            return;
        if (rng[ix].rmax == LONG_MIN)
            continue;
        if (pOptDesc->optArg.argInt <= rng[ix].rmax)
            return;
    }

    option_usage_fp = stderr;

 emit_ranges:
optionShowRange(pOptions, pOptDesc, VOIDP(rng), 1);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the infile option.
 *
 * @param[in] pOptions the tpmtool options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptInfile(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}
/* extracted from optmain.tlib near line 1250 */

/**
 * The directory containing the data associated with tpmtool.
 */
#ifndef  PKGDATADIR
# define PKGDATADIR ""
#endif

/**
 * Information about the person or institution that packaged tpmtool
 * for the current distribution.
 */
#ifndef  WITH_PACKAGER
# define tpmtool_packager_info NULL
#else
/** Packager information for tpmtool. */
static char const tpmtool_packager_info[] =
    "Packaged by " WITH_PACKAGER

# ifdef WITH_PACKAGER_VERSION
        " ("WITH_PACKAGER_VERSION")"
# endif

# ifdef WITH_PACKAGER_BUG_REPORTS
    "\nReport tpmtool bugs to " WITH_PACKAGER_BUG_REPORTS
# endif
    "\n";
#endif
#ifndef __doxygen__

#endif /* __doxygen__ */
/**
 * The option definitions for tpmtool.  The one structure that
 * binds them all.
 */
tOptions tpmtoolOptions = {
    OPTIONS_STRUCT_VERSION,
    0, NULL,                    /* original argc + argv    */
    ( OPTPROC_BASE
    + OPTPROC_ERRSTOP
    + OPTPROC_SHORTOPT
    + OPTPROC_LONGOPT
    + OPTPROC_NO_REQ_OPT
    + OPTPROC_NEGATIONS
    + OPTPROC_NO_ARGS
    + OPTPROC_GNUUSAGE
    + OPTPROC_MISUSE ),
    0, NULL,                    /* current option index, current option */
    NULL,         NULL,         zPROGNAME,
    zRcName,      zCopyright,   zLicenseDescrip,
    zFullVersion, apzHomeList,  zUsageTitle,
    zExplain,     zDetail,      optDesc,
    zBugsAddr,                  /* address to send bugs to */
    NULL, NULL,                 /* extensions/saved state  */
    optionUsage, /* usage procedure */
    translate_option_strings,   /* translation procedure */
    /*
     *  Indexes to special options
     */
    { INDEX_OPT_MORE_HELP, /* more-help option index */
      NO_EQUIVALENT, /* save option index */
      NO_EQUIVALENT, /* '-#' option index */
      NO_EQUIVALENT /* index of default opt */
    },
    21 /* full option count */, 18 /* user option count */,
    tpmtool_full_usage, tpmtool_short_usage,
    NULL, NULL,
    PKGDATADIR, tpmtool_packager_info
};

#if ENABLE_NLS
/**
 * This code is designed to translate translatable option text for the
 * tpmtool program.  These translations happen upon entry
 * to optionProcess().
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#ifdef HAVE_DCGETTEXT
# include <gettext.h>
#endif
#include <autoopts/usage-txt.h>

static char * AO_gettext(char const * pz);
static void   coerce_it(void ** s);

/**
 * AutoGen specific wrapper function for gettext.  It relies on the macro _()
 * to convert from English to the target language, then strdup-duplicates the
 * result string.  It tries the "libopts" domain first, then whatever has been
 * set via the \a textdomain(3) call.
 *
 * @param[in] pz the input text used as a lookup key.
 * @returns the translated text (if there is one),
 *   or the original text (if not).
 */
static char *
AO_gettext(char const * pz)
{
    char * res;
    if (pz == NULL)
        return NULL;
#ifdef HAVE_DCGETTEXT
    /*
     * While processing the option_xlateable_txt data, try to use the
     * "libopts" domain.  Once we switch to the option descriptor data,
     * do *not* use that domain.
     */
    if (option_xlateable_txt.field_ct != 0) {
        res = dgettext("libopts", pz);
        if (res == pz)
            res = (char *)VOIDP(_(pz));
    } else
        res = (char *)VOIDP(_(pz));
#else
    res = (char *)VOIDP(_(pz));
#endif
    if (res == pz)
        return res;
    res = strdup(res);
    if (res == NULL) {
        fputs(_("No memory for duping translated strings\n"), stderr);
        exit(TPMTOOL_EXIT_FAILURE);
    }
    return res;
}

/**
 * All the pointers we use are marked "* const", but they are stored in
 * writable memory.  Coerce the mutability and set the pointer.
 */
static void coerce_it(void ** s) { *s = AO_gettext(*s);
}

/**
 * Translate all the translatable strings in the tpmtoolOptions
 * structure defined above.  This is done only once.
 */
static void
translate_option_strings(void)
{
    tOptions * const opts = &tpmtoolOptions;

    /*
     *  Guard against re-translation.  It won't work.  The strings will have
     *  been changed by the first pass through this code.  One shot only.
     */
    if (option_xlateable_txt.field_ct != 0) {
        /*
         *  Do the translations.  The first pointer follows the field count
         *  field.  The field count field is the size of a pointer.
         */
        char ** ppz = (char**)VOIDP(&(option_xlateable_txt));
        int     ix  = option_xlateable_txt.field_ct;

        do {
            ppz++; /* skip over field_ct */
            *ppz = AO_gettext(*ppz);
        } while (--ix > 0);
        /* prevent re-translation and disable "libopts" domain lookup */
        option_xlateable_txt.field_ct = 0;

        coerce_it(VOIDP(&(opts->pzCopyright)));
        coerce_it(VOIDP(&(opts->pzCopyNotice)));
        coerce_it(VOIDP(&(opts->pzFullVersion)));
        coerce_it(VOIDP(&(opts->pzUsageTitle)));
        coerce_it(VOIDP(&(opts->pzExplain)));
        coerce_it(VOIDP(&(opts->pzDetail)));
        {
            tOptDesc * od = opts->pOptDesc;
            for (ix = opts->optCt; ix > 0; ix--, od++)
                coerce_it(VOIDP(&(od->pzText)));
        }
    }
}
#endif /* ENABLE_NLS */

#ifdef DO_NOT_COMPILE_THIS_CODE_IT_IS_FOR_GETTEXT
/** I18N function strictly for xgettext.  Do not compile. */
static void bogus_function(void) {
  /* TRANSLATORS:

     The following dummy function was crated solely so that xgettext can
     extract the correct strings.  These strings are actually referenced
     by a field name in the tpmtoolOptions structure noted in the
     comments below.  The literal text is defined in tpmtool_opt_strs.

     NOTE: the strings below are segmented with respect to the source string
     tpmtool_opt_strs.  The strings above are handed off for translation
     at run time a paragraph at a time.  Consequently, they are presented here
     for translation a paragraph at a time.

     ALSO: often the description for an option will reference another option
     by name.  These are set off with apostrophe quotes (I hope).  Do not
     translate option names.
   */
  /* referenced via tpmtoolOptions.pzCopyright */
  puts(_("tpmtool 3.6.13\n\
Copyright (C) 2000-2020 Free Software Foundation, and others, all rights reserved.\n\
This is free software. It is licensed for use, modification and\n\
redistribution under the terms of the GNU General Public License,\n\
version 3 or later <http://gnu.org/licenses/gpl.html>\n"));

  /* referenced via tpmtoolOptions.pzCopyNotice */
  puts(_("tpmtool is free software: you can redistribute it and/or modify it under\n\
the terms of the GNU General Public License as published by the Free\n\
Software Foundation, either version 3 of the License, or (at your option)\n\
any later version.\n\n"));
  puts(_("tpmtool is distributed in the hope that it will be useful, but WITHOUT ANY\n\
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n\
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n\
details.\n\n"));
  puts(_("You should have received a copy of the GNU General Public License along\n\
with this program.  If not, see <http://www.gnu.org/licenses/>.\n"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Enable debugging"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Input file"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Output file"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Generate an RSA private-public key pair"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Any generated key will be registered in the TPM"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Any generated key will be a signing key"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Any generated key will be a legacy key"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Any registered key will be a user key"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Any registered key will be a system key"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Prints the public key of the provided key"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Lists all stored keys in the TPM"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Delete the key identified by the given URL (UUID)."));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Tests the signature operation of the provided object"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Specify the security level [low, legacy, medium, high, ultra]."));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Specify the number of bits for key generate"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Use the DER format for keys."));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("Use DER format for output keys"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("SRK has well known password (20 bytes of zeros)"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("display extended usage information and exit"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("extended usage information passed thru pager"));

  /* referenced via tpmtoolOptions.pOptDesc->pzText */
  puts(_("output version information and exit"));

  /* referenced via tpmtoolOptions.pzUsageTitle */
  puts(_("tpmtool - GnuTLS TPM tool\n\
Usage:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]...\n"));

  /* referenced via tpmtoolOptions.pzExplain */
  puts(_("\n"));

  /* referenced via tpmtoolOptions.pzDetail */
  puts(_("Program that allows handling cryptographic data from the TPM chip.\n"));

  /* referenced via tpmtoolOptions.pzFullVersion */
  puts(_("tpmtool 3.6.13"));

  /* referenced via tpmtoolOptions.pzFullUsage */
  puts(_("<<<NOT-FOUND>>>"));

  /* referenced via tpmtoolOptions.pzShortUsage */
  puts(_("tpmtool [options]\n\
tpmtool --help for usage instructions.\n"));
  /* LIBOPTS-MESSAGES: */
#line 67 "../autoopts.c"
  puts(_("allocation of %d bytes failed\n"));
#line 89 "../autoopts.c"
  puts(_("allocation of %d bytes failed\n"));
#line 48 "../init.c"
  puts(_("AutoOpts function called without option descriptor\n"));
#line 81 "../init.c"
  puts(_("\tThis exceeds the compiled library version:  "));
#line 79 "../init.c"
  puts(_("Automated Options Processing Error!\n"
       "\t%s called AutoOpts function with structure version %d:%d:%d.\n"));
#line 78 "../autoopts.c"
  puts(_("realloc of %d bytes at 0x%p failed\n"));
#line 83 "../init.c"
  puts(_("\tThis is less than the minimum library version:  "));
#line 121 "../version.c"
  puts(_("Automated Options version %s\n"
       "\tCopyright (C) 1999-2017 by Bruce Korb - all rights reserved\n"));
#line 49 "../makeshell.c"
  puts(_("(AutoOpts bug):  %s.\n"));
#line 90 "../reset.c"
  puts(_("optionResetOpt() called, but reset-option not configured"));
#line 241 "../usage.c"
  puts(_("could not locate the 'help' option"));
#line 330 "../autoopts.c"
  puts(_("optionProcess() was called with invalid data"));
#line 697 "../usage.c"
  puts(_("invalid argument type specified"));
#line 568 "../find.c"
  puts(_("defaulted to option with optional arg"));
#line 76 "../alias.c"
  puts(_("aliasing option is out of range."));
#line 210 "../enum.c"
  puts(_("%s error:  the keyword '%s' is ambiguous for %s\n"));
#line 78 "../find.c"
  puts(_("  The following options match:\n"));
#line 263 "../find.c"
  puts(_("%s: ambiguous option name: %s (matches %d options)\n"));
#line 161 "../check.c"
  puts(_("%s: Command line arguments required\n"));
#line 43 "../alias.c"
  puts(_("%d %s%s options allowed\n"));
#line 56 "../makeshell.c"
  puts(_("%s error %d (%s) calling %s for '%s'\n"));
#line 268 "../makeshell.c"
  puts(_("interprocess pipe"));
#line 171 "../version.c"
  puts(_("error: version option argument '%c' invalid.  Use:\n"
       "\t'v' - version only\n"
       "\t'c' - version and copyright\n"
       "\t'n' - version and full copyright notice\n"));
#line 58 "../check.c"
  puts(_("%s error:  the '%s' and '%s' options conflict\n"));
#line 187 "../find.c"
  puts(_("%s: The '%s' option has been disabled."));
#line 400 "../find.c"
  puts(_("%s: The '%s' option has been disabled."));
#line 38 "../alias.c"
  puts(_("-equivalence"));
#line 439 "../find.c"
  puts(_("%s: illegal option -- %c\n"));
#line 110 "../reset.c"
  puts(_("%s: illegal option -- %c\n"));
#line 241 "../find.c"
  puts(_("%s: illegal option -- %s\n"));
#line 740 "../find.c"
  puts(_("%s: illegal option -- %s\n"));
#line 118 "../reset.c"
  puts(_("%s: illegal option -- %s\n"));
#line 305 "../find.c"
  puts(_("%s: unknown vendor extension option -- %s\n"));
#line 135 "../enum.c"
  puts(_("  or an integer from %d through %d\n"));
#line 145 "../enum.c"
  puts(_("  or an integer from %d through %d\n"));
#line 696 "../usage.c"
  puts(_("%s error:  invalid option descriptor for %s\n"));
#line 1030 "../usage.c"
  puts(_("%s error:  invalid option descriptor for %s\n"));
#line 355 "../find.c"
  puts(_("%s: invalid option name: %s\n"));
#line 497 "../find.c"
  puts(_("%s: The '%s' option requires an argument.\n"));
#line 150 "../autoopts.c"
  puts(_("(AutoOpts bug):  Equivalenced option '%s' was equivalenced to both\n"
       "\t'%s' and '%s'."));
#line 94 "../check.c"
  puts(_("%s error:  The %s option is required\n"));
#line 602 "../find.c"
  puts(_("%s: The '%s' option cannot have an argument.\n"));
#line 151 "../check.c"
  puts(_("%s: Command line arguments are not allowed.\n"));
#line 568 "../save.c"
  puts(_("error %d (%s) creating %s\n"));
#line 210 "../enum.c"
  puts(_("%s error:  '%s' does not match any %s keywords.\n"));
#line 93 "../reset.c"
  puts(_("%s error: The '%s' option requires an argument.\n"));
#line 122 "../save.c"
  puts(_("error %d (%s) stat-ing %s\n"));
#line 175 "../save.c"
  puts(_("error %d (%s) stat-ing %s\n"));
#line 143 "../restore.c"
  puts(_("%s error: no saved option state\n"));
#line 225 "../autoopts.c"
  puts(_("'%s' is not a command line option.\n"));
#line 113 "../time.c"
  puts(_("%s error:  '%s' is not a recognizable date/time.\n"));
#line 50 "../time.c"
  puts(_("%s error:  '%s' is not a recognizable time duration.\n"));
#line 92 "../check.c"
  puts(_("%s error:  The %s option must appear %d times.\n"));
#line 165 "../numeric.c"
  puts(_("%s error:  '%s' is not a recognizable number.\n"));
#line 176 "../enum.c"
  puts(_("%s error:  %s exceeds %s keyword count\n"));
#line 279 "../usage.c"
  puts(_("Try '%s %s' for more information.\n"));
#line 45 "../alias.c"
  puts(_("one %s%s option allowed\n"));
#line 170 "../makeshell.c"
  puts(_("standard output"));
#line 905 "../makeshell.c"
  puts(_("standard output"));
#line 223 "../usage.c"
  puts(_("standard output"));
#line 364 "../usage.c"
  puts(_("standard output"));
#line 574 "../usage.c"
  puts(_("standard output"));
#line 178 "../version.c"
  puts(_("standard output"));
#line 223 "../usage.c"
  puts(_("standard error"));
#line 364 "../usage.c"
  puts(_("standard error"));
#line 574 "../usage.c"
  puts(_("standard error"));
#line 178 "../version.c"
  puts(_("standard error"));
#line 170 "../makeshell.c"
  puts(_("write"));
#line 905 "../makeshell.c"
  puts(_("write"));
#line 222 "../usage.c"
  puts(_("write"));
#line 363 "../usage.c"
  puts(_("write"));
#line 573 "../usage.c"
  puts(_("write"));
#line 177 "../version.c"
  puts(_("write"));
#line 60 "../numeric.c"
  puts(_("%s error:  %s option value %ld is out of range.\n"));
#line 44 "../check.c"
  puts(_("%s error:  %s option requires the %s option\n"));
#line 121 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 174 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 193 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 567 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
  /* END-LIBOPTS-MESSAGES */

  /* USAGE-TEXT: */
#line 822 "../usage.c"
  puts(_("\t\t\t\t- an alternate for '%s'\n"));
#line 1097 "../usage.c"
  puts(_("Version, usage and configuration options:"));
#line 873 "../usage.c"
  puts(_("\t\t\t\t- default option for unnamed options\n"));
#line 786 "../usage.c"
  puts(_("\t\t\t\t- disabled as '--%s'\n"));
#line 1066 "../usage.c"
  puts(_(" --- %-14s %s\n"));
#line 1064 "../usage.c"
  puts(_("This option has been disabled"));
#line 813 "../usage.c"
  puts(_("\t\t\t\t- enabled by default\n"));
#line 40 "../alias.c"
  puts(_("%s error:  only "));
#line 1143 "../usage.c"
  puts(_(" - examining environment variables named %s_*\n"));
#line 168 "../file.c"
  puts(_("\t\t\t\t- file must not pre-exist\n"));
#line 172 "../file.c"
  puts(_("\t\t\t\t- file must pre-exist\n"));
#line 329 "../usage.c"
  puts(_("Options are specified by doubled hyphens and their name or by a single\n"
       "hyphen and the flag character.\n"));
#line 882 "../makeshell.c"
  puts(_("\n"
       "= = = = = = = =\n\n"
       "This incarnation of genshell will produce\n"
       "a shell script to parse the options for %s:\n\n"));
#line 142 "../enum.c"
  puts(_("  or an integer mask with any of the lower %d bits set\n"));
#line 846 "../usage.c"
  puts(_("\t\t\t\t- is a set membership option\n"));
#line 867 "../usage.c"
  puts(_("\t\t\t\t- must appear between %d and %d times\n"));
#line 331 "../usage.c"
  puts(_("Options are specified by single or double hyphens and their name.\n"));
#line 853 "../usage.c"
  puts(_("\t\t\t\t- may appear multiple times\n"));
#line 840 "../usage.c"
  puts(_("\t\t\t\t- may not be preset\n"));
#line 1258 "../usage.c"
  puts(_("   Arg Option-Name    Description\n"));
#line 1194 "../usage.c"
  puts(_("  Flg Arg Option-Name    Description\n"));
#line 1252 "../usage.c"
  puts(_("  Flg Arg Option-Name    Description\n"));
#line 1253 "../usage.c"
  puts(_(" %3s %s"));
#line 1259 "../usage.c"
  puts(_(" %3s %s"));
#line 336 "../usage.c"
  puts(_("The '-#<number>' option may omit the hash char\n"));
#line 332 "../usage.c"
  puts(_("All arguments are named options.\n"));
#line 920 "../usage.c"
  puts(_(" - reading file %s"));
#line 358 "../usage.c"
  puts(_("\n"
       "Please send bug reports to:  <%s>\n"));
#line 100 "../version.c"
  puts(_("\n"
       "Please send bug reports to:  <%s>\n"));
#line 129 "../version.c"
  puts(_("\n"
       "Please send bug reports to:  <%s>\n"));
#line 852 "../usage.c"
  puts(_("\t\t\t\t- may NOT appear - preset only\n"));
#line 893 "../usage.c"
  puts(_("\n"
       "The following option preset mechanisms are supported:\n"));
#line 1141 "../usage.c"
  puts(_("\n"
       "The following option preset mechanisms are supported:\n"));
#line 631 "../usage.c"
  puts(_("prohibits these options:\n"));
#line 626 "../usage.c"
  puts(_("prohibits the option '%s'\n"));
#line 81 "../numeric.c"
  puts(_("%s%ld to %ld"));
#line 79 "../numeric.c"
  puts(_("%sgreater than or equal to %ld"));
#line 75 "../numeric.c"
  puts(_("%s%ld exactly"));
#line 68 "../numeric.c"
  puts(_("%sit must lie in one of the ranges:\n"));
#line 68 "../numeric.c"
  puts(_("%sit must be in the range:\n"));
#line 88 "../numeric.c"
  puts(_(", or\n"));
#line 66 "../numeric.c"
  puts(_("%sis scalable with a suffix: k/K/m/M/g/G/t/T\n"));
#line 77 "../numeric.c"
  puts(_("%sless than or equal to %ld"));
#line 339 "../usage.c"
  puts(_("Operands and options may be intermixed.  They will be reordered.\n"));
#line 601 "../usage.c"
  puts(_("requires the option '%s'\n"));
#line 604 "../usage.c"
  puts(_("requires these options:\n"));
#line 1270 "../usage.c"
  puts(_("   Arg Option-Name   Req?  Description\n"));
#line 1264 "../usage.c"
  puts(_("  Flg Arg Option-Name   Req?  Description\n"));
#line 143 "../enum.c"
  puts(_("or you may use a numeric representation.  Preceding these with a '!'\n"
       "will clear the bits, specifying 'none' will clear all bits, and 'all'\n"
       "will set them all.  Multiple entries may be passed as an option\n"
       "argument list.\n"));
#line 859 "../usage.c"
  puts(_("\t\t\t\t- may appear up to %d times\n"));
#line 52 "../enum.c"
  puts(_("The valid \"%s\" option keywords are:\n"));
#line 1101 "../usage.c"
  puts(_("The next option supports vendor supported extra options:"));
#line 722 "../usage.c"
  puts(_("These additional options are:"));
  /* END-USAGE-TEXT */
}
#endif /* uncompilable code */
#ifdef  __cplusplus
}
#endif
/* tpmtool-args.c ends here */
