AutoGen Definitions options;
prog-name     = ocsptool;
prog-title    = "GnuTLS OCSP tool";
prog-desc     = "Program to handle OCSP request/responses.";
detail    = "ocsptool is a program that can parse and print information about
OCSP requests/responses, generate requests and verify responses. Unlike
other GnuTLS applications it outputs DER encoded structures by default
unless the '--outpem' option is specified.";
short-usage   = "ocsptool [options]\nocsptool --help for usage instructions.\n";
explain       = "";

doc-section = {
  ds-type = 'DESCRIPTION';
  ds-format = 'texi';
  ds-text   = <<-_EOT_
@subheading On verification
Responses are typically signed/issued by designated certificates or
certificate authorities and thus this tool requires on verification
the certificate of the issuer or the full certificate chain in order to
determine the appropriate signing authority. The specified certificate
of the issuer is assumed trusted.
_EOT_;
};

#define  INFILE_OPT   1
#define  OUTFILE_OPT  1
#define  VERBOSE_OPT  1
#include args-std.def

flag = {
    name      = ask;
    arg-type  = string;
    arg-name  = "server name|url";
    arg-optional;
    descrip   = "Ask an OCSP/HTTP server on a certificate validity";
    doc = "Connects to the specified HTTP OCSP server and queries on the validity of the loaded certificate.
Its argument can be a URL or a plain server name. It can be combined with --load-chain, where it checks
all certificates in the provided chain, or with --load-cert and
--load-issuer options. The latter checks the provided certificate
against its specified issuer certificate.";
};

flag = {
    name      = verify-response;
    value     = e;
    descrip   = "Verify response";
    doc = "Verifies the provided OCSP response against the system trust
anchors (unless --load-trust is provided). It requires the --load-signer
or --load-chain options to obtain the signer of the OCSP response.";
};

flag = {
    name      = request-info;
    value     = i;
    descrip   = "Print information on a OCSP request";
    doc = "Display detailed information on the provided OCSP request.";
};

flag = {
    name      = response-info;
    value     = j;
    descrip   = "Print information on a OCSP response";
    doc = "Display detailed information on the provided OCSP response.";
};

flag = {
    name      = generate-request;
    value     = q;
    descrip   = "Generates an OCSP request";
    doc = "";
};

flag = {
    name      = nonce;
    disabled  = yes;
    disable   = "no";
    descrip   = "Use (or not) a nonce to OCSP request";
    doc = "";
};

flag = {
    name      = load-chain;
    arg-type  = file;
    file-exists = yes;
    descrip   = "Reads a set of certificates forming a chain from file";
    doc = "";
};

flag = {
    name      = load-issuer;
    arg-type  = file;
    file-exists = yes;
    descrip   = "Reads issuer's certificate from file";
    doc = "";
};

flag = {
    name      = load-cert;
    arg-type  = file;
    file-exists = yes;
    descrip   = "Reads the certificate to check from file";
    doc = "";
};

flag = {
    name      = load-trust;
    arg-type  = file;
    file-exists = yes;
    descrip   = "Read OCSP trust anchors from file";
    flags-cant = load-signer;
    doc = "When verifying an OCSP response read the trust anchors from the
provided file. When this is not provided, the system's trust anchors will be
used.";
};

flag = {
    name      = load-signer;
    arg-type  = file;
    file-exists = yes;
    descrip   = "Reads the OCSP response signer from file";
    flags-cant = load-trust;
    doc = "";
};

flag = {
    name      = inder;
    disabled;
    disable   = "no";
    descrip   = "Use DER format for input certificates and private keys";
    doc      = "";
};

flag = {
    name      = outder;
    descrip   = "Use DER format for output of responses (this is the default)";
    doc = "The output will be in DER encoded format. Unlike other GnuTLS tools, this is the default for this tool";
};

flag = {
    name      = outpem;
    descrip   = "Use PEM format for output of responses";
    doc       = "The output will be in PEM format.";
};

flag = {
    name      = load-request;
    value     = Q;
    arg-type  = file;
    file-exists = yes;
    descrip   = "Reads the DER encoded OCSP request from file";
    doc      = "";
};

flag = {
    name      = load-response;
    value     = S;
    arg-type  = file;
    file-exists = yes;
    descrip   = "Reads the DER encoded OCSP response from file";
    doc      = "";
};

flag = {
    name      = ignore-errors;
    descrip   = "Ignore any verification errors";
    doc = "";
};

flag = {
    name      = verify-allow-broken;
    descrip   = "Allow broken algorithms, such as MD5 for verification";
    doc = "This can be combined with --verify-response.";
};

doc-section = {
  ds-type = 'SEE ALSO';
  ds-format = 'texi';
  ds-text   = <<-_EOT_
    certtool (1)
_EOT_;
};

doc-section = {
  ds-type = 'EXAMPLES';
  ds-format = 'texi';
  ds-text   = <<-_EOF_
@subheading Print information about an OCSP request

To parse an OCSP request and print information about the content, the
@code{-i} or @code{--request-info} parameter may be used as follows.
The @code{-Q} parameter specify the name of the file containing the
OCSP request, and it should contain the OCSP request in binary DER
format.

@example
$ ocsptool -i -Q ocsp-request.der
@end example

The input file may also be sent to standard input like this:

@example
$ cat ocsp-request.der | ocsptool --request-info
@end example

@subheading Print information about an OCSP response

Similar to parsing OCSP requests, OCSP responses can be parsed using
the @code{-j} or @code{--response-info} as follows.

@example
$ ocsptool -j -Q ocsp-response.der
$ cat ocsp-response.der | ocsptool --response-info
@end example

@subheading Generate an OCSP request

The @code{-q} or @code{--generate-request} parameters are used to
generate an OCSP request.  By default the OCSP request is written to
standard output in binary DER format, but can be stored in a file
using @code{--outfile}.  To generate an OCSP request the issuer of the
certificate to check needs to be specified with @code{--load-issuer}
and the certificate to check with @code{--load-cert}.  By default PEM
format is used for these files, although @code{--inder} can be used to
specify that the input files are in DER format.

@example
$ ocsptool -q --load-issuer issuer.pem --load-cert client.pem \
           --outfile ocsp-request.der
@end example

When generating OCSP requests, the tool will add an OCSP extension
containing a nonce.  This behaviour can be disabled by specifying
@code{--no-nonce}.

@subheading Verify signature in OCSP response

To verify the signature in an OCSP response the @code{-e} or
@code{--verify-response} parameter is used.  The tool will read an
OCSP response in DER format from standard input, or from the file
specified by @code{--load-response}.  The OCSP response is verified
against a set of trust anchors, which are specified using
@code{--load-trust}.  The trust anchors are concatenated certificates
in PEM format.  The certificate that signed the OCSP response needs to
be in the set of trust anchors, or the issuer of the signer
certificate needs to be in the set of trust anchors and the OCSP
Extended Key Usage bit has to be asserted in the signer certificate.

@example
$ ocsptool -e --load-trust issuer.pem \
           --load-response ocsp-response.der
@end example

The tool will print status of verification.

@subheading Verify signature in OCSP response against given certificate

It is possible to override the normal trust logic if you know that a
certain certificate is supposed to have signed the OCSP response, and
you want to use it to check the signature.  This is achieved using
@code{--load-signer} instead of @code{--load-trust}.  This will load
one certificate and it will be used to verify the signature in the
OCSP response.  It will not check the Extended Key Usage bit.

@example
$ ocsptool -e --load-signer ocsp-signer.pem \
           --load-response ocsp-response.der
@end example

This approach is normally only relevant in two situations.  The first
is when the OCSP response does not contain a copy of the signer
certificate, so the @code{--load-trust} code would fail.  The second
is if you want to avoid the indirect mode where the OCSP response
signer certificate is signed by a trust anchor.

@subheading Real-world example

Here is an example of how to generate an OCSP request for a
certificate and to verify the response.  For illustration we'll use
the @code{blog.josefsson.org} host, which (as of writing) uses a
certificate from CACert.  First we'll use @code{gnutls-cli} to get a
copy of the server certificate chain.  The server is not required to
send this information, but this particular one is configured to do so.

@example
$ echo | gnutls-cli -p 443 blog.josefsson.org --save-cert chain.pem
@end example

The saved certificates normally contain a pointer to where the OCSP
responder is located, in the Authority Information Access Information
extension.  For example, from @code{certtool -i < chain.pem} there is
this information:

@example
		Authority Information Access Information (not critical):
			Access Method: 1.3.6.1.5.5.7.48.1 (id-ad-ocsp)
			Access Location URI: https://ocsp.CAcert.org/
@end example

This means that ocsptool can discover the servers to contact over HTTP.
We can now request information on the chain certificates.

@example
$ ocsptool --ask --load-chain chain.pem
@end example

The request is sent via HTTP to the OCSP server address found in
the certificates. It is possible to override the address of the
OCSP server as well as ask information on a particular certificate
using --load-cert and --load-issuer.

@example
$ ocsptool --ask https://ocsp.CAcert.org/ --load-chain chain.pem
@end example

_EOF_;
};

