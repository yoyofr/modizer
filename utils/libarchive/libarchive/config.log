This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by libarchive configure 3.7.3, which was
generated by GNU Autoconf 2.72.  Invocation command line was

  $ ./configure

## --------- ##
## Platform. ##
## --------- ##

hostname = MacBook-Air-M2-de-Yohann.local
uname -m = arm64
uname -r = 23.4.0
uname -s = Darwin
uname -v = Darwin Kernel Version 23.4.0: Wed Feb 21 21:51:37 PST 2024; root:xnu-10063.101.15~2/RELEASE_ARM64_T8112

/usr/bin/uname -p = arm
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = Mach kernel version:
	 Darwin Kernel Version 23.4.0: Wed Feb 21 21:51:37 PST 2024; root:xnu-10063.101.15~2/RELEASE_ARM64_T8112
Kernel configured for up to 8 processors.
8 processors are physically available.
8 processors are logically available.
Processor type: arm64e (ARM64E)
Processors active: 0 1 2 3 4 5 6 7
Primary memory available: 16.00 gigabytes
Default processor set: 496 tasks, 2642 threads, 8 processors
Load average: 2.60, Mach factor: 5.42
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /Users/yoyofr/.pyenv/shims/
PATH: /Users/yoyofr/Documents/Dev/google_cloud/google-cloud-sdk/bin/
PATH: /Users/yoyofr/development/flutter/bin/
PATH: /opt/homebrew/bin/
PATH: /opt/homebrew/sbin/
PATH: /usr/local/bin/
PATH: /System/Cryptexes/App/usr/bin/
PATH: /usr/bin/
PATH: /bin/
PATH: /usr/sbin/
PATH: /sbin/
PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin/
PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin/
PATH: /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin/
PATH: /Library/Apple/usr/bin/
PATH: /usr/local/share/dotnet/


## ----------- ##
## Core tests. ##
## ----------- ##

configure:3124: looking for aux files: config.rpath ltmain.sh compile config.guess config.sub missing install-sh
configure:3137:  trying ./build/autoconf/
configure:3166:   ./build/autoconf/config.rpath found
configure:3166:   ./build/autoconf/ltmain.sh found
configure:3166:   ./build/autoconf/compile found
configure:3166:   ./build/autoconf/config.guess found
configure:3166:   ./build/autoconf/config.sub found
configure:3166:   ./build/autoconf/missing found
configure:3148:   ./build/autoconf/install-sh found
configure:3303: checking for a BSD-compatible install
configure:3377: result: /usr/bin/install -c
configure:3388: checking whether build environment is sane
configure:3443: result: yes
configure:3604: checking for a race-free mkdir -p
configure:3647: result: mkdir -p
configure:3654: checking for gawk
configure:3690: result: no
configure:3654: checking for mawk
configure:3690: result: no
configure:3654: checking for nawk
configure:3690: result: no
configure:3654: checking for awk
configure:3675: found /usr/bin/awk
configure:3687: result: awk
configure:3698: checking whether make sets $(MAKE)
configure:3722: result: yes
configure:3752: checking whether make supports nested variables
configure:3771: result: yes
configure:3908: checking whether to enable maintainer-specific portions of Makefiles
configure:3919: result: yes
configure:3944: checking whether make supports nested variables
configure:3963: result: yes
configure:4049: checking build system type
configure:4065: result: aarch64-apple-darwin23.4.0
configure:4085: checking host system type
configure:4100: result: aarch64-apple-darwin23.4.0
configure:4214: checking for gcc
configure:4235: found /usr/bin/gcc
configure:4247: result: gcc
configure:4606: checking for C compiler version
configure:4615: gcc --version >&5
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
configure:4626: $? = 0
configure:4615: gcc -v >&5
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
configure:4626: $? = 0
configure:4615: gcc -V >&5
clang: error: argument to '-V' is missing (expected 1 value)
clang: error: no input files
configure:4626: $? = 1
configure:4615: gcc -qversion >&5
clang: error: unknown argument '-qversion'; did you mean '--version'?
clang: error: no input files
configure:4626: $? = 1
configure:4615: gcc -version >&5
clang: error: unknown argument '-version'; did you mean '--version'?
clang: error: no input files
configure:4626: $? = 1
configure:4646: checking whether the C compiler works
configure:4668: gcc    conftest.c  >&5
configure:4672: $? = 0
configure:4723: result: yes
configure:4727: checking for C compiler default output file name
configure:4729: result: a.out
configure:4735: checking for suffix of executables
configure:4742: gcc -o conftest    conftest.c  >&5
configure:4746: $? = 0
configure:4770: result: 
configure:4794: checking whether we are cross compiling
configure:4802: gcc -o conftest    conftest.c  >&5
configure:4806: $? = 0
configure:4813: ./conftest
configure:4817: $? = 0
configure:4832: result: no
configure:4838: checking for suffix of object files
configure:4861: gcc -c   conftest.c >&5
configure:4865: $? = 0
configure:4889: result: o
configure:4893: checking whether the compiler supports GNU C
configure:4913: gcc -c   conftest.c >&5
configure:4913: $? = 0
configure:4925: result: yes
configure:4936: checking whether gcc accepts -g
configure:4957: gcc -c -g  conftest.c >&5
configure:4957: $? = 0
configure:5004: result: yes
configure:5024: checking for gcc option to enable C11 features
configure:5039: gcc  -c -g -O2  conftest.c >&5
configure:5039: $? = 0
configure:5058: result: none needed
configure:5182: checking whether gcc understands -c and -o together
configure:5205: gcc -c conftest.c -o conftest2.o
configure:5208: $? = 0
configure:5205: gcc -c conftest.c -o conftest2.o
configure:5208: $? = 0
configure:5221: result: yes
configure:5241: checking whether make supports the include directive
configure:5256: make -f confmf.GNU && cat confinc.out
this is the am__doit target
configure:5259: $? = 0
configure:5278: result: yes (GNU style)
configure:5304: checking dependency style of gcc
configure:5417: result: gcc3
configure:5438: checking how to run the C preprocessor
configure:5464: gcc -E  conftest.c
configure:5464: $? = 0
configure:5480: gcc -E  conftest.c
conftest.c:18:10: fatal error: 'ac_nonexistent.h' file not found
#include <ac_nonexistent.h>
         ^~~~~~~~~~~~~~~~~~
1 error generated.
configure:5480: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5509: result: gcc -E
configure:5523: gcc -E  conftest.c
configure:5523: $? = 0
configure:5539: gcc -E  conftest.c
conftest.c:18:10: fatal error: 'ac_nonexistent.h' file not found
#include <ac_nonexistent.h>
         ^~~~~~~~~~~~~~~~~~
1 error generated.
configure:5539: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:5576: checking for stdio.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for stdlib.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for string.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for inttypes.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for stdint.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for strings.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for sys/stat.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for sys/types.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for unistd.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for wchar.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5576: checking for minix/config.h
configure:5576: gcc -c -g -O2  conftest.c >&5
conftest.c:56:10: fatal error: 'minix/config.h' file not found
#include <minix/config.h>
         ^~~~~~~~~~~~~~~~
1 error generated.
configure:5576: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <minix/config.h>
configure:5576: result: no
configure:5576: checking for sys/time.h
configure:5576: gcc -c -g -O2  conftest.c >&5
configure:5576: $? = 0
configure:5576: result: yes
configure:5607: checking whether it is safe to define __EXTENSIONS__
configure:5626: gcc -c -g -O2  conftest.c >&5
configure:5626: $? = 0
configure:5636: result: yes
configure:5639: checking whether _XOPEN_SOURCE should be defined
configure:5661: gcc -c -g -O2  conftest.c >&5
configure:5661: $? = 0
configure:5690: result: no
configure:6135: checking how to print strings
configure:6162: result: printf
configure:6183: checking for a sed that does not truncate output
configure:6255: result: /usr/bin/sed
configure:6273: checking for grep that handles long lines and -e
configure:6339: result: /usr/bin/grep
configure:6344: checking for egrep
configure:6414: result: /usr/bin/grep -E
configure:6421: checking for fgrep
configure:6491: result: /usr/bin/grep -F
configure:6528: checking for ld used by gcc
configure:6597: result: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld
configure:6604: checking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld
configure:6621: result: no
configure:6633: checking for BSD- or MS-compatible name lister (nm)
configure:6689: result: /usr/bin/nm -B
configure:6831: checking the name lister (/usr/bin/nm -B) interface
configure:6839: gcc -c -g -O2  conftest.c >&5
configure:6842: /usr/bin/nm -B "conftest.o"
configure:6845: output
0000000000000250 S _some_variable
0000000000000000 t ltmp0
0000000000000250 s ltmp1
configure:6853: result: BSD nm
configure:6856: checking whether ln -s works
configure:6860: result: yes
configure:6868: checking the maximum length of command line arguments
configure:7001: result: 786432
configure:7049: checking how to convert aarch64-apple-darwin23.4.0 file names to aarch64-apple-darwin23.4.0 format
configure:7091: result: func_convert_file_noop
configure:7098: checking how to convert aarch64-apple-darwin23.4.0 file names to toolchain format
configure:7120: result: func_convert_file_noop
configure:7127: checking for /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld option to reload object files
configure:7136: result: -r
configure:7216: checking for file
configure:7237: found /usr/bin/file
configure:7249: result: file
configure:7326: checking for objdump
configure:7359: result: objdump
configure:7388: checking how to recognize dependent libraries
configure:7590: result: pass_all
configure:7681: checking for dlltool
configure:7714: result: dlltool
configure:7744: checking how to associate runtime and link libraries
configure:7773: result: printf %s\n
configure:7839: checking for ar
configure:7860: found /usr/bin/ar
configure:7872: result: ar
configure:7925: checking for archiver @FILE support
configure:7943: gcc -c -g -O2  conftest.c >&5
configure:7943: $? = 0
configure:7947: ar cr libconftest.a @conftest.lst >&5
ar: @conftest.lst: No such file or directory
configure:7950: $? = 1
configure:7971: result: no
configure:8035: checking for strip
configure:8056: found /usr/bin/strip
configure:8068: result: strip
configure:8146: checking for ranlib
configure:8167: found /usr/bin/ranlib
configure:8179: result: ranlib
configure:8281: checking command to parse /usr/bin/nm -B output from gcc object
configure:8435: gcc -c -g -O2  conftest.c >&5
configure:8438: $? = 0
configure:8442: /usr/bin/nm -B conftest.o \| /usr/bin/sed -n -e 's/^.*[ ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[ ][ ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p' | /usr/bin/sed '/ __gnu_lto/d' \> conftest.nm
configure:8445: $? = 0
cannot find nm_test_var in conftest.nm
configure:8435: gcc -c -g -O2  conftest.c >&5
configure:8438: $? = 0
configure:8442: /usr/bin/nm -B conftest.o \| /usr/bin/sed -n -e 's/^.*[ ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[ ][ ]*_\([_A-Za-z][_A-Za-z0-9]*\)$/\1 _\2 \2/p' | /usr/bin/sed '/ __gnu_lto/d' \> conftest.nm
configure:8445: $? = 0
configure:8511: gcc -o conftest -g -O2   conftest.c conftstm.o >&5
configure:8514: $? = 0
configure:8553: result: ok
configure:8600: checking for sysroot
configure:8632: result: no
configure:8639: checking for a working dd
configure:8684: result: /bin/dd
configure:8688: checking how to truncate binary pipes
configure:8705: result: /bin/dd bs=4096 count=1
configure:9045: checking for mt
configure:9081: result: no
configure:9101: checking if : is a manifest tool
configure:9108: : '-?'
configure:9117: result: no
configure:9179: checking for dsymutil
configure:9200: found /usr/bin/dsymutil
configure:9212: result: dsymutil
configure:9283: checking for nmedit
configure:9304: found /usr/bin/nmedit
configure:9316: result: nmedit
configure:9387: checking for lipo
configure:9408: found /usr/bin/lipo
configure:9420: result: lipo
configure:9491: checking for otool
configure:9512: found /usr/bin/otool
configure:9524: result: otool
configure:9595: checking for otool64
configure:9631: result: no
configure:9676: checking for -single_module linker flag
gcc -g -O2  -o libconftest.dylib -dynamiclib -Wl,-single_module conftest.c
ld: warning: -single_module is obsolete
configure:9711: result: no
configure:9714: checking for -exported_symbols_list linker flag
configure:9735: gcc -o conftest -g -O2   -Wl,-exported_symbols_list,conftest.sym conftest.c  >&5
configure:9735: $? = 0
configure:9748: result: yes
configure:9751: checking for -force_load linker flag
gcc -g -O2 -c -o conftest.o conftest.c
ar cr libconftest.a conftest.o
ranlib libconftest.a
gcc -g -O2  -o conftest conftest.c -Wl,-force_load,./libconftest.a
configure:9785: result: yes
configure:9852: checking for dlfcn.h
configure:9852: gcc -c -g -O2  conftest.c >&5
configure:9852: $? = 0
configure:9852: result: yes
configure:10115: checking for objdir
configure:10132: result: .libs
configure:10394: checking if gcc supports -fno-rtti -fno-exceptions
configure:10413: gcc -c -g -O2  -fno-rtti -fno-exceptions conftest.c >&5
configure:10417: $? = 0
configure:10431: result: yes
configure:10789: checking for gcc option to produce PIC
configure:10798: result: -fno-common -DPIC
configure:10806: checking if gcc PIC flag -fno-common -DPIC works
configure:10825: gcc -c -g -O2  -fno-common -DPIC -DPIC conftest.c >&5
configure:10829: $? = 0
configure:10843: result: yes
configure:10872: checking if gcc static flag -static works
configure:10902: result: no
configure:10917: checking if gcc supports -c -o file.o
configure:10939: gcc -c -g -O2  -o out/conftest2.o conftest.c >&5
configure:10943: $? = 0
configure:10966: result: yes
configure:10974: checking if gcc supports -c -o file.o
configure:11023: result: yes
configure:11056: checking whether the gcc linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries
configure:12329: result: yes
configure:12571: checking dynamic linker characteristics
configure:13393: result: darwin23.4.0 dyld
configure:13515: checking how to hardcode library paths into programs
configure:13540: result: immediate
configure:14140: checking whether stripping libraries is possible
configure:14157: result: yes
configure:14191: checking if libtool supports shared libraries
configure:14193: result: yes
configure:14196: checking whether to build shared libraries
configure:14221: result: yes
configure:14224: checking whether to build static libraries
configure:14228: result: yes
configure:14314: checking for strip
configure:14347: result: strip
configure:14708: checking for dirent.h that defines DIR
configure:14728: gcc -c -g -O2  conftest.c >&5
configure:14728: $? = 0
configure:14739: result: yes
configure:14753: checking for library containing opendir
configure:14789: gcc -o conftest -g -O2   conftest.c  >&5
configure:14789: $? = 0
configure:14811: result: none required
configure:14890: checking for sys/wait.h that is POSIX.1 compatible
configure:14917: gcc -c -g -O2  conftest.c >&5
configure:14917: $? = 0
configure:14927: result: yes
configure:14935: checking for acl/libacl.h
configure:14935: gcc -c -g -O2  conftest.c >&5
conftest.c:79:10: fatal error: 'acl/libacl.h' file not found
#include <acl/libacl.h>
         ^~~~~~~~~~~~~~
1 error generated.
configure:14935: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <acl/libacl.h>
configure:14935: result: no
configure:14941: checking for attr/xattr.h
configure:14941: gcc -c -g -O2  conftest.c >&5
conftest.c:79:10: fatal error: 'attr/xattr.h' file not found
#include <attr/xattr.h>
         ^~~~~~~~~~~~~~
1 error generated.
configure:14941: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <attr/xattr.h>
configure:14941: result: no
configure:14948: checking for copyfile.h
configure:14948: gcc -c -g -O2  conftest.c >&5
configure:14948: $? = 0
configure:14948: result: yes
configure:14954: checking for ctype.h
configure:14954: gcc -c -g -O2  conftest.c >&5
configure:14954: $? = 0
configure:14954: result: yes
configure:14961: checking for errno.h
configure:14961: gcc -c -g -O2  conftest.c >&5
configure:14961: $? = 0
configure:14961: result: yes
configure:14967: checking for ext2fs/ext2_fs.h
configure:14967: gcc -c -g -O2  conftest.c >&5
conftest.c:82:10: fatal error: 'ext2fs/ext2_fs.h' file not found
#include <ext2fs/ext2_fs.h>
         ^~~~~~~~~~~~~~~~~~
1 error generated.
configure:14967: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <ext2fs/ext2_fs.h>
configure:14967: result: no
configure:14973: checking for fcntl.h
configure:14973: gcc -c -g -O2  conftest.c >&5
configure:14973: $? = 0
configure:14973: result: yes
configure:14979: checking for fnmatch.h
configure:14979: gcc -c -g -O2  conftest.c >&5
configure:14979: $? = 0
configure:14979: result: yes
configure:14985: checking for grp.h
configure:14985: gcc -c -g -O2  conftest.c >&5
configure:14985: $? = 0
configure:14985: result: yes
configure:14993: checking whether EXT2_IOC_GETFLAGS is usable
configure:15011: gcc -c -g -O2  conftest.c >&5
conftest.c:58:10: fatal error: 'ext2fs/ext2_fs.h' file not found
#include <ext2fs/ext2_fs.h>
         ^~~~~~~~~~~~~~~~~~
1 error generated.
configure:15011: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| /* end confdefs.h.  */
| #include <sys/ioctl.h>
| #include <ext2fs/ext2_fs.h>
| int
| main (void)
| {
| int x = EXT2_IOC_GETFLAGS
|   ;
|   return 0;
| }
configure:15021: result: no
configure:15031: checking for inttypes.h
configure:15031: result: yes
configure:15037: checking for io.h
configure:15037: gcc -c -g -O2  conftest.c >&5
conftest.c:86:10: fatal error: 'io.h' file not found
#include <io.h>
         ^~~~~~
1 error generated.
configure:15037: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <io.h>
configure:15037: result: no
configure:15043: checking for langinfo.h
configure:15043: gcc -c -g -O2  conftest.c >&5
configure:15043: $? = 0
configure:15043: result: yes
configure:15049: checking for limits.h
configure:15049: gcc -c -g -O2  conftest.c >&5
configure:15049: $? = 0
configure:15049: result: yes
configure:15056: checking for linux/fiemap.h
configure:15056: gcc -c -g -O2  conftest.c >&5
conftest.c:88:10: fatal error: 'linux/fiemap.h' file not found
#include <linux/fiemap.h>
         ^~~~~~~~~~~~~~~~
1 error generated.
configure:15056: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <linux/fiemap.h>
configure:15056: result: no
configure:15062: checking for linux/fs.h
configure:15062: gcc -c -g -O2  conftest.c >&5
conftest.c:88:10: fatal error: 'linux/fs.h' file not found
#include <linux/fs.h>
         ^~~~~~~~~~~~
1 error generated.
configure:15062: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <linux/fs.h>
configure:15062: result: no
configure:15068: checking for linux/magic.h
configure:15068: gcc -c -g -O2  conftest.c >&5
conftest.c:88:10: fatal error: 'linux/magic.h' file not found
#include <linux/magic.h>
         ^~~~~~~~~~~~~~~
1 error generated.
configure:15068: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <linux/magic.h>
configure:15068: result: no
configure:15074: checking for linux/types.h
configure:15074: gcc -c -g -O2  conftest.c >&5
conftest.c:88:10: fatal error: 'linux/types.h' file not found
#include <linux/types.h>
         ^~~~~~~~~~~~~~~
1 error generated.
configure:15074: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <linux/types.h>
configure:15074: result: no
configure:15082: checking whether FS_IOC_GETFLAGS is usable
configure:15100: gcc -c -g -O2  conftest.c >&5
conftest.c:61:10: fatal error: 'linux/fs.h' file not found
#include <linux/fs.h>
         ^~~~~~~~~~~~
1 error generated.
configure:15100: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| /* end confdefs.h.  */
| #include <sys/ioctl.h>
| #include <linux/fs.h>
| int
| main (void)
| {
| int x = FS_IOC_GETFLAGS
|   ;
|   return 0;
| }
configure:15110: result: no
configure:15120: checking for locale.h
configure:15120: gcc -c -g -O2  conftest.c >&5
configure:15120: $? = 0
configure:15120: result: yes
configure:15126: checking for membership.h
configure:15126: gcc -c -g -O2  conftest.c >&5
configure:15126: $? = 0
configure:15126: result: yes
configure:15132: checking for paths.h
configure:15132: gcc -c -g -O2  conftest.c >&5
configure:15132: $? = 0
configure:15132: result: yes
configure:15138: checking for poll.h
configure:15138: gcc -c -g -O2  conftest.c >&5
configure:15138: $? = 0
configure:15138: result: yes
configure:15144: checking for pthread.h
configure:15144: gcc -c -g -O2  conftest.c >&5
configure:15144: $? = 0
configure:15144: result: yes
configure:15150: checking for pwd.h
configure:15150: gcc -c -g -O2  conftest.c >&5
configure:15150: $? = 0
configure:15150: result: yes
configure:15157: checking for readpassphrase.h
configure:15157: gcc -c -g -O2  conftest.c >&5
configure:15157: $? = 0
configure:15157: result: yes
configure:15163: checking for signal.h
configure:15163: gcc -c -g -O2  conftest.c >&5
configure:15163: $? = 0
configure:15163: result: yes
configure:15169: checking for spawn.h
configure:15169: gcc -c -g -O2  conftest.c >&5
configure:15169: $? = 0
configure:15169: result: yes
configure:15176: checking for stdarg.h
configure:15176: gcc -c -g -O2  conftest.c >&5
configure:15176: $? = 0
configure:15176: result: yes
configure:15182: checking for stdint.h
configure:15182: result: yes
configure:15188: checking for stdlib.h
configure:15188: result: yes
configure:15194: checking for string.h
configure:15194: result: yes
configure:15201: checking for sys/acl.h
configure:15201: gcc -c -g -O2  conftest.c >&5
configure:15201: $? = 0
configure:15201: result: yes
configure:15207: checking for sys/cdefs.h
configure:15207: gcc -c -g -O2  conftest.c >&5
configure:15207: $? = 0
configure:15207: result: yes
configure:15213: checking for sys/ea.h
configure:15213: gcc -c -g -O2  conftest.c >&5
conftest.c:103:10: fatal error: 'sys/ea.h' file not found
#include <sys/ea.h>
         ^~~~~~~~~~
1 error generated.
configure:15213: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/ea.h>
configure:15213: result: no
configure:15219: checking for sys/extattr.h
configure:15219: gcc -c -g -O2  conftest.c >&5
conftest.c:103:10: fatal error: 'sys/extattr.h' file not found
#include <sys/extattr.h>
         ^~~~~~~~~~~~~~~
1 error generated.
configure:15219: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/extattr.h>
configure:15219: result: no
configure:15226: checking for sys/ioctl.h
configure:15226: gcc -c -g -O2  conftest.c >&5
configure:15226: $? = 0
configure:15226: result: yes
configure:15232: checking for sys/mkdev.h
configure:15232: gcc -c -g -O2  conftest.c >&5
conftest.c:104:10: fatal error: 'sys/mkdev.h' file not found
#include <sys/mkdev.h>
         ^~~~~~~~~~~~~
1 error generated.
configure:15232: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/mkdev.h>
configure:15232: result: no
configure:15238: checking for sys/mount.h
configure:15238: gcc -c -g -O2  conftest.c >&5
configure:15238: $? = 0
configure:15238: result: yes
configure:15244: checking for sys/queue.h
configure:15244: gcc -c -g -O2  conftest.c >&5
configure:15244: $? = 0
configure:15244: result: yes
configure:15251: checking for sys/param.h
configure:15251: gcc -c -g -O2  conftest.c >&5
configure:15251: $? = 0
configure:15251: result: yes
configure:15257: checking for sys/poll.h
configure:15257: gcc -c -g -O2  conftest.c >&5
configure:15257: $? = 0
configure:15257: result: yes
configure:15263: checking for sys/richacl.h
configure:15263: gcc -c -g -O2  conftest.c >&5
conftest.c:108:10: fatal error: 'sys/richacl.h' file not found
#include <sys/richacl.h>
         ^~~~~~~~~~~~~~~
1 error generated.
configure:15263: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/richacl.h>
configure:15263: result: no
configure:15270: checking for sys/select.h
configure:15270: gcc -c -g -O2  conftest.c >&5
configure:15270: $? = 0
configure:15270: result: yes
configure:15276: checking for sys/statfs.h
configure:15276: gcc -c -g -O2  conftest.c >&5
conftest.c:109:10: fatal error: 'sys/statfs.h' file not found
#include <sys/statfs.h>
         ^~~~~~~~~~~~~~
1 error generated.
configure:15276: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/statfs.h>
configure:15276: result: no
configure:15282: checking for sys/statvfs.h
configure:15282: gcc -c -g -O2  conftest.c >&5
configure:15282: $? = 0
configure:15282: result: yes
configure:15288: checking for sys/sysmacros.h
configure:15288: gcc -c -g -O2  conftest.c >&5
conftest.c:110:10: fatal error: 'sys/sysmacros.h' file not found
#include <sys/sysmacros.h>
         ^~~~~~~~~~~~~~~~~
1 error generated.
configure:15288: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/sysmacros.h>
configure:15288: result: no
configure:15295: checking for sys/time.h
configure:15295: result: yes
configure:15301: checking for sys/utime.h
configure:15301: gcc -c -g -O2  conftest.c >&5
conftest.c:111:10: fatal error: 'sys/utime.h' file not found
#include <sys/utime.h>
         ^~~~~~~~~~~~~
1 error generated.
configure:15301: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/utime.h>
configure:15301: result: no
configure:15307: checking for sys/utsname.h
configure:15307: gcc -c -g -O2  conftest.c >&5
configure:15307: $? = 0
configure:15307: result: yes
configure:15313: checking for sys/vfs.h
configure:15313: gcc -c -g -O2  conftest.c >&5
conftest.c:112:10: fatal error: 'sys/vfs.h' file not found
#include <sys/vfs.h>
         ^~~~~~~~~~~
1 error generated.
configure:15313: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/vfs.h>
configure:15313: result: no
configure:15319: checking for sys/xattr.h
configure:15319: gcc -c -g -O2  conftest.c >&5
configure:15319: $? = 0
configure:15319: result: yes
configure:15326: checking for time.h
configure:15326: gcc -c -g -O2  conftest.c >&5
configure:15326: $? = 0
configure:15326: result: yes
configure:15332: checking for unistd.h
configure:15332: result: yes
configure:15338: checking for utime.h
configure:15338: gcc -c -g -O2  conftest.c >&5
configure:15338: $? = 0
configure:15338: result: yes
configure:15344: checking for wchar.h
configure:15344: result: yes
configure:15350: checking for wctype.h
configure:15350: gcc -c -g -O2  conftest.c >&5
configure:15350: $? = 0
configure:15350: result: yes
configure:15357: checking for windows.h
configure:15357: gcc -c -g -O2  conftest.c >&5
conftest.c:118:10: fatal error: 'windows.h' file not found
#include <windows.h>
         ^~~~~~~~~~~
1 error generated.
configure:15357: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <windows.h>
configure:15357: result: no
configure:15365: checking for wincrypt.h
configure:15365: gcc -c -g -O2  conftest.c >&5
conftest.c:95:10: fatal error: 'wincrypt.h' file not found
#include <wincrypt.h>
         ^~~~~~~~~~~~
1 error generated.
configure:15365: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #ifdef HAVE_WINDOWS_H
| # include <windows.h>
| #endif
| 
| 
| #include <wincrypt.h>
configure:15365: result: no
configure:15375: checking for winioctl.h
configure:15375: gcc -c -g -O2  conftest.c >&5
conftest.c:95:10: fatal error: 'winioctl.h' file not found
#include <winioctl.h>
         ^~~~~~~~~~~~
1 error generated.
configure:15375: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| /* end confdefs.h.  */
| #ifdef HAVE_WINDOWS_H
| # include <windows.h>
| #endif
| 
| 
| #include <winioctl.h>
configure:15375: result: no
configure:15397: checking for zlib.h
configure:15397: gcc -c -g -O2  conftest.c >&5
configure:15397: $? = 0
configure:15397: result: yes
configure:15404: checking for inflate in -lz
configure:15433: gcc -o conftest -g -O2   conftest.c -lz   >&5
configure:15433: $? = 0
configure:15445: result: yes
configure:15466: checking for bzlib.h
configure:15466: gcc -c -g -O2  conftest.c >&5
configure:15466: $? = 0
configure:15466: result: yes
configure:15504: checking for BZ2_bzDecompressInit in -lbz2
configure:15533: gcc -o conftest -g -O2   conftest.c -lbz2  -lz  >&5
configure:15533: $? = 0
configure:15545: result: yes
configure:15568: checking for blake2.h
configure:15568: gcc -c -g -O2  conftest.c >&5
conftest.c:122:10: fatal error: 'blake2.h' file not found
#include <blake2.h>
         ^~~~~~~~~~
1 error generated.
configure:15568: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <blake2.h>
configure:15568: result: no
configure:15575: checking for blake2sp_init in -lb2
configure:15604: gcc -o conftest -g -O2   conftest.c -lb2  -lbz2 -lz  >&5
ld: library 'b2' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:15604: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.
|    The 'extern "C"' is for builds by C++ compilers;
|    although this is not generally supported in C code supporting it here
|    has little cost and some practical benefit (sr 110532).  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char blake2sp_init (void);
| int
| main (void)
| {
| return blake2sp_init ();
|   ;
|   return 0;
| }
configure:15616: result: no
configure:15687: checking for ld used by GCC
configure:15753: result: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld
configure:15760: checking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld
configure:15775: result: no
configure:15783: checking for shared library run path origin
configure:15798: result: done
configure:15819: checking for egrep -e
configure:15949: result: /usr/bin/grep -E
configure:16517: checking for iconv
configure:16542: gcc -o conftest -g -O2   conftest.c -lbz2 -lz  >&5
Undefined symbols for architecture arm64:
  "_iconv", referenced from:
      _main in conftest-3321ad.o
  "_iconv_close", referenced from:
      _main in conftest-3321ad.o
  "_iconv_open", referenced from:
      _main in conftest-3321ad.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:16542: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| /* end confdefs.h.  */
| 
| #include <stdlib.h>
| #include <iconv.h>
| 
| int
| main (void)
| {
| iconv_t cd = iconv_open("","");
|            iconv(cd,NULL,NULL,NULL,NULL);
|            iconv_close(cd);
|   ;
|   return 0;
| }
configure:16567: gcc -o conftest -g -O2   conftest.c -lbz2 -lz  -liconv >&5
configure:16567: $? = 0
configure:16579: result: yes
configure:16582: checking for working iconv
configure:16713: gcc -o conftest -g -O2   conftest.c -lbz2 -lz  -liconv >&5
configure:16713: $? = 0
configure:16713: ./conftest
configure:16713: $? = 0
configure:16728: result: yes
configure:16743: checking how to link with libiconv
configure:16745: result: -liconv
configure:16756: checking for iconv declaration
configure:16786: gcc -c -g -O2  conftest.c >&5
configure:16786: $? = 0
configure:16799: result:
         extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);
configure:16809: checking for iconv.h
configure:16809: gcc -c -g -O2  conftest.c >&5
configure:16809: $? = 0
configure:16809: result: yes
configure:16818: checking for localcharset.h
configure:16818: gcc -c -g -O2  conftest.c >&5
configure:16818: $? = 0
configure:16818: result: yes
configure:16830: checking for locale_charset
configure:16830: gcc -o conftest -g -O2   conftest.c -lbz2 -lz  -liconv >&5
configure:16830: $? = 0
configure:16830: result: yes
configure:16904: checking for lz4.h
configure:16904: gcc -c -g -O2  conftest.c >&5
conftest.c:127:10: fatal error: 'lz4.h' file not found
#include <lz4.h>
         ^~~~~~~
1 error generated.
configure:16904: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <lz4.h>
configure:16904: result: no
configure:16910: checking for lz4hc.h
configure:16910: gcc -c -g -O2  conftest.c >&5
conftest.c:127:10: fatal error: 'lz4hc.h' file not found
#include <lz4hc.h>
         ^~~~~~~~~
1 error generated.
configure:16910: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <lz4hc.h>
configure:16910: result: no
configure:16917: checking for LZ4_decompress_safe in -llz4
configure:16946: gcc -o conftest -g -O2   conftest.c -llz4  -lbz2 -lz  >&5
ld: library 'lz4' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:16946: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.
|    The 'extern "C"' is for builds by C++ compilers;
|    although this is not generally supported in C code supporting it here
|    has little cost and some practical benefit (sr 110532).  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char LZ4_decompress_safe (void);
| int
| main (void)
| {
| return LZ4_decompress_safe ();
|   ;
|   return 0;
| }
configure:16958: result: no
configure:16979: checking for zstd.h
configure:16979: gcc -c -g -O2  conftest.c >&5
conftest.c:127:10: fatal error: 'zstd.h' file not found
#include <zstd.h>
         ^~~~~~~~
1 error generated.
configure:16979: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <zstd.h>
configure:16979: result: no
configure:16986: checking for ZSTD_decompressStream in -lzstd
configure:17015: gcc -o conftest -g -O2   conftest.c -lzstd  -lbz2 -lz  >&5
ld: library 'zstd' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:17015: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.
|    The 'extern "C"' is for builds by C++ compilers;
|    although this is not generally supported in C code supporting it here
|    has little cost and some practical benefit (sr 110532).  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char ZSTD_decompressStream (void);
| int
| main (void)
| {
| return ZSTD_decompressStream ();
|   ;
|   return 0;
| }
configure:17027: result: no
configure:17037: checking for ZSTD_compressStream in -lzstd
configure:17066: gcc -o conftest -g -O2   conftest.c -lzstd  -lbz2 -lz  >&5
ld: library 'zstd' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:17066: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.
|    The 'extern "C"' is for builds by C++ compilers;
|    although this is not generally supported in C code supporting it here
|    has little cost and some practical benefit (sr 110532).  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char ZSTD_compressStream (void);
| int
| main (void)
| {
| return ZSTD_compressStream ();
|   ;
|   return 0;
| }
configure:17078: result: no
configure:17098: checking for lzma.h
configure:17098: gcc -c -g -O2  conftest.c >&5
conftest.c:127:10: fatal error: 'lzma.h' file not found
#include <lzma.h>
         ^~~~~~~~
1 error generated.
configure:17098: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <lzma.h>
configure:17098: result: no
configure:17105: checking for lzma_stream_decoder in -llzma
configure:17134: gcc -o conftest -g -O2   conftest.c -llzma  -lbz2 -lz  >&5
configure:17134: $? = 0
configure:17146: result: yes
configure:17160: checking whether we have multithread support in lzma
configure:17181: gcc -o conftest -g -O2   conftest.c -llzma -lbz2 -lz  >&5
conftest.c:101:16: fatal error: 'lzma.h' file not found
      #include <lzma.h>
               ^~~~~~~~
1 error generated.
configure:17181: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| /* end confdefs.h.  */
| 
|       #include <lzma.h>
|                        #if LZMA_VERSION < 50020000
|                        #error unsupported
|                        #endif
| int
| main (void)
| {
| int ignored __attribute__((unused)); ignored = lzma_stream_encoder_mt(0, 0);
|   ;
|   return 0;
| }
configure:17192: result: no
configure:17200: checking whether we have ARM64 filter support in lzma
configure:17221: gcc -o conftest -g -O2   conftest.c -llzma -lbz2 -lz  >&5
conftest.c:101:16: fatal error: 'lzma.h' file not found
      #include <lzma.h>
               ^~~~~~~~
1 error generated.
configure:17221: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| /* end confdefs.h.  */
| 
|       #include <lzma.h>
|                        #ifndef LZMA_FILTER_ARM64
|                        #error unsupported
|                        #endif
| int
| main (void)
| {
| 
|   ;
|   return 0;
| }
configure:17232: result: no
configure:17425: checking for pkg-config
configure:17448: found /opt/homebrew/bin/pkg-config
configure:17461: result: /opt/homebrew/bin/pkg-config
configure:17486: checking pkg-config is at least version 0.9.0
configure:17489: result: yes
configure:17499: checking for libxml-2.0
configure:17506: $PKG_CONFIG --exists --print-errors "libxml-2.0"
configure:17509: $? = 0
configure:17523: $PKG_CONFIG --exists --print-errors "libxml-2.0"
configure:17526: $? = 0
configure:17668: result: yes
configure:17673: checking for xmlInitParser in -lxml2
configure:17702: gcc -o conftest -g -O2    conftest.c -lxml2  -llzma -lbz2 -lz  -lxml2 >&5
ld: warning: ignoring duplicate libraries: '-lxml2'
configure:17702: $? = 0
configure:17714: result: yes
configure:17729: checking for libxml/xmlreader.h
configure:17729: gcc -c -g -O2   conftest.c >&5
configure:17729: $? = 0
configure:17729: result: yes
configure:17735: checking for libxml/xmlwriter.h
configure:17735: gcc -c -g -O2   conftest.c >&5
configure:17735: $? = 0
configure:17735: result: yes
configure:17818: checking for regex.h
configure:17818: gcc -c -g -O2   conftest.c >&5
configure:17818: $? = 0
configure:17818: result: yes
configure:17826: checking for regcomp
configure:17826: gcc -o conftest -g -O2    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:17826: $? = 0
configure:17826: result: yes
configure:18333: checking whether C compiler accepts -Wall
configure:18353: gcc -c -g -O2  -Wall   conftest.c >&5
configure:18353: $? = 0
configure:18365: result: yes
configure:18383: : CFLAGS="$CFLAGS"
configure:18386: $? = 0
configure:18333: checking whether C compiler accepts -Wformat
configure:18353: gcc -c -g -O2 -Wall  -Wformat   conftest.c >&5
configure:18353: $? = 0
configure:18365: result: yes
configure:18383: : CFLAGS="$CFLAGS"
configure:18386: $? = 0
configure:18333: checking whether C compiler accepts -Wformat-security
configure:18353: gcc -c -g -O2 -Wall -Wformat  -Wformat-security   conftest.c >&5
configure:18353: $? = 0
configure:18365: result: yes
configure:18383: : CFLAGS="$CFLAGS"
configure:18386: $? = 0
configure:18415: checking whether ld supports --gc-sections
configure:18421: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    -Wl,--gc-sections conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:103:13: warning: unused function 'UnusedFunc' [-Wunused-function]
static char UnusedFunc() { return 5; } int main() { return 0;}
            ^
1 warning generated.
ld: unknown options: --gc-sections 
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:18421: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| static char UnusedFunc() { return 5; } int main() { return 0;}
configure:18510: result: no
configure:18523: checking whether ld supports -dead_strip
configure:18529: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    -Wl,-dead_strip conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:103:13: warning: unused function 'UnusedFunc' [-Wunused-function]
static char UnusedFunc() { return 5; } int main() { return 0;}
            ^
1 warning generated.
configure:18529: $? = 0
configure:18531: result: yes
configure:18548: checking for an ANSI C-conforming const
configure:18615: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:138:16: warning: variable 'foo' set but not used [-Wunused-but-set-variable]
    const int *foo = &x[0];
               ^
conftest.c:143:10: warning: variable 'p' set but not used [-Wunused-but-set-variable]
    iptr p = 0;
         ^
2 warnings generated.
configure:18615: $? = 0
configure:18625: result: yes
configure:18635: checking for uid_t in sys/types.h
configure:18658: result: yes
configure:18673: checking for mode_t
configure:18673: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18673: $? = 0
configure:18673: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:134:21: error: expected expression
if (sizeof ((mode_t)))
                    ^
1 error generated.
configure:18673: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((mode_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:18673: result: yes
configure:18686: checking for off_t
configure:18686: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18686: $? = 0
configure:18686: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:134:20: error: expected expression
if (sizeof ((off_t)))
                   ^
1 error generated.
configure:18686: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((off_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:18686: result: yes
configure:18697: checking for size_t
configure:18697: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18697: $? = 0
configure:18697: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:134:21: error: expected expression
if (sizeof ((size_t)))
                    ^
1 error generated.
configure:18697: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((size_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:18697: result: yes
configure:18708: checking for id_t
configure:18708: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18708: $? = 0
configure:18708: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:134:19: error: expected expression
if (sizeof ((id_t)))
                  ^
1 error generated.
configure:18708: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((id_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:18708: result: yes
configure:18719: checking for uintptr_t
configure:18719: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18719: $? = 0
configure:18719: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:134:24: error: expected expression
if (sizeof ((uintptr_t)))
                       ^
1 error generated.
configure:18719: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((uintptr_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:18719: result: yes
configure:18732: checking for struct tm.tm_gmtoff
configure:18732: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18732: $? = 0
configure:18732: result: yes
configure:18743: checking for struct tm.__tm_gmtoff
configure:18743: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:112:13: error: no member named '__tm_gmtoff' in 'struct tm'; did you mean 'tm_gmtoff'?
if (ac_aggr.__tm_gmtoff)
            ^~~~~~~~~~~
            tm_gmtoff
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/time.h:85:7: note: 'tm_gmtoff' declared here
        long    tm_gmtoff;      /* offset from UTC in seconds */
                ^
1 error generated.
configure:18743: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main (void)
| {
| static struct tm ac_aggr;
| if (ac_aggr.__tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:18743: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:112:20: error: no member named '__tm_gmtoff' in 'struct tm'; did you mean 'tm_gmtoff'?
if (sizeof ac_aggr.__tm_gmtoff)
                   ^~~~~~~~~~~
                   tm_gmtoff
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/time.h:85:7: note: 'tm_gmtoff' declared here
        long    tm_gmtoff;      /* offset from UTC in seconds */
                ^
1 error generated.
configure:18743: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <time.h>
| 
| 
| int
| main (void)
| {
| static struct tm ac_aggr;
| if (sizeof ac_aggr.__tm_gmtoff)
| return 0;
|   ;
|   return 0;
| }
configure:18743: result: no
configure:18757: checking for struct statfs.f_namemax
configure:18757: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:113:13: error: no member named 'f_namemax' in 'struct statfs'
if (ac_aggr.f_namemax)
    ~~~~~~~ ^
1 error generated.
configure:18757: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main (void)
| {
| static struct statfs ac_aggr;
| if (ac_aggr.f_namemax)
| return 0;
|   ;
|   return 0;
| }
configure:18757: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:113:20: error: no member named 'f_namemax' in 'struct statfs'
if (sizeof ac_aggr.f_namemax)
           ~~~~~~~ ^
1 error generated.
configure:18757: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| /* end confdefs.h.  */
| 
| #include <sys/param.h>
| #include <sys/mount.h>
| 
| 
| int
| main (void)
| {
| static struct statfs ac_aggr;
| if (sizeof ac_aggr.f_namemax)
| return 0;
|   ;
|   return 0;
| }
configure:18757: result: no
configure:18772: checking for struct statfs.f_iosize
configure:18772: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18772: $? = 0
configure:18772: result: yes
configure:18787: checking for struct statvfs.f_iosize
configure:18787: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:113:13: error: no member named 'f_iosize' in 'struct statvfs'
if (ac_aggr.f_iosize)
    ~~~~~~~ ^
1 error generated.
configure:18787: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| /* end confdefs.h.  */
| 
| #include <sys/statvfs.h>
| 
| 
| int
| main (void)
| {
| static struct statvfs ac_aggr;
| if (ac_aggr.f_iosize)
| return 0;
|   ;
|   return 0;
| }
configure:18787: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:113:20: error: no member named 'f_iosize' in 'struct statvfs'
if (sizeof ac_aggr.f_iosize)
           ~~~~~~~ ^
1 error generated.
configure:18787: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| /* end confdefs.h.  */
| 
| #include <sys/statvfs.h>
| 
| 
| int
| main (void)
| {
| static struct statvfs ac_aggr;
| if (sizeof ac_aggr.f_iosize)
| return 0;
|   ;
|   return 0;
| }
configure:18787: result: no
configure:18801: checking for struct stat.st_birthtime
configure:18801: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18801: $? = 0
configure:18801: result: yes
configure:18812: checking for struct stat.st_birthtimespec.tv_nsec
configure:18812: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18812: $? = 0
configure:18812: result: yes
configure:18821: checking for struct stat.st_mtimespec.tv_nsec
configure:18821: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18821: $? = 0
configure:18821: result: yes
configure:18830: checking for struct stat.st_mtim.tv_nsec
configure:18830: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:140:13: error: no member named 'st_mtim' in 'struct stat'
if (ac_aggr.st_mtim.tv_nsec)
    ~~~~~~~ ^
1 error generated.
configure:18830: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtim.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:18830: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:140:20: error: no member named 'st_mtim' in 'struct stat'
if (sizeof ac_aggr.st_mtim.tv_nsec)
           ~~~~~~~ ^
1 error generated.
configure:18830: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtim.tv_nsec)
| return 0;
|   ;
|   return 0;
| }
configure:18830: result: no
configure:18839: checking for struct stat.st_mtime_n
configure:18839: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:140:13: error: no member named 'st_mtime_n' in 'struct stat'
if (ac_aggr.st_mtime_n)
    ~~~~~~~ ^
1 error generated.
configure:18839: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtime_n)
| return 0;
|   ;
|   return 0;
| }
configure:18839: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:140:20: error: no member named 'st_mtime_n' in 'struct stat'
if (sizeof ac_aggr.st_mtime_n)
           ~~~~~~~ ^
1 error generated.
configure:18839: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtime_n)
| return 0;
|   ;
|   return 0;
| }
configure:18839: result: no
configure:18848: checking for struct stat.st_umtime
configure:18848: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:140:13: error: no member named 'st_umtime' in 'struct stat'
if (ac_aggr.st_umtime)
    ~~~~~~~ ^
1 error generated.
configure:18848: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_umtime)
| return 0;
|   ;
|   return 0;
| }
configure:18848: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:140:20: error: no member named 'st_umtime' in 'struct stat'
if (sizeof ac_aggr.st_umtime)
           ~~~~~~~ ^
1 error generated.
configure:18848: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_umtime)
| return 0;
|   ;
|   return 0;
| }
configure:18848: result: no
configure:18857: checking for struct stat.st_mtime_usec
configure:18857: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:140:13: error: no member named 'st_mtime_usec' in 'struct stat'; did you mean 'st_mtimespec'?
if (ac_aggr.st_mtime_usec)
            ^~~~~~~~~~~~~
            st_mtimespec
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/stat.h:182:13: note: 'st_mtimespec' declared here
struct stat __DARWIN_STRUCT_STAT64;
            ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/stat.h:166:2: note: expanded from macro '__DARWIN_STRUCT_STAT64'
        __DARWIN_STRUCT_STAT64_TIMES \
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/stat.h:130:18: note: expanded from macro '__DARWIN_STRUCT_STAT64_TIMES'
        struct timespec st_mtimespec;           /* time of last data modification */ \
                        ^
1 error generated.
configure:18857: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| static struct stat ac_aggr;
| if (ac_aggr.st_mtime_usec)
| return 0;
|   ;
|   return 0;
| }
configure:18857: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:140:20: error: no member named 'st_mtime_usec' in 'struct stat'; did you mean 'st_mtimespec'?
if (sizeof ac_aggr.st_mtime_usec)
                   ^~~~~~~~~~~~~
                   st_mtimespec
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/stat.h:182:13: note: 'st_mtimespec' declared here
struct stat __DARWIN_STRUCT_STAT64;
            ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/stat.h:166:2: note: expanded from macro '__DARWIN_STRUCT_STAT64'
        __DARWIN_STRUCT_STAT64_TIMES \
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/stat.h:130:18: note: expanded from macro '__DARWIN_STRUCT_STAT64_TIMES'
        struct timespec st_mtimespec;           /* time of last data modification */ \
                        ^
1 error generated.
configure:18857: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| static struct stat ac_aggr;
| if (sizeof ac_aggr.st_mtime_usec)
| return 0;
|   ;
|   return 0;
| }
configure:18857: result: no
configure:18867: checking for struct stat.st_blksize
configure:18867: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18867: $? = 0
configure:18867: result: yes
configure:18877: checking for struct stat.st_flags
configure:18877: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18877: $? = 0
configure:18877: result: yes
configure:18890: checking for uintmax_t
configure:18890: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18890: $? = 0
configure:18890: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:141:24: error: expected expression
if (sizeof ((uintmax_t)))
                       ^
1 error generated.
configure:18890: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((uintmax_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:18890: result: yes
configure:18898: checking for unsigned long long
configure:18898: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:18898: $? = 0
configure:18898: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:142:33: error: expected expression
if (sizeof ((unsigned long long)))
                                ^
1 error generated.
configure:18898: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((unsigned long long)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:18898: result: yes
configure:18911: checking for unsigned long long int
configure:18953: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:18953: $? = 0
configure:18965: result: yes
configure:18975: checking for long long int
configure:19017: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:19017: $? = 0
configure:19017: ./conftest
configure:19017: $? = 0
configure:19033: result: yes
configure:19043: checking for intmax_t
configure:19043: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19043: $? = 0
configure:19043: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:145:23: error: expected expression
if (sizeof ((intmax_t)))
                      ^
1 error generated.
configure:19043: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((intmax_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:19043: result: yes
configure:19062: checking for uintmax_t
configure:19062: result: yes
configure:19079: checking for int64_t
configure:19079: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19079: $? = 0
configure:19079: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:149:53: warning: overflow in expression; result is -9223372036854775808 with type 'int64_t' (aka 'long long') [-Winteger-overflow]
                 < (int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 2))];
                                                                  ^
conftest.c:148:24: error: 'test_array' declared as an array with a negative size
static int test_array [1 - 2 * !((int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 1)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning and 1 error generated.
configure:19079: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 64 / 2 - 1 };
| int
| main (void)
| {
| static int test_array [1 - 2 * !((int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int64_t) (((((int64_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:19079: result: yes
configure:19088: checking for uint64_t
configure:19088: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19088: $? = 0
configure:19088: result: yes
configure:19100: checking for int32_t
configure:19100: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19100: $? = 0
configure:19100: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:149:53: warning: overflow in expression; result is -2147483648 with type 'int' [-Winteger-overflow]
                 < (int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 2))];
                                                                  ^
conftest.c:148:24: error: 'test_array' declared as an array with a negative size
static int test_array [1 - 2 * !((int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 1)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning and 1 error generated.
configure:19100: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 32 / 2 - 1 };
| int
| main (void)
| {
| static int test_array [1 - 2 * !((int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int32_t) (((((int32_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:19100: result: yes
configure:19109: checking for uint32_t
configure:19109: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19109: $? = 0
configure:19109: result: yes
configure:19121: checking for int16_t
configure:19121: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19121: $? = 0
configure:19121: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:148:24: error: 'test_array' declared as an array with a negative size
static int test_array [1 - 2 * !((int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 1)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.
configure:19121: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 	        enum { N = 16 / 2 - 1 };
| int
| main (void)
| {
| static int test_array [1 - 2 * !((int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 1)
| 		 < (int16_t) (((((int16_t) 1 << N) << N) - 1) * 2 + 2))];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:19121: result: yes
configure:19130: checking for uint16_t
configure:19130: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19130: $? = 0
configure:19130: result: yes
configure:19140: checking for uint8_t
configure:19140: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19140: $? = 0
configure:19140: result: yes
configure:19153: checking for gcc options needed to detect all undeclared functions
configure:19175: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
conftest.c:120:8: error: call to undeclared library function 'strchr' with type 'char *(const char *, int)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]
(void) strchr;
       ^
conftest.c:120:8: note: include the header <string.h> or explicitly provide a declaration for 'strchr'
1 error generated.
configure:19175: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| /* end confdefs.h.  */
| 
| int
| main (void)
| {
| (void) strchr;
|   ;
|   return 0;
| }
configure:19202: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19202: $? = 0
configure:19222: result: none needed
configure:19236: checking whether SIZE_MAX is declared
configure:19236: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19236: $? = 0
configure:19236: result: yes
configure:19245: checking whether INT32_MAX is declared
configure:19245: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19245: $? = 0
configure:19245: result: yes
configure:19254: checking whether INT32_MIN is declared
configure:19254: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19254: $? = 0
configure:19254: result: yes
configure:19264: checking whether INT64_MAX is declared
configure:19264: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19264: $? = 0
configure:19264: result: yes
configure:19273: checking whether INT64_MIN is declared
configure:19273: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19273: $? = 0
configure:19273: result: yes
configure:19282: checking whether UINT64_MAX is declared
configure:19282: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19282: $? = 0
configure:19282: result: yes
configure:19291: checking whether UINT32_MAX is declared
configure:19291: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19291: $? = 0
configure:19291: result: yes
configure:19301: checking whether INTMAX_MAX is declared
configure:19301: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19301: $? = 0
configure:19301: result: yes
configure:19310: checking whether INTMAX_MIN is declared
configure:19310: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19310: $? = 0
configure:19310: result: yes
configure:19319: checking whether UINTMAX_MAX is declared
configure:19319: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19319: $? = 0
configure:19319: result: yes
configure:19330: checking whether SSIZE_MAX is declared
configure:19330: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19330: $? = 0
configure:19330: result: yes
configure:19339: checking whether EFTYPE is declared
configure:19339: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19339: $? = 0
configure:19339: result: yes
configure:19347: checking whether EILSEQ is declared
configure:19347: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19347: $? = 0
configure:19347: result: yes
configure:19355: checking for wchar_t
configure:19355: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19355: $? = 0
configure:19355: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:160:22: error: expected expression
if (sizeof ((wchar_t)))
                     ^
1 error generated.
configure:19355: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| if (sizeof ((wchar_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:19355: result: yes
configure:19364: checking size of wchar_t
configure:19370: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:19370: $? = 0
configure:19370: ./conftest
configure:19370: $? = 0
configure:19387: result: 4
configure:19398: checking size of int
configure:19419: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19419: $? = 0
configure:19433: result: 4
configure:19439: checking size of long
configure:19460: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:139:25: error: duplicate case value '0'
switch (0) case 0: case (sizeof (long) == 4):;
                        ^
conftest.c:139:17: note: previous case defined here
switch (0) case 0: case (sizeof (long) == 4):;
                ^
1 error generated.
configure:19460: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| /* end confdefs.h.  */
| 
| #include <sys/types.h>
| 
| 
| int
| main (void)
| {
| switch (0) case 0: case (sizeof (long) == 4):;
|   ;
|   return 0;
| }
configure:19460: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19460: $? = 0
configure:19474: result: 8
configure:19487: checking for sys/mkdev.h
configure:19487: result: no
configure:19496: checking for sys/sysmacros.h
configure:19496: result: no
configure:19506: checking for declarations of fseeko and ftello
configure:19539: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:19539: $? = 0
configure:19585: result: yes
configure:19600: checking for working memcmp
configure:19645: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:19645: $? = 0
configure:19645: ./conftest
configure:19645: $? = 0
configure:19659: result: yes
configure:19668: checking whether lstat correctly handles trailing slash
configure:19701: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:19701: $? = 0
configure:19701: ./conftest
configure:19701: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main (void)
| {
| struct stat sbuf;
|      /* Linux will dereference the symlink and fail, as required by POSIX.
| 	That is better in the sense that it means we will not
| 	have to compile and use the lstat wrapper.  */
|      return lstat ("conftest.sym/", &sbuf) == 0;
|   ;
|   return 0;
| }
configure:19722: result: no
configure:19739: checking whether lstat accepts an empty string
configure:19761: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:19761: $? = 0
configure:19761: ./conftest
configure:19761: $? = 0
configure:19775: result: no
configure:19789: checking whether stat accepts an empty string
configure:19811: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:19811: $? = 0
configure:19811: ./conftest
configure:19811: $? = 0
configure:19825: result: no
configure:19839: checking whether strerror_r is declared
configure:19839: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:19839: $? = 0
configure:19839: result: yes
configure:19859: checking whether strerror_r returns char *
configure:19884: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:142:13: error: indirection requires pointer operand ('int' invalid)
          char x = *strerror_r (0, buf, sizeof buf);
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.c:143:10: error: incompatible integer to pointer conversion initializing 'char *' with an expression of type 'int' [-Wint-conversion]
          char *p = strerror_r (0, buf, sizeof buf);
                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2 errors generated.
configure:19884: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| /* end confdefs.h.  */
| #include <string.h>
| int
| main (void)
| {
| 
| 	  char buf[100];
| 	  char x = *strerror_r (0, buf, sizeof buf);
| 	  char *p = strerror_r (0, buf, sizeof buf);
| 	  return !p || x;
| 
|   ;
|   return 0;
| }
configure:19894: result: no
configure:19905: checking for strftime
configure:19905: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:19905: $? = 0
configure:19905: result: yes
configure:19970: checking for vprintf
configure:19970: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:153:6: warning: incompatible redeclaration of library function 'vprintf' [-Wincompatible-library-redeclaration]
char vprintf (void);
     ^
conftest.c:153:6: note: 'vprintf' is a builtin with type 'int (const char *, __builtin_va_list)'
1 warning generated.
configure:19970: $? = 0
configure:19970: result: yes
configure:19995: checking for CreateHardLinkA
configure:20031: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:147:6: warning: '__stdcall' calling convention is not supported for this target [-Wignored-attributes]
char __stdcall CreateHardLinkA ( const char *, const char *, void * );
     ^
1 warning generated.
Undefined symbols for architecture arm64:
  "_CreateHardLinkA", referenced from:
      _main in conftest-4b9a7a.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:20031: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| /* end confdefs.h.  */
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char __stdcall CreateHardLinkA ( const char *, const char *, void * ) below.  */
| #include <assert.h>
| /* Override any gcc2 internal prototype to avoid an error.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| /* We use char because int might match the return type of a gcc2
|    builtin and then its argument prototype would still apply.  */
| char __stdcall CreateHardLinkA ( const char *, const char *, void * );
| char (*f) ( const char *, const char *, void * );
| 
| int
| main (void)
| {
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined (__stub_CreateHardLinkA) || defined (__stub___CreateHardLinkA)
| choke me
| #else
| f = CreateHardLinkA;
| #endif
| 
|   ;
|   return 0;
| }
configure:20042: result: no
configure:20048: checking for arc4random_buf
configure:20048: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20048: $? = 0
configure:20048: result: yes
configure:20054: checking for chflags
configure:20054: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20054: $? = 0
configure:20054: result: yes
configure:20060: checking for chown
configure:20060: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20060: $? = 0
configure:20060: result: yes
configure:20066: checking for chroot
configure:20066: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20066: $? = 0
configure:20066: result: yes
configure:20072: checking for ctime_r
configure:20072: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20072: $? = 0
configure:20072: result: yes
configure:20079: checking for fchdir
configure:20079: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20079: $? = 0
configure:20079: result: yes
configure:20085: checking for fchflags
configure:20085: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20085: $? = 0
configure:20085: result: yes
configure:20091: checking for fchmod
configure:20091: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20091: $? = 0
configure:20091: result: yes
configure:20097: checking for fchown
configure:20097: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20097: $? = 0
configure:20097: result: yes
configure:20103: checking for fcntl
configure:20103: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20103: $? = 0
configure:20103: result: yes
configure:20109: checking for fdopendir
configure:20109: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20109: $? = 0
configure:20109: result: yes
configure:20115: checking for fnmatch
configure:20115: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20115: $? = 0
configure:20115: result: yes
configure:20121: checking for fork
configure:20121: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20121: $? = 0
configure:20121: result: yes
configure:20128: checking for fstat
configure:20128: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20128: $? = 0
configure:20128: result: yes
configure:20134: checking for fstatat
configure:20134: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20134: $? = 0
configure:20134: result: yes
configure:20140: checking for fstatfs
configure:20140: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20140: $? = 0
configure:20140: result: yes
configure:20146: checking for fstatvfs
configure:20146: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20146: $? = 0
configure:20146: result: yes
configure:20152: checking for ftruncate
configure:20152: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20152: $? = 0
configure:20152: result: yes
configure:20159: checking for futimens
configure:20159: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20159: $? = 0
configure:20159: result: yes
configure:20165: checking for futimes
configure:20165: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20165: $? = 0
configure:20165: result: yes
configure:20171: checking for futimesat
configure:20171: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_futimesat", referenced from:
      _main in conftest-061f1a.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:20171: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| /* end confdefs.h.  */
| /* Define futimesat to an innocuous variant, in case <limits.h> declares futimesat.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define futimesat innocuous_futimesat
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char futimesat (void); below.  */
| 
| #include <limits.h>
| #undef futimesat
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char futimesat (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_futimesat || defined __stub___futimesat
| choke me
| #endif
| 
| int
| main (void)
| {
| return futimesat ();
|   ;
|   return 0;
| }
configure:20171: result: no
configure:20178: checking for geteuid
configure:20178: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20178: $? = 0
configure:20178: result: yes
configure:20184: checking for getline
configure:20184: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20184: $? = 0
configure:20184: result: yes
configure:20190: checking for getpid
configure:20190: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20190: $? = 0
configure:20190: result: yes
configure:20196: checking for getgrgid_r
configure:20196: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20196: $? = 0
configure:20196: result: yes
configure:20202: checking for getgrnam_r
configure:20202: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20202: $? = 0
configure:20202: result: yes
configure:20209: checking for getpwnam_r
configure:20209: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20209: $? = 0
configure:20209: result: yes
configure:20215: checking for getpwuid_r
configure:20215: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20215: $? = 0
configure:20215: result: yes
configure:20221: checking for getvfsbyname
configure:20221: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20221: $? = 0
configure:20221: result: yes
configure:20227: checking for gmtime_r
configure:20227: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20227: $? = 0
configure:20227: result: yes
configure:20234: checking for lchflags
configure:20234: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20234: $? = 0
configure:20234: result: yes
configure:20240: checking for lchmod
configure:20240: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20240: $? = 0
configure:20240: result: yes
configure:20246: checking for lchown
configure:20246: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20246: $? = 0
configure:20246: result: yes
configure:20252: checking for link
configure:20252: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20252: $? = 0
configure:20252: result: yes
configure:20258: checking for linkat
configure:20258: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20258: $? = 0
configure:20258: result: yes
configure:20264: checking for localtime_r
configure:20264: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20264: $? = 0
configure:20264: result: yes
configure:20270: checking for lstat
configure:20270: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20270: $? = 0
configure:20270: result: yes
configure:20276: checking for lutimes
configure:20276: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20276: $? = 0
configure:20276: result: yes
configure:20283: checking for mbrtowc
configure:20283: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20283: $? = 0
configure:20283: result: yes
configure:20289: checking for memmove
configure:20289: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:192:6: warning: incompatible redeclaration of library function 'memmove' [-Wincompatible-library-redeclaration]
char memmove (void);
     ^
conftest.c:192:6: note: 'memmove' is a builtin with type 'void *(void *, const void *, unsigned long)'
1 warning generated.
configure:20289: $? = 0
configure:20289: result: yes
configure:20295: checking for memset
configure:20295: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:193:6: warning: incompatible redeclaration of library function 'memset' [-Wincompatible-library-redeclaration]
char memset (void);
     ^
conftest.c:193:6: note: 'memset' is a builtin with type 'void *(void *, int, unsigned long)'
1 warning generated.
configure:20295: $? = 0
configure:20295: result: yes
configure:20302: checking for mkdir
configure:20302: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20302: $? = 0
configure:20302: result: yes
configure:20308: checking for mkfifo
configure:20308: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20308: $? = 0
configure:20308: result: yes
configure:20314: checking for mknod
configure:20314: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20314: $? = 0
configure:20314: result: yes
configure:20320: checking for mkstemp
configure:20320: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20320: $? = 0
configure:20320: result: yes
configure:20327: checking for nl_langinfo
configure:20327: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20327: $? = 0
configure:20327: result: yes
configure:20333: checking for openat
configure:20333: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20333: $? = 0
configure:20333: result: yes
configure:20339: checking for pipe
configure:20339: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20339: $? = 0
configure:20339: result: yes
configure:20345: checking for poll
configure:20345: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20345: $? = 0
configure:20345: result: yes
configure:20351: checking for posix_spawnp
configure:20351: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20351: $? = 0
configure:20351: result: yes
configure:20357: checking for readlink
configure:20357: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20357: $? = 0
configure:20357: result: yes
configure:20363: checking for readlinkat
configure:20363: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20363: $? = 0
configure:20363: result: yes
configure:20370: checking for readpassphrase
configure:20370: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20370: $? = 0
configure:20370: result: yes
configure:20377: checking for select
configure:20377: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20377: $? = 0
configure:20377: result: yes
configure:20383: checking for setenv
configure:20383: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20383: $? = 0
configure:20383: result: yes
configure:20389: checking for setlocale
configure:20389: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20389: $? = 0
configure:20389: result: yes
configure:20395: checking for sigaction
configure:20395: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20395: $? = 0
configure:20395: result: yes
configure:20401: checking for statfs
configure:20401: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20401: $? = 0
configure:20401: result: yes
configure:20407: checking for statvfs
configure:20407: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20407: $? = 0
configure:20407: result: yes
configure:20414: checking for strchr
configure:20414: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:212:6: warning: incompatible redeclaration of library function 'strchr' [-Wincompatible-library-redeclaration]
char strchr (void);
     ^
conftest.c:212:6: note: 'strchr' is a builtin with type 'char *(const char *, int)'
1 warning generated.
configure:20414: $? = 0
configure:20414: result: yes
configure:20420: checking for strdup
configure:20420: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:213:6: warning: incompatible redeclaration of library function 'strdup' [-Wincompatible-library-redeclaration]
char strdup (void);
     ^
conftest.c:213:6: note: 'strdup' is a builtin with type 'char *(const char *)'
1 warning generated.
configure:20420: $? = 0
configure:20420: result: yes
configure:20426: checking for strerror
configure:20426: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:214:6: warning: incompatible redeclaration of library function 'strerror' [-Wincompatible-library-redeclaration]
char strerror (void);
     ^
conftest.c:214:6: note: 'strerror' is a builtin with type 'char *(int)'
1 warning generated.
configure:20426: $? = 0
configure:20426: result: yes
configure:20432: checking for strncpy_s
configure:20432: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_strncpy_s", referenced from:
      _main in conftest-099d51.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:20432: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| /* end confdefs.h.  */
| /* Define strncpy_s to an innocuous variant, in case <limits.h> declares strncpy_s.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define strncpy_s innocuous_strncpy_s
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char strncpy_s (void); below.  */
| 
| #include <limits.h>
| #undef strncpy_s
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char strncpy_s (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_strncpy_s || defined __stub___strncpy_s
| choke me
| #endif
| 
| int
| main (void)
| {
| return strncpy_s ();
|   ;
|   return 0;
| }
configure:20432: result: no
configure:20438: checking for strnlen
configure:20438: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20438: $? = 0
configure:20438: result: yes
configure:20444: checking for strrchr
configure:20444: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:216:6: warning: incompatible redeclaration of library function 'strrchr' [-Wincompatible-library-redeclaration]
char strrchr (void);
     ^
conftest.c:216:6: note: 'strrchr' is a builtin with type 'char *(const char *, int)'
1 warning generated.
configure:20444: $? = 0
configure:20444: result: yes
configure:20450: checking for symlink
configure:20450: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20450: $? = 0
configure:20450: result: yes
configure:20457: checking for timegm
configure:20457: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20457: $? = 0
configure:20457: result: yes
configure:20463: checking for tzset
configure:20463: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20463: $? = 0
configure:20463: result: yes
configure:20469: checking for unlinkat
configure:20469: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20469: $? = 0
configure:20469: result: yes
configure:20475: checking for unsetenv
configure:20475: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20475: $? = 0
configure:20475: result: yes
configure:20481: checking for utime
configure:20481: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20481: $? = 0
configure:20481: result: yes
configure:20487: checking for utimensat
configure:20487: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20487: $? = 0
configure:20487: result: yes
configure:20493: checking for utimes
configure:20493: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20493: $? = 0
configure:20493: result: yes
configure:20499: checking for vfork
configure:20499: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:225:6: warning: incompatible redeclaration of library function 'vfork' [-Wincompatible-library-redeclaration]
char vfork (void);
     ^
conftest.c:225:6: note: 'vfork' is a builtin with type 'int (void)'
1 warning generated.
configure:20499: $? = 0
configure:20499: result: yes
configure:20506: checking for wcrtomb
configure:20506: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20506: $? = 0
configure:20506: result: yes
configure:20512: checking for wcscmp
configure:20512: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:227:6: warning: incompatible redeclaration of library function 'wcscmp' [-Wincompatible-library-redeclaration]
char wcscmp (void);
     ^
conftest.c:227:6: note: 'wcscmp' is a builtin with type 'int (const int *, const int *)'
1 warning generated.
configure:20512: $? = 0
configure:20512: result: yes
configure:20518: checking for wcscpy
configure:20518: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20518: $? = 0
configure:20518: result: yes
configure:20524: checking for wcslen
configure:20524: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:229:6: warning: incompatible redeclaration of library function 'wcslen' [-Wincompatible-library-redeclaration]
char wcslen (void);
     ^
conftest.c:229:6: note: 'wcslen' is a builtin with type 'unsigned long (const int *)'
1 warning generated.
configure:20524: $? = 0
configure:20524: result: yes
configure:20530: checking for wctomb
configure:20530: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20530: $? = 0
configure:20530: result: yes
configure:20536: checking for wmemcmp
configure:20536: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:231:6: warning: incompatible redeclaration of library function 'wmemcmp' [-Wincompatible-library-redeclaration]
char wmemcmp (void);
     ^
conftest.c:231:6: note: 'wmemcmp' is a builtin with type 'int (const int *, const int *, unsigned long)'
1 warning generated.
configure:20536: $? = 0
configure:20536: result: yes
configure:20542: checking for wmemcpy
configure:20542: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:232:6: warning: incompatible redeclaration of library function 'wmemcpy' [-Wincompatible-library-redeclaration]
char wmemcpy (void);
     ^
conftest.c:232:6: note: 'wmemcpy' is a builtin with type 'int *(int *, const int *, unsigned long)'
1 warning generated.
configure:20542: $? = 0
configure:20542: result: yes
configure:20548: checking for wmemmove
configure:20548: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:233:6: warning: incompatible redeclaration of library function 'wmemmove' [-Wincompatible-library-redeclaration]
char wmemmove (void);
     ^
conftest.c:233:6: note: 'wmemmove' is a builtin with type 'int *(int *, const int *, unsigned long)'
1 warning generated.
configure:20548: $? = 0
configure:20548: result: yes
configure:20555: checking for _fseeki64
configure:20555: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "__fseeki64", referenced from:
      _main in conftest-e47ea2.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:20555: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _fseeki64 to an innocuous variant, in case <limits.h> declares _fseeki64.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _fseeki64 innocuous__fseeki64
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char _fseeki64 (void); below.  */
| 
| #include <limits.h>
| #undef _fseeki64
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _fseeki64 (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__fseeki64 || defined __stub____fseeki64
| choke me
| #endif
| 
| int
| main (void)
| {
| return _fseeki64 ();
|   ;
|   return 0;
| }
configure:20555: result: no
configure:20561: checking for _get_timezone
configure:20561: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "__get_timezone", referenced from:
      _main in conftest-115a41.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:20561: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define _get_timezone to an innocuous variant, in case <limits.h> declares _get_timezone.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define _get_timezone innocuous__get_timezone
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char _get_timezone (void); below.  */
| 
| #include <limits.h>
| #undef _get_timezone
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char _get_timezone (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub__get_timezone || defined __stub____get_timezone
| choke me
| #endif
| 
| int
| main (void)
| {
| return _get_timezone ();
|   ;
|   return 0;
| }
configure:20561: result: no
configure:20568: checking whether cmtime_s is declared
configure:20568: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
conftest.c:227:10: error: use of undeclared identifier 'cmtime_s'
  (void) cmtime_s;
         ^
1 error generated.
configure:20568: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #include <time.h>
| 
| int
| main (void)
| {
| #ifndef cmtime_s
| #ifdef __cplusplus
|   (void) cmtime_s;
| #else
|   (void) cmtime_s;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:20568: result: no
configure:20576: checking whether gmtime_s is declared
configure:20576: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
conftest.c:227:10: error: use of undeclared identifier 'gmtime_s'
  (void) gmtime_s;
         ^
1 error generated.
configure:20576: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #include <time.h>
| 
| int
| main (void)
| {
| #ifndef gmtime_s
| #ifdef __cplusplus
|   (void) gmtime_s;
| #else
|   (void) gmtime_s;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:20576: result: no
configure:20584: checking for localtime_s
configure:20584: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:223:13: error: use of undeclared identifier 'localtime_s'; did you mean 'localtime_r'?
if (sizeof (localtime_s))
            ^~~~~~~~~~~
            localtime_r
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/time.h:128:12: note: 'localtime_r' declared here
struct tm *localtime_r(const time_t * __restrict, struct tm * __restrict);
           ^
1 error generated.
configure:20584: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #include <time.h>
| 
| int
| main (void)
| {
| if (sizeof (localtime_s))
| 	 return 0;
|   ;
|   return 0;
| }
configure:20584: result: no
configure:20593: checking whether _mkgmtime is declared
configure:20593: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
conftest.c:227:10: error: use of undeclared identifier '_mkgmtime'
  (void) _mkgmtime;
         ^
1 error generated.
configure:20593: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #include <time.h>
| 
| int
| main (void)
| {
| #ifndef _mkgmtime
| #ifdef __cplusplus
|   (void) _mkgmtime;
| #else
|   (void) _mkgmtime;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:20593: result: no
configure:20603: checking for cygwin_conv_path
configure:20603: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_cygwin_conv_path", referenced from:
      _main in conftest-ba7817.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:20603: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| /* Define cygwin_conv_path to an innocuous variant, in case <limits.h> declares cygwin_conv_path.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define cygwin_conv_path innocuous_cygwin_conv_path
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char cygwin_conv_path (void); below.  */
| 
| #include <limits.h>
| #undef cygwin_conv_path
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char cygwin_conv_path (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_cygwin_conv_path || defined __stub___cygwin_conv_path
| choke me
| #endif
| 
| int
| main (void)
| {
| return cygwin_conv_path ();
|   ;
|   return 0;
| }
configure:20603: result: no
configure:20612: checking for struct vfsconf
configure:20612: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:20612: $? = 0
configure:20612: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:227:29: error: expected expression
if (sizeof ((struct vfsconf)))
                            ^
1 error generated.
configure:20612: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#include <sys/mount.h>
| 
| 
| int
| main (void)
| {
| if (sizeof ((struct vfsconf)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:20612: result: yes
configure:20627: checking for struct xvfsconf
configure:20627: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:228:5: error: invalid application of 'sizeof' to an incomplete type 'struct xvfsconf'
if (sizeof (struct xvfsconf))
    ^      ~~~~~~~~~~~~~~~~~
conftest.c:228:20: note: forward declaration of 'struct xvfsconf'
if (sizeof (struct xvfsconf))
                   ^
1 error generated.
configure:20627: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#include <sys/mount.h>
| 
| 
| int
| main (void)
| {
| if (sizeof (struct xvfsconf))
| 	 return 0;
|   ;
|   return 0;
| }
configure:20627: result: no
configure:20642: checking for struct statfs
configure:20642: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:20642: $? = 0
configure:20642: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:228:28: error: expected expression
if (sizeof ((struct statfs)))
                           ^
1 error generated.
configure:20642: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| /* end confdefs.h.  */
| #if HAVE_SYS_TYPES_H
| 	#include <sys/types.h>
| 	#endif
| 	#include <sys/mount.h>
| 
| 
| int
| main (void)
| {
| if (sizeof ((struct statfs)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:20642: result: yes
configure:20671: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:225:24: warning: variable 'dir' is uninitialized when used here [-Wuninitialized]
                    return(readdir_r(dir, &e, &r));
                                     ^~~
conftest.c:224:9: note: initialize the variable 'dir' to silence this warning
DIR *dir; struct dirent e, *r;
        ^
         = 0
1 warning generated.
configure:20671: $? = 0
configure:20693: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20693: $? = 0
configure:20706: checking whether D_MD_ORDER is declared
configure:20706: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:20706: $? = 0
configure:20706: result: yes
configure:20721: checking for struct dirent.d_namlen
configure:20721: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:20721: $? = 0
configure:20721: result: yes
configure:20741: checking for library containing setxattr
configure:20777: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20777: $? = 0
configure:20799: result: none required
configure:20808: checking whether EXTATTR_NAMESPACE_USER is declared
configure:20808: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
conftest.c:224:10: fatal error: 'sys/extattr.h' file not found
#include <sys/extattr.h>
         ^~~~~~~~~~~~~~~
1 error generated.
configure:20808: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| /* end confdefs.h.  */
| #include <sys/types.h>
| #include <sys/extattr.h>
| 
| 
| int
| main (void)
| {
| #ifndef EXTATTR_NAMESPACE_USER
| #ifdef __cplusplus
|   (void) EXTATTR_NAMESPACE_USER;
| #else
|   (void) EXTATTR_NAMESPACE_USER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:20808: result: no
configure:20821: checking whether XATTR_NOFOLLOW is declared
configure:20821: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:20821: $? = 0
configure:20821: result: yes
configure:20844: checking for fgetxattr
configure:20844: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20844: $? = 0
configure:20844: result: yes
configure:20844: checking for flistxattr
configure:20844: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20844: $? = 0
configure:20844: result: yes
configure:20844: checking for fsetxattr
configure:20844: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20844: $? = 0
configure:20844: result: yes
configure:20844: checking for getxattr
configure:20844: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20844: $? = 0
configure:20844: result: yes
configure:20844: checking for listxattr
configure:20844: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20844: $? = 0
configure:20844: result: yes
configure:20844: checking for setxattr
configure:20844: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:20844: $? = 0
configure:20844: result: yes
configure:20950: checking for extended attributes support
configure:20962: result: Darwin
configure:20998: checking for acl_get_file in -lacl
configure:21027: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -lacl  -llzma -lbz2 -lz  -lxml2 >&5
ld: library 'acl' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:21027: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.
|    The 'extern "C"' is for builds by C++ compilers;
|    although this is not generally supported in C code supporting it here
|    has little cost and some practical benefit (sr 110532).  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_file (void);
| int
| main (void)
| {
| return acl_get_file ();
|   ;
|   return 0;
| }
configure:21039: result: no
configure:21050: checking for acl_t
configure:21050: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:21050: $? = 0
configure:21050: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:244:20: error: expected expression
if (sizeof ((acl_t)))
                   ^
1 error generated.
configure:21050: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_TYPES_H
|       #include <sys/types.h>
|       #endif
|       #if HAVE_SYS_ACL_H
|       #include <sys/acl.h>
|       #endif
| 
| 
| int
| main (void)
| {
| if (sizeof ((acl_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:21050: result: yes
configure:21066: checking for acl_entry_t
configure:21066: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:21066: $? = 0
configure:21066: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:245:26: error: expected expression
if (sizeof ((acl_entry_t)))
                         ^
1 error generated.
configure:21066: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_TYPES_H
|       #include <sys/types.h>
|       #endif
|       #if HAVE_SYS_ACL_H
|       #include <sys/acl.h>
|       #endif
| 
| 
| int
| main (void)
| {
| if (sizeof ((acl_entry_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:21066: result: yes
configure:21082: checking for acl_permset_t
configure:21082: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:21082: $? = 0
configure:21082: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:246:28: error: expected expression
if (sizeof ((acl_permset_t)))
                           ^
1 error generated.
configure:21082: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_TYPES_H
|       #include <sys/types.h>
|       #endif
|       #if HAVE_SYS_ACL_H
|       #include <sys/acl.h>
|       #endif
| 
| 
| int
| main (void)
| {
| if (sizeof ((acl_permset_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:21082: result: yes
configure:21098: checking for acl_tag_t
configure:21098: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:21098: $? = 0
configure:21098: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:247:24: error: expected expression
if (sizeof ((acl_tag_t)))
                       ^
1 error generated.
configure:21098: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_TYPES_H
|       #include <sys/types.h>
|       #endif
|       #if HAVE_SYS_ACL_H
|       #include <sys/acl.h>
|       #endif
| 
| 
| int
| main (void)
| {
| if (sizeof ((acl_tag_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:21098: result: yes
configure:21116: checking for richacl_get_file in -lrichacl
configure:21145: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -lrichacl  -llzma -lbz2 -lz  -lxml2 >&5
ld: library 'richacl' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:21145: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.
|    The 'extern "C"' is for builds by C++ compilers;
|    although this is not generally supported in C code supporting it here
|    has little cost and some practical benefit (sr 110532).  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char richacl_get_file (void);
| int
| main (void)
| {
| return richacl_get_file ();
|   ;
|   return 0;
| }
configure:21157: result: no
configure:21168: checking for struct richace
configure:21168: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:245:5: error: invalid application of 'sizeof' to an incomplete type 'struct richace'
if (sizeof (struct richace))
    ^      ~~~~~~~~~~~~~~~~
conftest.c:245:20: note: forward declaration of 'struct richace'
if (sizeof (struct richace))
                   ^
1 error generated.
configure:21168: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_RICHACL_H
|       #include <sys/richacl.h>
|       #endif
| 
| 
| int
| main (void)
| {
| if (sizeof (struct richace))
| 	 return 0;
|   ;
|   return 0;
| }
configure:21168: result: no
configure:21181: checking for struct richacl
configure:21181: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:245:5: error: invalid application of 'sizeof' to an incomplete type 'struct richacl'
if (sizeof (struct richacl))
    ^      ~~~~~~~~~~~~~~~~
conftest.c:245:20: note: forward declaration of 'struct richacl'
if (sizeof (struct richacl))
                   ^
1 error generated.
configure:21181: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| /* end confdefs.h.  */
| 
|       #if HAVE_SYS_RICHACL_H
|       #include <sys/richacl.h>
|       #endif
| 
| 
| int
| main (void)
| {
| if (sizeof (struct richacl))
| 	 return 0;
|   ;
|   return 0;
| }
configure:21181: result: no
configure:21197: checking for acl
configure:21197: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_acl", referenced from:
      _main in conftest-f6c88a.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:21197: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| /* end confdefs.h.  */
| /* Define acl to an innocuous variant, in case <limits.h> declares acl.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl innocuous_acl
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char acl (void); below.  */
| 
| #include <limits.h>
| #undef acl
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl || defined __stub___acl
| choke me
| #endif
| 
| int
| main (void)
| {
| return acl ();
|   ;
|   return 0;
| }
configure:21197: result: no
configure:21203: checking for facl
configure:21203: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_facl", referenced from:
      _main in conftest-16cefd.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:21203: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| /* end confdefs.h.  */
| /* Define facl to an innocuous variant, in case <limits.h> declares facl.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define facl innocuous_facl
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char facl (void); below.  */
| 
| #include <limits.h>
| #undef facl
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char facl (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_facl || defined __stub___facl
| choke me
| #endif
| 
| int
| main (void)
| {
| return facl ();
|   ;
|   return 0;
| }
configure:21203: result: no
configure:21397: checking for acl_add_perm
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_clear_perms
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_create_entry
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_delete_def_file
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_free
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_get_entry
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_get_fd
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_get_file
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_get_permset
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_get_qualifier
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_get_tag_type
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_init
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_set_fd
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_set_file
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_set_qualifier
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21397: checking for acl_set_tag_type
configure:21397: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21397: $? = 0
configure:21397: result: yes
configure:21415: checking for acl_get_perm
configure:21415: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_acl_get_perm", referenced from:
      _main in conftest-e3ef02.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:21415: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| /* end confdefs.h.  */
| /* Define acl_get_perm to an innocuous variant, in case <limits.h> declares acl_get_perm.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_perm innocuous_acl_get_perm
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char acl_get_perm (void); below.  */
| 
| #include <limits.h>
| #undef acl_get_perm
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_perm (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_perm || defined __stub___acl_get_perm
| choke me
| #endif
| 
| int
| main (void)
| {
| return acl_get_perm ();
|   ;
|   return 0;
| }
configure:21415: result: no
configure:21440: checking for acl_add_flag_np
configure:21440: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21440: $? = 0
configure:21440: result: yes
configure:21446: checking for acl_clear_flags_np
configure:21446: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21446: $? = 0
configure:21446: result: yes
configure:21452: checking for acl_get_brand_np
configure:21452: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_acl_get_brand_np", referenced from:
      _main in conftest-f28d28.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:21452: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| /* end confdefs.h.  */
| /* Define acl_get_brand_np to an innocuous variant, in case <limits.h> declares acl_get_brand_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_brand_np innocuous_acl_get_brand_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char acl_get_brand_np (void); below.  */
| 
| #include <limits.h>
| #undef acl_get_brand_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_brand_np (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_brand_np || defined __stub___acl_get_brand_np
| choke me
| #endif
| 
| int
| main (void)
| {
| return acl_get_brand_np ();
|   ;
|   return 0;
| }
configure:21452: result: no
configure:21458: checking for acl_get_entry_type_np
configure:21458: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_acl_get_entry_type_np", referenced from:
      _main in conftest-700ad5.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:21458: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| /* end confdefs.h.  */
| /* Define acl_get_entry_type_np to an innocuous variant, in case <limits.h> declares acl_get_entry_type_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_get_entry_type_np innocuous_acl_get_entry_type_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char acl_get_entry_type_np (void); below.  */
| 
| #include <limits.h>
| #undef acl_get_entry_type_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_get_entry_type_np (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_get_entry_type_np || defined __stub___acl_get_entry_type_np
| choke me
| #endif
| 
| int
| main (void)
| {
| return acl_get_entry_type_np ();
|   ;
|   return 0;
| }
configure:21458: result: no
configure:21464: checking for acl_get_flag_np
configure:21464: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21464: $? = 0
configure:21464: result: yes
configure:21470: checking for acl_get_flagset_np
configure:21470: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21470: $? = 0
configure:21470: result: yes
configure:21476: checking for acl_get_fd_np
configure:21476: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21476: $? = 0
configure:21476: result: yes
configure:21482: checking for acl_get_link_np
configure:21482: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21482: $? = 0
configure:21482: result: yes
configure:21488: checking for acl_get_perm_np
configure:21488: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21488: $? = 0
configure:21488: result: yes
configure:21494: checking for acl_is_trivial_np
configure:21494: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_acl_is_trivial_np", referenced from:
      _main in conftest-bc2c40.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:21494: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| /* end confdefs.h.  */
| /* Define acl_is_trivial_np to an innocuous variant, in case <limits.h> declares acl_is_trivial_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_is_trivial_np innocuous_acl_is_trivial_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char acl_is_trivial_np (void); below.  */
| 
| #include <limits.h>
| #undef acl_is_trivial_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_is_trivial_np (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_is_trivial_np || defined __stub___acl_is_trivial_np
| choke me
| #endif
| 
| int
| main (void)
| {
| return acl_is_trivial_np ();
|   ;
|   return 0;
| }
configure:21494: result: no
configure:21500: checking for acl_set_entry_type_np
configure:21500: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_acl_set_entry_type_np", referenced from:
      _main in conftest-034a18.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:21500: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| /* end confdefs.h.  */
| /* Define acl_set_entry_type_np to an innocuous variant, in case <limits.h> declares acl_set_entry_type_np.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define acl_set_entry_type_np innocuous_acl_set_entry_type_np
| 
| /* System header to define __stub macros and hopefully few prototypes,
|    which can conflict with char acl_set_entry_type_np (void); below.  */
| 
| #include <limits.h>
| #undef acl_set_entry_type_np
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char acl_set_entry_type_np (void);
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_acl_set_entry_type_np || defined __stub___acl_set_entry_type_np
| choke me
| #endif
| 
| int
| main (void)
| {
| return acl_set_entry_type_np ();
|   ;
|   return 0;
| }
configure:21500: result: no
configure:21506: checking for acl_set_fd_np
configure:21506: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21506: $? = 0
configure:21506: result: yes
configure:21512: checking for acl_set_link_np
configure:21512: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21512: $? = 0
configure:21512: result: yes
configure:21520: checking for mbr_uid_to_uuid
configure:21520: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21520: $? = 0
configure:21520: result: yes
configure:21526: checking for mbr_uuid_to_id
configure:21526: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21526: $? = 0
configure:21526: result: yes
configure:21532: checking for mbr_gid_to_uuid
configure:21532: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:21532: $? = 0
configure:21532: result: yes
configure:21540: checking whether ACL_TYPE_EXTENDED is declared
configure:21540: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:21540: $? = 0
configure:21540: result: yes
configure:21551: checking whether ACL_TYPE_NFS4 is declared
configure:21551: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
conftest.c:275:10: error: use of undeclared identifier 'ACL_TYPE_NFS4'
  (void) ACL_TYPE_NFS4;
         ^
1 error generated.
configure:21551: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| /* end confdefs.h.  */
| #include <sys/types.h>
| 	       #include <sys/acl.h>
| 
| int
| main (void)
| {
| #ifndef ACL_TYPE_NFS4
| #ifdef __cplusplus
|   (void) ACL_TYPE_NFS4;
| #else
|   (void) ACL_TYPE_NFS4;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:21551: result: no
configure:21562: checking whether ACL_USER is declared
configure:21562: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
conftest.c:276:10: error: use of undeclared identifier 'ACL_USER'
  (void) ACL_USER;
         ^
1 error generated.
configure:21562: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| /* end confdefs.h.  */
| #include <sys/types.h>
| 	       #include <sys/acl.h>
| 
| int
| main (void)
| {
| #ifndef ACL_USER
| #ifdef __cplusplus
|   (void) ACL_USER;
| #else
|   (void) ACL_USER;
| #endif
| #endif
| 
|   ;
|   return 0;
| }
configure:21562: result: no
configure:21573: checking whether ACL_SYNCHRONIZE is declared
configure:21573: gcc -c -g -O2 -Wall -Wformat -Wformat-security    conftest.c >&5
configure:21573: $? = 0
configure:21573: result: yes
configure:21634: checking for ACL support
configure:21662: result: Darwin (limited NFSv4)
configure:21741: checking for gcc option to enable large file support
configure:21776: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:21776: $? = 0
configure:21782: gcc -DFTYPE=ino_t -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
configure:21782: $? = 0
configure:21807: result: none needed
configure:21923: checking support for ARCHIVE_CRYPTO_MD5_LIBC
configure:21945: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:304:
./libarchive/archive_digest_private.h:64:10: fatal error: 'md5.h' file not found
#include <md5.h>
         ^~~~~~~
1 error generated.
configure:21945: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_MD5_COMPILE_TEST
| #define ARCHIVE_CRYPTO_MD5_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_md5_ctx ctx;
|   archive_md5_init(&ctx);
|   archive_md5_update(&ctx, *argv, argc);
|   archive_md5_final(&ctx, NULL);
|   return 0;
| }
| 
configure:21956: result: no
configure:21971: checking support for ARCHIVE_CRYPTO_MD5_LIBSYSTEM
configure:21993: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:475:3: warning: 'CC_MD5_Init' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Init(ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:133:12: note: 'CC_MD5_Init' has been explicitly marked deprecated here
extern int CC_MD5_Init(CC_MD5_CTX *c)
           ^
conftest.c:483:3: warning: 'CC_MD5_Update' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Update(ctx, indata, insize);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:136:12: note: 'CC_MD5_Update' has been explicitly marked deprecated here
extern int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
           ^
conftest.c:490:3: warning: 'CC_MD5_Final' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Final(md, ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:139:12: note: 'CC_MD5_Final' has been explicitly marked deprecated here
extern int CC_MD5_Final(unsigned char *md, CC_MD5_CTX *c)
           ^
3 warnings generated.
configure:21993: $? = 0
configure:21995: result: yes
configure:22019: checking support for ARCHIVE_CRYPTO_RMD160_LIBC
configure:22041: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:305:
./libarchive/archive_digest_private.h:67:10: fatal error: 'rmd160.h' file not found
#include <rmd160.h>
         ^~~~~~~~~~
1 error generated.
configure:22041: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_RMD160_COMPILE_TEST
| #define ARCHIVE_CRYPTO_RMD160_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_rmd160_ctx ctx;
|   archive_rmd160_init(&ctx);
|   archive_rmd160_update(&ctx, *argv, argc);
|   archive_rmd160_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22052: result: no
configure:22067: checking support for ARCHIVE_CRYPTO_SHA1_LIBC
configure:22089: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:305:
./libarchive/archive_digest_private.h:70:10: fatal error: 'sha1.h' file not found
#include <sha1.h>
         ^~~~~~~~
1 error generated.
configure:22089: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA1_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA1_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha1_ctx ctx;
|   archive_sha1_init(&ctx);
|   archive_sha1_update(&ctx, *argv, argc);
|   archive_sha1_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22100: result: no
configure:22115: checking support for ARCHIVE_CRYPTO_SHA1_LIBSYSTEM
configure:22137: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:476:3: warning: 'CC_MD5_Init' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Init(ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:133:12: note: 'CC_MD5_Init' has been explicitly marked deprecated here
extern int CC_MD5_Init(CC_MD5_CTX *c)
           ^
conftest.c:484:3: warning: 'CC_MD5_Update' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Update(ctx, indata, insize);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:136:12: note: 'CC_MD5_Update' has been explicitly marked deprecated here
extern int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
           ^
conftest.c:491:3: warning: 'CC_MD5_Final' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Final(md, ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:139:12: note: 'CC_MD5_Final' has been explicitly marked deprecated here
extern int CC_MD5_Final(unsigned char *md, CC_MD5_CTX *c)
           ^
3 warnings generated.
configure:22137: $? = 0
configure:22139: result: yes
configure:22163: checking support for ARCHIVE_CRYPTO_SHA256_LIBC
configure:22185: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:306:
./libarchive/archive_digest_private.h:81:10: fatal error: 'sha2.h' file not found
#include <sha2.h>
         ^~~~~~~~
1 error generated.
configure:22185: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22196: result: no
configure:22211: checking support for ARCHIVE_CRYPTO_SHA256_LIBC2
configure:22233: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:306:
./libarchive/archive_digest_private.h:81:10: fatal error: 'sha2.h' file not found
#include <sha2.h>
         ^~~~~~~~
1 error generated.
configure:22233: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22244: result: no
configure:22259: checking support for ARCHIVE_CRYPTO_SHA256_LIBC3
configure:22281: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:306:
./libarchive/archive_digest_private.h:81:10: fatal error: 'sha2.h' file not found
#include <sha2.h>
         ^~~~~~~~
1 error generated.
configure:22281: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA256_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA256_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha256_ctx ctx;
|   archive_sha256_init(&ctx);
|   archive_sha256_update(&ctx, *argv, argc);
|   archive_sha256_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22292: result: no
configure:22307: checking support for ARCHIVE_CRYPTO_SHA256_LIBSYSTEM
configure:22329: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:477:3: warning: 'CC_MD5_Init' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Init(ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:133:12: note: 'CC_MD5_Init' has been explicitly marked deprecated here
extern int CC_MD5_Init(CC_MD5_CTX *c)
           ^
conftest.c:485:3: warning: 'CC_MD5_Update' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Update(ctx, indata, insize);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:136:12: note: 'CC_MD5_Update' has been explicitly marked deprecated here
extern int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
           ^
conftest.c:492:3: warning: 'CC_MD5_Final' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Final(md, ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:139:12: note: 'CC_MD5_Final' has been explicitly marked deprecated here
extern int CC_MD5_Final(unsigned char *md, CC_MD5_CTX *c)
           ^
3 warnings generated.
configure:22329: $? = 0
configure:22331: result: yes
configure:22355: checking support for ARCHIVE_CRYPTO_SHA384_LIBC
configure:22377: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:307:
./libarchive/archive_digest_private.h:81:10: fatal error: 'sha2.h' file not found
#include <sha2.h>
         ^~~~~~~~
1 error generated.
configure:22377: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22388: result: no
configure:22403: checking support for ARCHIVE_CRYPTO_SHA384_LIBC2
configure:22425: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:307:
./libarchive/archive_digest_private.h:81:10: fatal error: 'sha2.h' file not found
#include <sha2.h>
         ^~~~~~~~
1 error generated.
configure:22425: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22436: result: no
configure:22451: checking support for ARCHIVE_CRYPTO_SHA384_LIBC3
configure:22473: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:307:
./libarchive/archive_digest_private.h:81:10: fatal error: 'sha2.h' file not found
#include <sha2.h>
         ^~~~~~~~
1 error generated.
configure:22473: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA384_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA384_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha384_ctx ctx;
|   archive_sha384_init(&ctx);
|   archive_sha384_update(&ctx, *argv, argc);
|   archive_sha384_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22484: result: no
configure:22499: checking support for ARCHIVE_CRYPTO_SHA384_LIBSYSTEM
configure:22521: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:478:3: warning: 'CC_MD5_Init' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Init(ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:133:12: note: 'CC_MD5_Init' has been explicitly marked deprecated here
extern int CC_MD5_Init(CC_MD5_CTX *c)
           ^
conftest.c:486:3: warning: 'CC_MD5_Update' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Update(ctx, indata, insize);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:136:12: note: 'CC_MD5_Update' has been explicitly marked deprecated here
extern int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
           ^
conftest.c:493:3: warning: 'CC_MD5_Final' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Final(md, ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:139:12: note: 'CC_MD5_Final' has been explicitly marked deprecated here
extern int CC_MD5_Final(unsigned char *md, CC_MD5_CTX *c)
           ^
3 warnings generated.
configure:22521: $? = 0
configure:22523: result: yes
configure:22547: checking support for ARCHIVE_CRYPTO_SHA512_LIBC
configure:22569: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:308:
./libarchive/archive_digest_private.h:81:10: fatal error: 'sha2.h' file not found
#include <sha2.h>
         ^~~~~~~~
1 error generated.
configure:22569: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22580: result: no
configure:22595: checking support for ARCHIVE_CRYPTO_SHA512_LIBC2
configure:22617: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:308:
./libarchive/archive_digest_private.h:81:10: fatal error: 'sha2.h' file not found
#include <sha2.h>
         ^~~~~~~~
1 error generated.
configure:22617: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC2
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22628: result: no
configure:22643: checking support for ARCHIVE_CRYPTO_SHA512_LIBC3
configure:22665: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:308:
./libarchive/archive_digest_private.h:81:10: fatal error: 'sha2.h' file not found
#include <sha2.h>
         ^~~~~~~~
1 error generated.
configure:22665: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_SHA512_COMPILE_TEST
| #define ARCHIVE_CRYPTO_SHA512_LIBC3
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_sha512_ctx ctx;
|   archive_sha512_init(&ctx);
|   archive_sha512_update(&ctx, *argv, argc);
|   archive_sha512_final(&ctx, NULL);
|   return 0;
| }
| 
configure:22676: result: no
configure:22691: checking support for ARCHIVE_CRYPTO_SHA512_LIBSYSTEM
configure:22713: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
conftest.c:479:3: warning: 'CC_MD5_Init' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Init(ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:133:12: note: 'CC_MD5_Init' has been explicitly marked deprecated here
extern int CC_MD5_Init(CC_MD5_CTX *c)
           ^
conftest.c:487:3: warning: 'CC_MD5_Update' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Update(ctx, indata, insize);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:136:12: note: 'CC_MD5_Update' has been explicitly marked deprecated here
extern int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
           ^
conftest.c:494:3: warning: 'CC_MD5_Final' is deprecated: first deprecated in macOS 10.15 - This function is cryptographically broken and should not be used in security contexts. Clients should migrate to SHA256 (or stronger). [-Wdeprecated-declarations]
  CC_MD5_Final(md, ctx);
  ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/CommonCrypto/CommonDigest.h:139:12: note: 'CC_MD5_Final' has been explicitly marked deprecated here
extern int CC_MD5_Final(unsigned char *md, CC_MD5_CTX *c)
           ^
3 warnings generated.
configure:22713: $? = 0
configure:22715: result: yes
configure:22740: checking for bcrypt.h
configure:22740: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:279:10: fatal error: 'bcrypt.h' file not found
#include <bcrypt.h>
         ^~~~~~~~~~
1 error generated.
configure:22740: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM 1
| /* end confdefs.h.  */
| #ifdef HAVE_WINDOWS_H
|     # include <windows.h>
|     #endif
| 
| 
| #include <bcrypt.h>
configure:22740: result: no
configure:23867: checking for md5.h
configure:23867: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:302:10: fatal error: 'md5.h' file not found
#include <md5.h>
         ^~~~~~~
1 error generated.
configure:23867: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <md5.h>
configure:23867: result: no
configure:23873: checking for ripemd.h
configure:23873: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:302:10: fatal error: 'ripemd.h' file not found
#include <ripemd.h>
         ^~~~~~~~~~
1 error generated.
configure:23873: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <ripemd.h>
configure:23873: result: no
configure:23879: checking for sha.h
configure:23879: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:302:10: fatal error: 'sha.h' file not found
#include <sha.h>
         ^~~~~~~
1 error generated.
configure:23879: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sha.h>
configure:23879: result: no
configure:23885: checking for sha256.h
configure:23885: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:302:10: fatal error: 'sha256.h' file not found
#include <sha256.h>
         ^~~~~~~~~~
1 error generated.
configure:23885: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sha256.h>
configure:23885: result: no
configure:23891: checking for sha512.h
configure:23891: gcc -c -g -O2 -Wall -Wformat -Wformat-security   conftest.c >&5
conftest.c:302:10: fatal error: 'sha512.h' file not found
#include <sha512.h>
         ^~~~~~~~~~
1 error generated.
configure:23891: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM 1
| /* end confdefs.h.  */
| #include <stddef.h>
| #ifdef HAVE_STDIO_H
| # include <stdio.h>
| #endif
| #ifdef HAVE_STDLIB_H
| # include <stdlib.h>
| #endif
| #ifdef HAVE_STRING_H
| # include <string.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sha512.h>
configure:23891: result: no
configure:23899: checking for MD5Init in -lmd
configure:23928: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security    conftest.c -lmd  -llzma -lbz2 -lz  -lxml2 >&5
Undefined symbols for architecture arm64:
  "_MD5Init", referenced from:
      _main in conftest-833ece.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:23928: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.
|    The 'extern "C"' is for builds by C++ compilers;
|    although this is not generally supported in C code supporting it here
|    has little cost and some practical benefit (sr 110532).  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char MD5Init (void);
| int
| main (void)
| {
| return MD5Init ();
|   ;
|   return 0;
| }
configure:23940: result: no
configure:24003: checking support for ARCHIVE_CRYPTO_RMD160_LIBMD
configure:24025: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security   -I. -I. -I./libarchive  conftest.c -llzma -lbz2 -lz  -lxml2 >&5
In file included from conftest.c:309:
./libarchive/archive_digest_private.h:97:10: fatal error: 'ripemd.h' file not found
#include <ripemd.h>
         ^~~~~~~~~~
1 error generated.
configure:24025: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "libarchive"
| #define PACKAGE_TARNAME "libarchive"
| #define PACKAGE_VERSION "3.7.3"
| #define PACKAGE_STRING "libarchive 3.7.3"
| #define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
| #define PACKAGE_URL ""
| #define PACKAGE "libarchive"
| #define VERSION "3.7.3"
| #define __LIBARCHIVE_CONFIG_H_INCLUDED 1
| #define LIBARCHIVE_VERSION_STRING "3.7.3"
| #define LIBARCHIVE_VERSION_NUMBER "3007003"
| #define BSDCPIO_VERSION_STRING "3.7.3"
| #define BSDTAR_VERSION_STRING "3.7.3"
| #define BSDCAT_VERSION_STRING "3.7.3"
| #define BSDUNZIP_VERSION_STRING "3.7.3"
| #define HAVE_STDIO_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_SYS_TIME_H 1
| #define STDC_HEADERS 1
| #define _ALL_SOURCE 1
| #define _DARWIN_C_SOURCE 1
| #define _GNU_SOURCE 1
| #define _HPUX_ALT_XOPEN_SOCKET_API 1
| #define _NETBSD_SOURCE 1
| #define _OPENBSD_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
| #define __STDC_WANT_IEC_60559_BFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_DFP_EXT__ 1
| #define __STDC_WANT_IEC_60559_EXT__ 1
| #define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
| #define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
| #define __STDC_WANT_LIB_EXT2__ 1
| #define __STDC_WANT_MATH_SPEC_FUNCS__ 1
| #define _TANDEM_SOURCE 1
| #define __EXTENSIONS__ 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define HAVE_DIRENT_H 1
| #define HAVE_SYS_WAIT_H 1
| #define HAVE_COPYFILE_H 1
| #define HAVE_CTYPE_H 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_FNMATCH_H 1
| #define HAVE_GRP_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_LANGINFO_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_LOCALE_H 1
| #define HAVE_MEMBERSHIP_H 1
| #define HAVE_PATHS_H 1
| #define HAVE_POLL_H 1
| #define HAVE_PTHREAD_H 1
| #define HAVE_PWD_H 1
| #define HAVE_READPASSPHRASE_H 1
| #define HAVE_SIGNAL_H 1
| #define HAVE_SPAWN_H 1
| #define HAVE_STDARG_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_ACL_H 1
| #define HAVE_SYS_CDEFS_H 1
| #define HAVE_SYS_IOCTL_H 1
| #define HAVE_SYS_MOUNT_H 1
| #define HAVE_SYS_QUEUE_H 1
| #define HAVE_SYS_PARAM_H 1
| #define HAVE_SYS_POLL_H 1
| #define HAVE_SYS_SELECT_H 1
| #define HAVE_SYS_STATVFS_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_SYS_UTSNAME_H 1
| #define HAVE_SYS_XATTR_H 1
| #define HAVE_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_UTIME_H 1
| #define HAVE_WCHAR_H 1
| #define HAVE_WCTYPE_H 1
| #define HAVE_ZLIB_H 1
| #define HAVE_LIBZ 1
| #define HAVE_BZLIB_H 1
| #define HAVE_LIBBZ2 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| #define HAVE_ICONV_H 1
| #define HAVE_LOCALCHARSET_H 1
| #define HAVE_LOCALE_CHARSET 1
| #define HAVE_LIBLZMA 1
| #define HAVE_LIBXML_XMLREADER_H 1
| #define HAVE_LIBXML_XMLWRITER_H 1
| #define HAVE_REGEX_H 1
| #define HAVE_STRUCT_TM_TM_GMTOFF 1
| #define HAVE_STRUCT_STATFS_F_IOSIZE 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
| #define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
| #define HAVE_STRUCT_STAT_ST_BLKSIZE 1
| #define HAVE_STRUCT_STAT_ST_FLAGS 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_UNSIGNED_LONG_LONG 1
| #define HAVE_UNSIGNED_LONG_LONG_INT 1
| #define HAVE_LONG_LONG_INT 1
| #define HAVE_INTMAX_T 1
| #define HAVE_UINTMAX_T 1
| #define HAVE_DECL_SIZE_MAX 1
| #define HAVE_DECL_INT32_MAX 1
| #define HAVE_DECL_INT32_MIN 1
| #define HAVE_DECL_INT64_MAX 1
| #define HAVE_DECL_INT64_MIN 1
| #define HAVE_DECL_UINT64_MAX 1
| #define HAVE_DECL_UINT32_MAX 1
| #define HAVE_DECL_INTMAX_MAX 1
| #define HAVE_DECL_INTMAX_MIN 1
| #define HAVE_DECL_UINTMAX_MAX 1
| #define HAVE_DECL_SSIZE_MAX 1
| #define HAVE_EFTYPE 1
| #define HAVE_EILSEQ 1
| #define HAVE_WCHAR_T 1
| #define SIZEOF_WCHAR_T 4
| #define SIZEOF_INT 4
| #define SIZEOF_LONG 8
| #define HAVE_FSEEKO 1
| #define HAVE_DECL_STRERROR_R 1
| #define HAVE_STRERROR_R 1
| #define HAVE_STRFTIME 1
| #define HAVE_VPRINTF 1
| #define HAVE_ARC4RANDOM_BUF 1
| #define HAVE_CHFLAGS 1
| #define HAVE_CHOWN 1
| #define HAVE_CHROOT 1
| #define HAVE_CTIME_R 1
| #define HAVE_FCHDIR 1
| #define HAVE_FCHFLAGS 1
| #define HAVE_FCHMOD 1
| #define HAVE_FCHOWN 1
| #define HAVE_FCNTL 1
| #define HAVE_FDOPENDIR 1
| #define HAVE_FNMATCH 1
| #define HAVE_FORK 1
| #define HAVE_FSTAT 1
| #define HAVE_FSTATAT 1
| #define HAVE_FSTATFS 1
| #define HAVE_FSTATVFS 1
| #define HAVE_FTRUNCATE 1
| #define HAVE_FUTIMENS 1
| #define HAVE_FUTIMES 1
| #define HAVE_GETEUID 1
| #define HAVE_GETLINE 1
| #define HAVE_GETPID 1
| #define HAVE_GETGRGID_R 1
| #define HAVE_GETGRNAM_R 1
| #define HAVE_GETPWNAM_R 1
| #define HAVE_GETPWUID_R 1
| #define HAVE_GETVFSBYNAME 1
| #define HAVE_GMTIME_R 1
| #define HAVE_LCHFLAGS 1
| #define HAVE_LCHMOD 1
| #define HAVE_LCHOWN 1
| #define HAVE_LINK 1
| #define HAVE_LINKAT 1
| #define HAVE_LOCALTIME_R 1
| #define HAVE_LSTAT 1
| #define HAVE_LUTIMES 1
| #define HAVE_MBRTOWC 1
| #define HAVE_MEMMOVE 1
| #define HAVE_MEMSET 1
| #define HAVE_MKDIR 1
| #define HAVE_MKFIFO 1
| #define HAVE_MKNOD 1
| #define HAVE_MKSTEMP 1
| #define HAVE_NL_LANGINFO 1
| #define HAVE_OPENAT 1
| #define HAVE_PIPE 1
| #define HAVE_POLL 1
| #define HAVE_POSIX_SPAWNP 1
| #define HAVE_READLINK 1
| #define HAVE_READLINKAT 1
| #define HAVE_READPASSPHRASE 1
| #define HAVE_SELECT 1
| #define HAVE_SETENV 1
| #define HAVE_SETLOCALE 1
| #define HAVE_SIGACTION 1
| #define HAVE_STATFS 1
| #define HAVE_STATVFS 1
| #define HAVE_STRCHR 1
| #define HAVE_STRDUP 1
| #define HAVE_STRERROR 1
| #define HAVE_STRNLEN 1
| #define HAVE_STRRCHR 1
| #define HAVE_SYMLINK 1
| #define HAVE_TIMEGM 1
| #define HAVE_TZSET 1
| #define HAVE_UNLINKAT 1
| #define HAVE_UNSETENV 1
| #define HAVE_UTIME 1
| #define HAVE_UTIMENSAT 1
| #define HAVE_UTIMES 1
| #define HAVE_VFORK 1
| #define HAVE_WCRTOMB 1
| #define HAVE_WCSCMP 1
| #define HAVE_WCSCPY 1
| #define HAVE_WCSLEN 1
| #define HAVE_WCTOMB 1
| #define HAVE_WMEMCMP 1
| #define HAVE_WMEMCPY 1
| #define HAVE_WMEMMOVE 1
| #define HAVE_STRUCT_VFSCONF 1
| #define HAVE_STRUCT_STATFS 1
| #define HAVE_READDIR_R 1
| #define HAVE_DIRFD 1
| #define HAVE_D_MD_ORDER 1
| #define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
| #define HAVE_DECL_XATTR_NOFOLLOW 1
| #define HAVE_FGETXATTR 1
| #define HAVE_FLISTXATTR 1
| #define HAVE_FSETXATTR 1
| #define HAVE_GETXATTR 1
| #define HAVE_LISTXATTR 1
| #define HAVE_SETXATTR 1
| #define ARCHIVE_XATTR_DARWIN 1
| #define HAVE_ACL_T 1
| #define HAVE_ACL_ENTRY_T 1
| #define HAVE_ACL_PERMSET_T 1
| #define HAVE_ACL_TAG_T 1
| #define HAVE_ACL_ADD_PERM 1
| #define HAVE_ACL_CLEAR_PERMS 1
| #define HAVE_ACL_CREATE_ENTRY 1
| #define HAVE_ACL_DELETE_DEF_FILE 1
| #define HAVE_ACL_FREE 1
| #define HAVE_ACL_GET_ENTRY 1
| #define HAVE_ACL_GET_FD 1
| #define HAVE_ACL_GET_FILE 1
| #define HAVE_ACL_GET_PERMSET 1
| #define HAVE_ACL_GET_QUALIFIER 1
| #define HAVE_ACL_GET_TAG_TYPE 1
| #define HAVE_ACL_INIT 1
| #define HAVE_ACL_SET_FD 1
| #define HAVE_ACL_SET_FILE 1
| #define HAVE_ACL_SET_QUALIFIER 1
| #define HAVE_ACL_SET_TAG_TYPE 1
| #define HAVE_ACL_ADD_FLAG_NP 1
| #define HAVE_ACL_CLEAR_FLAGS_NP 1
| #define HAVE_ACL_GET_FLAG_NP 1
| #define HAVE_ACL_GET_FLAGSET_NP 1
| #define HAVE_ACL_GET_FD_NP 1
| #define HAVE_ACL_GET_LINK_NP 1
| #define HAVE_ACL_GET_PERM_NP 1
| #define HAVE_ACL_SET_FD_NP 1
| #define HAVE_ACL_SET_LINK_NP 1
| #define HAVE_MBR_UID_TO_UUID 1
| #define HAVE_MBR_UUID_TO_ID 1
| #define HAVE_MBR_GID_TO_UUID 1
| #define HAVE_DECL_ACL_TYPE_EXTENDED 1
| #define HAVE_DECL_ACL_TYPE_NFS4 0
| #define HAVE_DECL_ACL_USER 0
| #define HAVE_DECL_ACL_SYNCHRONIZE 1
| #define ARCHIVE_ACL_DARWIN 1
| #define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
| #define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM 1
| /* end confdefs.h.  */
| 
| #define ARCHIVE_RMD160_COMPILE_TEST
| #define ARCHIVE_CRYPTO_RMD160_LIBMD
| #define PLATFORM_CONFIG_H "check_crypto_md.h"
| 
| /*-
| * Copyright (c) 2003-2007 Tim Kientzle
| * Copyright (c) 2011 Andres Mejia
| * Copyright (c) 2011 Michihiro NAKAJIMA
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms, with or without
| * modification, are permitted provided that the following conditions
| * are met:
| * 1. Redistributions of source code must retain the above copyright
| *    notice, this list of conditions and the following disclaimer.
| * 2. Redistributions in binary form must reproduce the above copyright
| *    notice, this list of conditions and the following disclaimer in the
| *    documentation and/or other materials provided with the distribution.
| *
| * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
| * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
| * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
| * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
| * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
| * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
| * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
| * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
| */
| 
| #include "archive_platform.h"
| 
| #include "archive.h"
| #include "archive_digest_private.h"
| 
| /* In particular, force the configure probe to break if it tries
|  * to test a combination of OpenSSL and libmd. */
| #if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
| #error Cannot use both OpenSSL and libmd.
| #endif
| 
| /* Common in other bcrypt implementations, but missing from VS2008. */
| #ifndef BCRYPT_SUCCESS
| #define BCRYPT_SUCCESS(r) ((NTSTATUS)(r) == STATUS_SUCCESS)
| #endif
| 
| /*
|  * Message digest functions for Windows platform.
|  */
| #if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
| 	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
| 	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
| 	defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| /*
|  * Initialize a Message digest.
|  */
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| static int
| win_crypto_init(Digest_CTX *ctx, const WCHAR *algo)
| {
| 	NTSTATUS status;
| 	ctx->valid = 0;
| 
| 	status = BCryptOpenAlgorithmProvider(&ctx->hAlg, algo, NULL, 0);
| 	if (!BCRYPT_SUCCESS(status))
| 		return (ARCHIVE_FAILED);
| 	status = BCryptCreateHash(ctx->hAlg, &ctx->hHash, NULL, 0, NULL, 0, 0);
| 	if (!BCRYPT_SUCCESS(status)) {
| 		BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #else
| static int
| win_crypto_init(Digest_CTX *ctx, DWORD prov, ALG_ID algId)
| {
| 
| 	ctx->valid = 0;
| 	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 	    prov, CRYPT_VERIFYCONTEXT)) {
| 		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
| 			return (ARCHIVE_FAILED);
| 		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
| 		    prov, CRYPT_NEWKEYSET))
| 			return (ARCHIVE_FAILED);
| 	}
| 
| 	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
| 		CryptReleaseContext(ctx->cryptProv, 0);
| 		return (ARCHIVE_FAILED);
| 	}
| 
| 	ctx->valid = 1;
| 	return (ARCHIVE_OK);
| }
| #endif
| 
| /*
|  * Update a Message digest.
|  */
| static int
| win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
| {
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptHashData(ctx->hHash,
| 		      (PUCHAR)(uintptr_t)buf,
| 		      (ULONG)len, 0);
| #else
| 	CryptHashData(ctx->hash,
| 		      (unsigned char *)(uintptr_t)buf,
| 		      (DWORD)len, 0);
| #endif
| 	return (ARCHIVE_OK);
| }
| 
| static int
| win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
| {
| #if !(defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA)
| 	DWORD siglen = (DWORD)bufsize;
| #endif
| 
| 	if (!ctx->valid)
| 		return (ARCHIVE_FAILED);
| 
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
| 	BCryptFinishHash(ctx->hHash, buf, (ULONG)bufsize, 0);
| 	BCryptDestroyHash(ctx->hHash);
| 	BCryptCloseAlgorithmProvider(ctx->hAlg, 0);
| #else
| 	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
| 	CryptDestroyHash(ctx->hash);
| 	CryptReleaseContext(ctx->cryptProv, 0);
| #endif
| 	ctx->valid = 0;
| 	return (ARCHIVE_OK);
| }
| 
| #endif /* defined(ARCHIVE_CRYPTO_*_WIN) */
| 
| 
| /* MD5 implementations */
| #if defined(ARCHIVE_CRYPTO_MD5_LIBC)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   MD5Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   MD5Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   MD5Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   CC_MD5_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_MD5_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   CC_MD5_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_MBEDTLS)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   mbedtls_md5_init(ctx);
|   if (mbedtls_md5_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_md5_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   if (mbedtls_md5_finish_ret(ctx, md) == 0) {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_md5_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   md5_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   md5_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   md5_digest(ctx, MD5_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_md5()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_MD5_WIN)
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_MD5_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_MD5));
| #endif
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 16, ctx));
| }
| 
| #else
| 
| static int
| __archive_md5init(archive_md5_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5update(archive_md5_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_md5final(archive_md5_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* RIPEMD160 implementations */
| #if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RMD160Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RMD160Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RMD160Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   RIPEMD160_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   RIPEMD160_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   RIPEMD160_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_MBEDTLS)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   mbedtls_ripemd160_init(ctx);
|   if (mbedtls_ripemd160_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_ripemd160_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (mbedtls_ripemd160_finish_ret(ctx, md) == 0) {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_ripemd160_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   ripemd160_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   ripemd160_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_ripemd160()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #else
| 
| static int
| __archive_ripemd160init(archive_rmd160_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_ripemd160final(archive_rmd160_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA1 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   CC_SHA1_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA1_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   CC_SHA1_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_MBEDTLS)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   mbedtls_sha1_init(ctx);
|   if (mbedtls_sha1_starts_ret(ctx) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha1_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   if (mbedtls_sha1_finish_ret(ctx, md) == 0) {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha1_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   sha1_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha1_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha1()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
|    * this is meant to cope with that. Real fix is probably to fix
|    * archive_write_set_format_xar.c
|    */
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA1_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_FULL, CALG_SHA1));
| #endif
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 20, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha1init(archive_sha1_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1update(archive_sha1_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha1final(archive_sha1_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA256 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   CC_SHA256_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA256_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   CC_SHA256_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_MBEDTLS)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   mbedtls_sha256_init(ctx);
|   if (mbedtls_sha256_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha256_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (mbedtls_sha256_finish_ret(ctx, md) == 0) {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha256_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   sha256_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha256_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha256()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA256_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_256));
| #endif
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 32, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha256init(archive_sha256_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256update(archive_sha256_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha256final(archive_sha256_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA384 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   SHA384Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA384Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   SHA384Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   CC_SHA384_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA384_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   CC_SHA384_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_MBEDTLS)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 1) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   sha384_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha384_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha384()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA384_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_384));
| #endif
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 48, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha384init(archive_sha384_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384update(archive_sha384_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha384final(archive_sha384_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* SHA512 implementations */
| #if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   CC_SHA512_Init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   CC_SHA512_Update(ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   CC_SHA512_Final(md, ctx);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_MBEDTLS)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   mbedtls_sha512_init(ctx);
|   if (mbedtls_sha512_starts_ret(ctx, 0) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   if (mbedtls_sha512_update_ret(ctx, indata, insize) == 0)
|     return (ARCHIVE_OK);
|   else
|     return (ARCHIVE_FATAL);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (mbedtls_sha512_finish_ret(ctx, md) == 0) {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_OK);
|   } else {
|     mbedtls_sha512_free(ctx);
|     return (ARCHIVE_FATAL);
|   }
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   sha512_init(ctx);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   sha512_update(ctx, insize, indata);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
|   if ((*ctx = EVP_MD_CTX_new()) == NULL)
| 	return (ARCHIVE_FAILED);
|   if (!EVP_DigestInit(*ctx, EVP_sha512()))
| 	return (ARCHIVE_FAILED);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   EVP_DigestUpdate(*ctx, indata, insize);
|   return (ARCHIVE_OK);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   if (*ctx) {
|     EVP_DigestFinal(*ctx, md, NULL);
|     EVP_MD_CTX_free(*ctx);
|     *ctx = NULL;
|   }
|   return (ARCHIVE_OK);
| }
| 
| #elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| #if defined(HAVE_BCRYPT_H) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
|   return (win_crypto_init(ctx, BCRYPT_SHA512_ALGORITHM));
| #else
|   return (win_crypto_init(ctx, PROV_RSA_AES, CALG_SHA_512));
| #endif
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
|   return (win_crypto_Update(ctx, indata, insize));
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
|   return (win_crypto_Final(md, 64, ctx));
| }
| 
| #else
| 
| static int
| __archive_sha512init(archive_sha512_ctx *ctx)
| {
| 	(void)ctx; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512update(archive_sha512_ctx *ctx, const void *indata,
|     size_t insize)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)indata; /* UNUSED */
| 	(void)insize; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| static int
| __archive_sha512final(archive_sha512_ctx *ctx, void *md)
| {
| 	(void)ctx; /* UNUSED */
| 	(void)md; /* UNUSED */
| 	return (ARCHIVE_FAILED);
| }
| 
| #endif
| 
| /* NOTE: Message Digest functions are set based on availability and by the
|  * following order of preference.
|  * 1. libc
|  * 2. libc2
|  * 3. libc3
|  * 4. libSystem
|  * 5. Nettle
|  * 6. OpenSSL
|  * 7. libmd
|  * 8. Windows API
|  */
| const struct archive_digest __archive_digest =
| {
| /* MD5 */
|   &__archive_md5init,
|   &__archive_md5update,
|   &__archive_md5final,
| 
| /* RIPEMD160 */
|   &__archive_ripemd160init,
|   &__archive_ripemd160update,
|   &__archive_ripemd160final,
| 
| /* SHA1 */
|   &__archive_sha1init,
|   &__archive_sha1update,
|   &__archive_sha1final,
| 
| /* SHA256 */
|   &__archive_sha256init,
|   &__archive_sha256update,
|   &__archive_sha256final,
| 
| /* SHA384 */
|   &__archive_sha384init,
|   &__archive_sha384update,
|   &__archive_sha384final,
| 
| /* SHA512 */
|   &__archive_sha512init,
|   &__archive_sha512update,
|   &__archive_sha512final
| };
| 
| int
| main(int argc, char **argv)
| {
|   archive_rmd160_ctx ctx;
|   archive_rmd160_init(&ctx);
|   archive_rmd160_update(&ctx, *argv, argc);
|   archive_rmd160_final(&ctx, NULL);
|   return 0;
| }
| 
configure:24036: result: no
configure:24401: checking whether compiler supports visibility annotations
configure:24416: gcc -o conftest -g -O2 -Wall -Wformat -Wformat-security -fvisibility=hidden -Werror    conftest.c -llzma -lbz2 -lz  -lxml2 >&5
configure:24416: $? = 0
configure:24419: result: yes
configure:24543: checking that generated files are newer than configure
configure:24549: result: done
configure:24642: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by libarchive config.status 3.7.3, which was
generated by GNU Autoconf 2.72.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on MacBook-Air-M2-de-Yohann.local

config.status:1388: creating Makefile
config.status:1388: creating build/pkgconfig/libarchive.pc
config.status:1388: creating config.h
config.status:1617: executing depfiles commands
config.status:1694: cd .       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
config.status:1699: $? = 0
config.status:1617: executing libtool commands
config.status:1617: executing mkdirs commands

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_archive_acl_darwin=yes
ac_cv_archive_xattr_darwin=yes
ac_cv_build=aarch64-apple-darwin23.4.0
ac_cv_c_compiler_gnu=yes
ac_cv_c_const=yes
ac_cv_c_int16_t=yes
ac_cv_c_int32_t=yes
ac_cv_c_int64_t=yes
ac_cv_c_uint16_t=yes
ac_cv_c_uint32_t=yes
ac_cv_c_uint64_t=yes
ac_cv_c_uint8_t=yes
ac_cv_c_undeclared_builtin_options='none needed'
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_LIBXML2_PC_CFLAGS_set=
ac_cv_env_LIBXML2_PC_CFLAGS_value=
ac_cv_env_LIBXML2_PC_LIBS_set=
ac_cv_env_LIBXML2_PC_LIBS_value=
ac_cv_env_LT_SYS_LIBRARY_PATH_set=
ac_cv_env_LT_SYS_LIBRARY_PATH_value=
ac_cv_env_PKG_CONFIG_LIBDIR_set=
ac_cv_env_PKG_CONFIG_LIBDIR_value=
ac_cv_env_PKG_CONFIG_PATH_set=
ac_cv_env_PKG_CONFIG_PATH_value=
ac_cv_env_PKG_CONFIG_set=
ac_cv_env_PKG_CONFIG_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_func_CreateHardLinkA=no
ac_cv_func__fseeki64=no
ac_cv_func__get_timezone=no
ac_cv_func_acl=no
ac_cv_func_acl_add_flag_np=yes
ac_cv_func_acl_add_perm=yes
ac_cv_func_acl_clear_flags_np=yes
ac_cv_func_acl_clear_perms=yes
ac_cv_func_acl_create_entry=yes
ac_cv_func_acl_delete_def_file=yes
ac_cv_func_acl_free=yes
ac_cv_func_acl_get_brand_np=no
ac_cv_func_acl_get_entry=yes
ac_cv_func_acl_get_entry_type_np=no
ac_cv_func_acl_get_fd=yes
ac_cv_func_acl_get_fd_np=yes
ac_cv_func_acl_get_file=yes
ac_cv_func_acl_get_flag_np=yes
ac_cv_func_acl_get_flagset_np=yes
ac_cv_func_acl_get_link_np=yes
ac_cv_func_acl_get_perm=no
ac_cv_func_acl_get_perm_np=yes
ac_cv_func_acl_get_permset=yes
ac_cv_func_acl_get_qualifier=yes
ac_cv_func_acl_get_tag_type=yes
ac_cv_func_acl_init=yes
ac_cv_func_acl_is_trivial_np=no
ac_cv_func_acl_set_entry_type_np=no
ac_cv_func_acl_set_fd=yes
ac_cv_func_acl_set_fd_np=yes
ac_cv_func_acl_set_file=yes
ac_cv_func_acl_set_link_np=yes
ac_cv_func_acl_set_qualifier=yes
ac_cv_func_acl_set_tag_type=yes
ac_cv_func_arc4random_buf=yes
ac_cv_func_chflags=yes
ac_cv_func_chown=yes
ac_cv_func_chroot=yes
ac_cv_func_ctime_r=yes
ac_cv_func_cygwin_conv_path=no
ac_cv_func_facl=no
ac_cv_func_fchdir=yes
ac_cv_func_fchflags=yes
ac_cv_func_fchmod=yes
ac_cv_func_fchown=yes
ac_cv_func_fcntl=yes
ac_cv_func_fdopendir=yes
ac_cv_func_fgetxattr=yes
ac_cv_func_flistxattr=yes
ac_cv_func_fnmatch=yes
ac_cv_func_fork=yes
ac_cv_func_fseeko_ftello=yes
ac_cv_func_fsetxattr=yes
ac_cv_func_fstat=yes
ac_cv_func_fstatat=yes
ac_cv_func_fstatfs=yes
ac_cv_func_fstatvfs=yes
ac_cv_func_ftruncate=yes
ac_cv_func_futimens=yes
ac_cv_func_futimes=yes
ac_cv_func_futimesat=no
ac_cv_func_geteuid=yes
ac_cv_func_getgrgid_r=yes
ac_cv_func_getgrnam_r=yes
ac_cv_func_getline=yes
ac_cv_func_getpid=yes
ac_cv_func_getpwnam_r=yes
ac_cv_func_getpwuid_r=yes
ac_cv_func_getvfsbyname=yes
ac_cv_func_getxattr=yes
ac_cv_func_gmtime_r=yes
ac_cv_func_lchflags=yes
ac_cv_func_lchmod=yes
ac_cv_func_lchown=yes
ac_cv_func_link=yes
ac_cv_func_linkat=yes
ac_cv_func_listxattr=yes
ac_cv_func_locale_charset=yes
ac_cv_func_localtime_r=yes
ac_cv_func_lstat=yes
ac_cv_func_lstat_dereferences_slashed_symlink=no
ac_cv_func_lstat_empty_string_bug=no
ac_cv_func_lutimes=yes
ac_cv_func_mbr_gid_to_uuid=yes
ac_cv_func_mbr_uid_to_uuid=yes
ac_cv_func_mbr_uuid_to_id=yes
ac_cv_func_mbrtowc=yes
ac_cv_func_memcmp_working=yes
ac_cv_func_memmove=yes
ac_cv_func_memset=yes
ac_cv_func_mkdir=yes
ac_cv_func_mkfifo=yes
ac_cv_func_mknod=yes
ac_cv_func_mkstemp=yes
ac_cv_func_nl_langinfo=yes
ac_cv_func_openat=yes
ac_cv_func_pipe=yes
ac_cv_func_poll=yes
ac_cv_func_posix_spawnp=yes
ac_cv_func_readlink=yes
ac_cv_func_readlinkat=yes
ac_cv_func_readpassphrase=yes
ac_cv_func_regcomp=yes
ac_cv_func_select=yes
ac_cv_func_setenv=yes
ac_cv_func_setlocale=yes
ac_cv_func_setxattr=yes
ac_cv_func_sigaction=yes
ac_cv_func_stat_empty_string_bug=no
ac_cv_func_statfs=yes
ac_cv_func_statvfs=yes
ac_cv_func_strchr=yes
ac_cv_func_strdup=yes
ac_cv_func_strerror=yes
ac_cv_func_strerror_r_char_p=no
ac_cv_func_strftime=yes
ac_cv_func_strncpy_s=no
ac_cv_func_strnlen=yes
ac_cv_func_strrchr=yes
ac_cv_func_symlink=yes
ac_cv_func_timegm=yes
ac_cv_func_tzset=yes
ac_cv_func_unlinkat=yes
ac_cv_func_unsetenv=yes
ac_cv_func_utime=yes
ac_cv_func_utimensat=yes
ac_cv_func_utimes=yes
ac_cv_func_vfork=yes
ac_cv_func_vprintf=yes
ac_cv_func_wcrtomb=yes
ac_cv_func_wcscmp=yes
ac_cv_func_wcscpy=yes
ac_cv_func_wcslen=yes
ac_cv_func_wctomb=yes
ac_cv_func_wmemcmp=yes
ac_cv_func_wmemcpy=yes
ac_cv_func_wmemmove=yes
ac_cv_have_decl_ACL_SYNCHRONIZE=yes
ac_cv_have_decl_ACL_TYPE_EXTENDED=yes
ac_cv_have_decl_ACL_TYPE_NFS4=no
ac_cv_have_decl_ACL_USER=no
ac_cv_have_decl_D_MD_ORDER=yes
ac_cv_have_decl_EFTYPE=yes
ac_cv_have_decl_EILSEQ=yes
ac_cv_have_decl_EXT2_IOC_GETFLAGS=no
ac_cv_have_decl_EXTATTR_NAMESPACE_USER=no
ac_cv_have_decl_FS_IOC_GETFLAGS=no
ac_cv_have_decl_INT32_MAX=yes
ac_cv_have_decl_INT32_MIN=yes
ac_cv_have_decl_INT64_MAX=yes
ac_cv_have_decl_INT64_MIN=yes
ac_cv_have_decl_INTMAX_MAX=yes
ac_cv_have_decl_INTMAX_MIN=yes
ac_cv_have_decl_SIZE_MAX=yes
ac_cv_have_decl_SSIZE_MAX=yes
ac_cv_have_decl_UINT32_MAX=yes
ac_cv_have_decl_UINT64_MAX=yes
ac_cv_have_decl_UINTMAX_MAX=yes
ac_cv_have_decl_XATTR_NOFOLLOW=yes
ac_cv_have_decl__mkgmtime=no
ac_cv_have_decl_cmtime_s=no
ac_cv_have_decl_gmtime_s=no
ac_cv_have_decl_strerror_r=yes
ac_cv_header_acl_libacl_h=no
ac_cv_header_attr_xattr_h=no
ac_cv_header_bcrypt_h=no
ac_cv_header_blake2_h=no
ac_cv_header_bzlib_h=yes
ac_cv_header_copyfile_h=yes
ac_cv_header_ctype_h=yes
ac_cv_header_dirent_dirent_h=yes
ac_cv_header_dlfcn_h=yes
ac_cv_header_errno_h=yes
ac_cv_header_ext2fs_ext2_fs_h=no
ac_cv_header_fcntl_h=yes
ac_cv_header_fnmatch_h=yes
ac_cv_header_grp_h=yes
ac_cv_header_iconv_h=yes
ac_cv_header_inttypes_h=yes
ac_cv_header_io_h=no
ac_cv_header_langinfo_h=yes
ac_cv_header_libxml_xmlreader_h=yes
ac_cv_header_libxml_xmlwriter_h=yes
ac_cv_header_limits_h=yes
ac_cv_header_linux_fiemap_h=no
ac_cv_header_linux_fs_h=no
ac_cv_header_linux_magic_h=no
ac_cv_header_linux_types_h=no
ac_cv_header_localcharset_h=yes
ac_cv_header_locale_h=yes
ac_cv_header_lz4_h=no
ac_cv_header_lz4hc_h=no
ac_cv_header_lzma_h=no
ac_cv_header_md5_h=no
ac_cv_header_membership_h=yes
ac_cv_header_minix_config_h=no
ac_cv_header_paths_h=yes
ac_cv_header_poll_h=yes
ac_cv_header_pthread_h=yes
ac_cv_header_pwd_h=yes
ac_cv_header_readpassphrase_h=yes
ac_cv_header_regex_h=yes
ac_cv_header_ripemd_h=no
ac_cv_header_sha256_h=no
ac_cv_header_sha512_h=no
ac_cv_header_sha_h=no
ac_cv_header_signal_h=yes
ac_cv_header_spawn_h=yes
ac_cv_header_stdarg_h=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdio_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_sys_acl_h=yes
ac_cv_header_sys_cdefs_h=yes
ac_cv_header_sys_ea_h=no
ac_cv_header_sys_extattr_h=no
ac_cv_header_sys_ioctl_h=yes
ac_cv_header_sys_mkdev_h=no
ac_cv_header_sys_mount_h=yes
ac_cv_header_sys_param_h=yes
ac_cv_header_sys_poll_h=yes
ac_cv_header_sys_queue_h=yes
ac_cv_header_sys_richacl_h=no
ac_cv_header_sys_select_h=yes
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_statfs_h=no
ac_cv_header_sys_statvfs_h=yes
ac_cv_header_sys_sysmacros_h=no
ac_cv_header_sys_time_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_sys_utime_h=no
ac_cv_header_sys_utsname_h=yes
ac_cv_header_sys_vfs_h=no
ac_cv_header_sys_wait_h=yes
ac_cv_header_sys_xattr_h=yes
ac_cv_header_time_h=yes
ac_cv_header_unistd_h=yes
ac_cv_header_utime_h=yes
ac_cv_header_wchar_h=yes
ac_cv_header_wctype_h=yes
ac_cv_header_wincrypt_h=no
ac_cv_header_windows_h=no
ac_cv_header_winioctl_h=no
ac_cv_header_zlib_h=yes
ac_cv_header_zstd_h=no
ac_cv_host=aarch64-apple-darwin23.4.0
ac_cv_lib_acl_acl_get_file=no
ac_cv_lib_b2_blake2sp_init=no
ac_cv_lib_bz2_BZ2_bzDecompressInit=yes
ac_cv_lib_lz4_LZ4_decompress_safe=no
ac_cv_lib_lzma_lzma_stream_decoder=yes
ac_cv_lib_md_MD5Init=no
ac_cv_lib_richacl_richacl_get_file=no
ac_cv_lib_xml2_xmlInitParser=yes
ac_cv_lib_z_inflate=yes
ac_cv_lib_zstd_ZSTD_compressStream=no
ac_cv_lib_zstd_ZSTD_decompressStream=no
ac_cv_lzma_has_arm64=no
ac_cv_lzma_has_mt=no
ac_cv_member_struct_dirent_d_namlen=yes
ac_cv_member_struct_stat_st_birthtime=yes
ac_cv_member_struct_stat_st_birthtimespec_tv_nsec=yes
ac_cv_member_struct_stat_st_blksize=yes
ac_cv_member_struct_stat_st_flags=yes
ac_cv_member_struct_stat_st_mtim_tv_nsec=no
ac_cv_member_struct_stat_st_mtime_n=no
ac_cv_member_struct_stat_st_mtime_usec=no
ac_cv_member_struct_stat_st_mtimespec_tv_nsec=yes
ac_cv_member_struct_stat_st_umtime=no
ac_cv_member_struct_statfs_f_iosize=yes
ac_cv_member_struct_statfs_f_namemax=no
ac_cv_member_struct_statvfs_f_iosize=no
ac_cv_member_struct_tm___tm_gmtoff=no
ac_cv_member_struct_tm_tm_gmtoff=yes
ac_cv_objext=o
ac_cv_path_EGREP='/usr/bin/grep -E'
ac_cv_path_EGREP_TRADITIONAL='/usr/bin/grep -E'
ac_cv_path_FGREP='/usr/bin/grep -F'
ac_cv_path_GREP=/usr/bin/grep
ac_cv_path_SED=/usr/bin/sed
ac_cv_path_ac_pt_PKG_CONFIG=/opt/homebrew/bin/pkg-config
ac_cv_path_install='/usr/bin/install -c'
ac_cv_path_lt_DD=/bin/dd
ac_cv_posix_acl_funcs=yes
ac_cv_prog_AWK=awk
ac_cv_prog_CPP='gcc -E'
ac_cv_prog_ac_ct_AR=ar
ac_cv_prog_ac_ct_CC=gcc
ac_cv_prog_ac_ct_DLLTOOL=dlltool
ac_cv_prog_ac_ct_DSYMUTIL=dsymutil
ac_cv_prog_ac_ct_FILECMD=file
ac_cv_prog_ac_ct_LIPO=lipo
ac_cv_prog_ac_ct_NMEDIT=nmedit
ac_cv_prog_ac_ct_OBJDUMP=objdump
ac_cv_prog_ac_ct_OTOOL=otool
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_ac_ct_STRIP=strip
ac_cv_prog_cc_c11=
ac_cv_prog_cc_g=yes
ac_cv_prog_cc_stdc=
ac_cv_prog_make_make_set=yes
ac_cv_safe_to_define___extensions__=yes
ac_cv_search_opendir='none required'
ac_cv_search_setxattr='none required'
ac_cv_should_define__xopen_source=no
ac_cv_sizeof_int=4
ac_cv_sizeof_long=8
ac_cv_sizeof_wchar_t=4
ac_cv_sys_largefile_opts='none needed'
ac_cv_type_acl_entry_t=yes
ac_cv_type_acl_permset_t=yes
ac_cv_type_acl_t=yes
ac_cv_type_acl_tag_t=yes
ac_cv_type_id_t=yes
ac_cv_type_intmax_t=yes
ac_cv_type_localtime_s=no
ac_cv_type_long_long_int=yes
ac_cv_type_mode_t=yes
ac_cv_type_off_t=yes
ac_cv_type_size_t=yes
ac_cv_type_struct_richace=no
ac_cv_type_struct_richacl=no
ac_cv_type_struct_statfs=yes
ac_cv_type_struct_vfsconf=yes
ac_cv_type_struct_xvfsconf=no
ac_cv_type_uintmax_t=yes
ac_cv_type_uintptr_t=yes
ac_cv_type_unsigned_long_long=yes
ac_cv_type_unsigned_long_long_int=yes
ac_cv_type_wchar_t=yes
acl_cv_hardcode_direct=no
acl_cv_hardcode_libdir_flag_spec=
acl_cv_hardcode_libdir_separator=
acl_cv_hardcode_minus_L=no
acl_cv_libext=a
acl_cv_libname_spec='lib$name'
acl_cv_library_names_spec='$libname$shrext'
acl_cv_path_LD=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld
acl_cv_prog_gnu_ld=no
acl_cv_rpath=done
acl_cv_shlibext=dylib
acl_cv_wl=-Wl,
am_cv_CC_dependencies_compiler_type=gcc3
am_cv_func_iconv=yes
am_cv_func_iconv_works=yes
am_cv_lib_iconv=yes
am_cv_make_support_nested_variables=yes
am_cv_prog_cc_c_o=yes
am_cv_proto_iconv='extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);'
am_cv_proto_iconv_arg1=
ax_cv_check_cflags___Wall=yes
ax_cv_check_cflags___Wformat=yes
ax_cv_check_cflags___Wformat_security=yes
la_cv_type_uid_t=yes
lt_cv_apple_cc_single_mod=no
lt_cv_ar_at_file=no
lt_cv_deplibs_check_method=pass_all
lt_cv_file_magic_cmd='$MAGIC_CMD'
lt_cv_file_magic_test_file=
lt_cv_ld_exported_symbols_list=yes
lt_cv_ld_force_load=yes
lt_cv_ld_reload_flag=-r
lt_cv_nm_interface='BSD nm'
lt_cv_objdir=.libs
lt_cv_path_LD=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld
lt_cv_path_NM='/usr/bin/nm -B'
lt_cv_path_mainfest_tool=no
lt_cv_prog_compiler_c_o=yes
lt_cv_prog_compiler_pic='-fno-common -DPIC'
lt_cv_prog_compiler_pic_works=yes
lt_cv_prog_compiler_rtti_exceptions=yes
lt_cv_prog_compiler_static_works=no
lt_cv_prog_gnu_ld=no
lt_cv_sharedlib_from_linklib_cmd='printf %s\n'
lt_cv_sys_global_symbol_pipe='/usr/bin/sed -n -e '\''s/^.*[	 ]\([ABCDGIRSTW][ABCDGIRSTW]*\)[	 ][	 ]*_\([_A-Za-z][_A-Za-z0-9]*\)$/\1 _\2 \2/p'\'' | /usr/bin/sed '\''/ __gnu_lto/d'\'''
lt_cv_sys_global_symbol_to_c_name_address='/usr/bin/sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/  {"\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='/usr/bin/sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(lib.*\)$/  {"\1", (void *) \&\1},/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/  {"lib\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_cdecl='/usr/bin/sed -n -e '\''s/^T .* \(.*\)$/extern int \1();/p'\'' -e '\''s/^[ABCDGIRSTW][ABCDGIRSTW]* .* \(.*\)$/extern char \1;/p'\'''
lt_cv_sys_global_symbol_to_import=
lt_cv_sys_max_cmd_len=786432
lt_cv_to_host_file_cmd=func_convert_file_noop
lt_cv_to_tool_file_cmd=func_convert_file_noop
lt_cv_truncate_bin='/bin/dd bs=4096 count=1'
pkg_cv_LIBXML2_PC_CFLAGS=
pkg_cv_LIBXML2_PC_LIBS=-lxml2

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} '\''/Users/yoyofr/Downloads/libarchive-master/build/autoconf/missing'\'' aclocal-1.16'
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='$${TAR-tar}'
AM_BACKSLASH='\'
AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
AM_DEFAULT_VERBOSITY='0'
AM_V='$(V)'
AR='ar'
ARCHIVE_LIBTOOL_VERSION='20:3:7'
AS='as'
AUTOCONF='${SHELL} '\''/Users/yoyofr/Downloads/libarchive-master/build/autoconf/missing'\'' autoconf'
AUTOHEADER='${SHELL} '\''/Users/yoyofr/Downloads/libarchive-master/build/autoconf/missing'\'' autoheader'
AUTOMAKE='${SHELL} '\''/Users/yoyofr/Downloads/libarchive-master/build/autoconf/missing'\'' automake-1.16'
AWK='awk'
BSDCAT_VERSION_STRING='3.7.3'
BSDCPIO_VERSION_STRING='3.7.3'
BSDTAR_VERSION_STRING='3.7.3'
BSDUNZIP_VERSION_STRING='3.7.3'
BUILD_BSDCAT_FALSE='#'
BUILD_BSDCAT_TRUE=''
BUILD_BSDCPIO_FALSE='#'
BUILD_BSDCPIO_TRUE=''
BUILD_BSDTAR_FALSE='#'
BUILD_BSDTAR_TRUE=''
BUILD_BSDUNZIP_FALSE='#'
BUILD_BSDUNZIP_TRUE=''
CC='gcc'
CCDEPMODE='depmode=gcc3'
CFLAGS='-g -O2 -Wall -Wformat -Wformat-security -fvisibility=hidden -D__LIBARCHIVE_ENABLE_VISIBILITY'
CPP='gcc -E'
CPPFLAGS=' '
CSCOPE='cscope'
CTAGS='ctags'
CYGPATH_W='echo'
DEAD_CODE_REMOVAL='-Wl,-dead_strip'
DEFS='-DHAVE_CONFIG_H'
DEPDIR='.deps'
DLLTOOL='dlltool'
DSYMUTIL='dsymutil'
DUMPBIN=''
ECHO_C='\c'
ECHO_N=''
ECHO_T=''
EGREP='/usr/bin/grep -E'
ETAGS='etags'
EXEEXT=''
FGREP='/usr/bin/grep -F'
FILECMD='file'
GREP='/usr/bin/grep'
INC_BLAKE2_FALSE='#'
INC_BLAKE2_TRUE=''
INC_CYGWIN_FILES_FALSE=''
INC_CYGWIN_FILES_TRUE='#'
INC_DARWIN_ACL_FALSE='#'
INC_DARWIN_ACL_TRUE=''
INC_FREEBSD_ACL_FALSE=''
INC_FREEBSD_ACL_TRUE='#'
INC_LINUX_ACL_FALSE=''
INC_LINUX_ACL_TRUE='#'
INC_SUNOS_ACL_FALSE=''
INC_SUNOS_ACL_TRUE='#'
INC_WINDOWS_FILES_FALSE=''
INC_WINDOWS_FILES_TRUE='#'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
LD='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld'
LDFLAGS=''
LIBARCHIVE_VERSION_NUMBER='3007003'
LIBARCHIVE_VERSION_STRING='3.7.3'
LIBICONV='-liconv'
LIBOBJS=' ${LIBOBJDIR}lstat$U.o'
LIBS='-llzma -lbz2 -lz  -lxml2'
LIBSREQUIRED='iconv'
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
LIBXML2_PC_CFLAGS=''
LIBXML2_PC_LIBS='-lxml2'
LIPO='lipo'
LN_S='ln -s'
LTLIBICONV='-liconv'
LTLIBOBJS=' ${LIBOBJDIR}lstat$U.lo'
LT_SYS_LIBRARY_PATH=''
MAINT=''
MAINTAINER_MODE_FALSE='#'
MAINTAINER_MODE_TRUE=''
MAKEINFO='${SHELL} '\''/Users/yoyofr/Downloads/libarchive-master/build/autoconf/missing'\'' makeinfo'
MANIFEST_TOOL=':'
MKDIR_P='mkdir -p'
NM='/usr/bin/nm -B'
NMEDIT='nmedit'
OBJDUMP='objdump'
OBJEXT='o'
OTOOL64=':'
OTOOL='otool'
PACKAGE='libarchive'
PACKAGE_BUGREPORT='libarchive-discuss@googlegroups.com'
PACKAGE_NAME='libarchive'
PACKAGE_STRING='libarchive 3.7.3'
PACKAGE_TARNAME='libarchive'
PACKAGE_URL=''
PACKAGE_VERSION='3.7.3'
PATH_SEPARATOR=':'
PKG_CONFIG='/opt/homebrew/bin/pkg-config'
PKG_CONFIG_LIBDIR=''
PKG_CONFIG_PATH=''
PLATFORMCPPFLAGS=''
RANLIB='ranlib'
SED='/usr/bin/sed'
SET_MAKE=''
SHELL='/bin/sh'
STATIC_BSDCAT_FALSE='#'
STATIC_BSDCAT_TRUE=''
STATIC_BSDCPIO_FALSE='#'
STATIC_BSDCPIO_TRUE=''
STATIC_BSDTAR_FALSE='#'
STATIC_BSDTAR_TRUE=''
STATIC_BSDUNZIP_FALSE='#'
STATIC_BSDUNZIP_TRUE=''
STRIP='strip'
VERSION='3.7.3'
ac_ct_AR='ar'
ac_ct_CC='gcc'
ac_ct_DUMPBIN=''
am__EXEEXT_FALSE=''
am__EXEEXT_TRUE='#'
am__fastdepCC_FALSE='#'
am__fastdepCC_TRUE=''
am__include='include'
am__isrc=''
am__leading_dot='.'
am__nodep='_no'
am__quote=''
am__tar='$${TAR-tar} chof - "$$tardir"'
am__untar='$${TAR-tar} xf -'
bindir='${exec_prefix}/bin'
build='aarch64-apple-darwin23.4.0'
build_alias=''
build_cpu='aarch64'
build_os='darwin23.4.0'
build_vendor='apple'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host='aarch64-apple-darwin23.4.0'
host_alias=''
host_cpu='aarch64'
host_os='darwin23.4.0'
host_vendor='apple'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='${SHELL} /Users/yoyofr/Downloads/libarchive-master/build/autoconf/install-sh'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mkdir_p='$(MKDIR_P)'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/usr/local'
program_transform_name='s,x,x,'
psdir='${docdir}'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "libarchive"
#define PACKAGE_TARNAME "libarchive"
#define PACKAGE_VERSION "3.7.3"
#define PACKAGE_STRING "libarchive 3.7.3"
#define PACKAGE_BUGREPORT "libarchive-discuss@googlegroups.com"
#define PACKAGE_URL ""
#define PACKAGE "libarchive"
#define VERSION "3.7.3"
#define __LIBARCHIVE_CONFIG_H_INCLUDED 1
#define LIBARCHIVE_VERSION_STRING "3.7.3"
#define LIBARCHIVE_VERSION_NUMBER "3007003"
#define BSDCPIO_VERSION_STRING "3.7.3"
#define BSDTAR_VERSION_STRING "3.7.3"
#define BSDCAT_VERSION_STRING "3.7.3"
#define BSDUNZIP_VERSION_STRING "3.7.3"
#define HAVE_STDIO_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_STRINGS_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_UNISTD_H 1
#define HAVE_WCHAR_H 1
#define HAVE_SYS_TIME_H 1
#define STDC_HEADERS 1
#define _ALL_SOURCE 1
#define _DARWIN_C_SOURCE 1
#define _GNU_SOURCE 1
#define _HPUX_ALT_XOPEN_SOCKET_API 1
#define _NETBSD_SOURCE 1
#define _OPENBSD_SOURCE 1
#define _POSIX_PTHREAD_SEMANTICS 1
#define __STDC_WANT_IEC_60559_ATTRIBS_EXT__ 1
#define __STDC_WANT_IEC_60559_BFP_EXT__ 1
#define __STDC_WANT_IEC_60559_DFP_EXT__ 1
#define __STDC_WANT_IEC_60559_EXT__ 1
#define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1
#define __STDC_WANT_IEC_60559_TYPES_EXT__ 1
#define __STDC_WANT_LIB_EXT2__ 1
#define __STDC_WANT_MATH_SPEC_FUNCS__ 1
#define _TANDEM_SOURCE 1
#define __EXTENSIONS__ 1
#define HAVE_DLFCN_H 1
#define LT_OBJDIR ".libs/"
#define HAVE_DIRENT_H 1
#define HAVE_SYS_WAIT_H 1
#define HAVE_COPYFILE_H 1
#define HAVE_CTYPE_H 1
#define HAVE_ERRNO_H 1
#define HAVE_FCNTL_H 1
#define HAVE_FNMATCH_H 1
#define HAVE_GRP_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_LANGINFO_H 1
#define HAVE_LIMITS_H 1
#define HAVE_LOCALE_H 1
#define HAVE_MEMBERSHIP_H 1
#define HAVE_PATHS_H 1
#define HAVE_POLL_H 1
#define HAVE_PTHREAD_H 1
#define HAVE_PWD_H 1
#define HAVE_READPASSPHRASE_H 1
#define HAVE_SIGNAL_H 1
#define HAVE_SPAWN_H 1
#define HAVE_STDARG_H 1
#define HAVE_STDINT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_SYS_ACL_H 1
#define HAVE_SYS_CDEFS_H 1
#define HAVE_SYS_IOCTL_H 1
#define HAVE_SYS_MOUNT_H 1
#define HAVE_SYS_QUEUE_H 1
#define HAVE_SYS_PARAM_H 1
#define HAVE_SYS_POLL_H 1
#define HAVE_SYS_SELECT_H 1
#define HAVE_SYS_STATVFS_H 1
#define HAVE_SYS_TIME_H 1
#define HAVE_SYS_UTSNAME_H 1
#define HAVE_SYS_XATTR_H 1
#define HAVE_TIME_H 1
#define HAVE_UNISTD_H 1
#define HAVE_UTIME_H 1
#define HAVE_WCHAR_H 1
#define HAVE_WCTYPE_H 1
#define HAVE_ZLIB_H 1
#define HAVE_LIBZ 1
#define HAVE_BZLIB_H 1
#define HAVE_LIBBZ2 1
#define HAVE_ICONV 1
#define ICONV_CONST 
#define HAVE_ICONV_H 1
#define HAVE_LOCALCHARSET_H 1
#define HAVE_LOCALE_CHARSET 1
#define HAVE_LIBLZMA 1
#define HAVE_LIBXML_XMLREADER_H 1
#define HAVE_LIBXML_XMLWRITER_H 1
#define HAVE_REGEX_H 1
#define HAVE_STRUCT_TM_TM_GMTOFF 1
#define HAVE_STRUCT_STATFS_F_IOSIZE 1
#define HAVE_STRUCT_STAT_ST_BIRTHTIME 1
#define HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC 1
#define HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC 1
#define HAVE_STRUCT_STAT_ST_BLKSIZE 1
#define HAVE_STRUCT_STAT_ST_FLAGS 1
#define HAVE_UINTMAX_T 1
#define HAVE_UNSIGNED_LONG_LONG 1
#define HAVE_UNSIGNED_LONG_LONG_INT 1
#define HAVE_LONG_LONG_INT 1
#define HAVE_INTMAX_T 1
#define HAVE_UINTMAX_T 1
#define HAVE_DECL_SIZE_MAX 1
#define HAVE_DECL_INT32_MAX 1
#define HAVE_DECL_INT32_MIN 1
#define HAVE_DECL_INT64_MAX 1
#define HAVE_DECL_INT64_MIN 1
#define HAVE_DECL_UINT64_MAX 1
#define HAVE_DECL_UINT32_MAX 1
#define HAVE_DECL_INTMAX_MAX 1
#define HAVE_DECL_INTMAX_MIN 1
#define HAVE_DECL_UINTMAX_MAX 1
#define HAVE_DECL_SSIZE_MAX 1
#define HAVE_EFTYPE 1
#define HAVE_EILSEQ 1
#define HAVE_WCHAR_T 1
#define SIZEOF_WCHAR_T 4
#define SIZEOF_INT 4
#define SIZEOF_LONG 8
#define HAVE_FSEEKO 1
#define HAVE_DECL_STRERROR_R 1
#define HAVE_STRERROR_R 1
#define HAVE_STRFTIME 1
#define HAVE_VPRINTF 1
#define HAVE_ARC4RANDOM_BUF 1
#define HAVE_CHFLAGS 1
#define HAVE_CHOWN 1
#define HAVE_CHROOT 1
#define HAVE_CTIME_R 1
#define HAVE_FCHDIR 1
#define HAVE_FCHFLAGS 1
#define HAVE_FCHMOD 1
#define HAVE_FCHOWN 1
#define HAVE_FCNTL 1
#define HAVE_FDOPENDIR 1
#define HAVE_FNMATCH 1
#define HAVE_FORK 1
#define HAVE_FSTAT 1
#define HAVE_FSTATAT 1
#define HAVE_FSTATFS 1
#define HAVE_FSTATVFS 1
#define HAVE_FTRUNCATE 1
#define HAVE_FUTIMENS 1
#define HAVE_FUTIMES 1
#define HAVE_GETEUID 1
#define HAVE_GETLINE 1
#define HAVE_GETPID 1
#define HAVE_GETGRGID_R 1
#define HAVE_GETGRNAM_R 1
#define HAVE_GETPWNAM_R 1
#define HAVE_GETPWUID_R 1
#define HAVE_GETVFSBYNAME 1
#define HAVE_GMTIME_R 1
#define HAVE_LCHFLAGS 1
#define HAVE_LCHMOD 1
#define HAVE_LCHOWN 1
#define HAVE_LINK 1
#define HAVE_LINKAT 1
#define HAVE_LOCALTIME_R 1
#define HAVE_LSTAT 1
#define HAVE_LUTIMES 1
#define HAVE_MBRTOWC 1
#define HAVE_MEMMOVE 1
#define HAVE_MEMSET 1
#define HAVE_MKDIR 1
#define HAVE_MKFIFO 1
#define HAVE_MKNOD 1
#define HAVE_MKSTEMP 1
#define HAVE_NL_LANGINFO 1
#define HAVE_OPENAT 1
#define HAVE_PIPE 1
#define HAVE_POLL 1
#define HAVE_POSIX_SPAWNP 1
#define HAVE_READLINK 1
#define HAVE_READLINKAT 1
#define HAVE_READPASSPHRASE 1
#define HAVE_SELECT 1
#define HAVE_SETENV 1
#define HAVE_SETLOCALE 1
#define HAVE_SIGACTION 1
#define HAVE_STATFS 1
#define HAVE_STATVFS 1
#define HAVE_STRCHR 1
#define HAVE_STRDUP 1
#define HAVE_STRERROR 1
#define HAVE_STRNLEN 1
#define HAVE_STRRCHR 1
#define HAVE_SYMLINK 1
#define HAVE_TIMEGM 1
#define HAVE_TZSET 1
#define HAVE_UNLINKAT 1
#define HAVE_UNSETENV 1
#define HAVE_UTIME 1
#define HAVE_UTIMENSAT 1
#define HAVE_UTIMES 1
#define HAVE_VFORK 1
#define HAVE_WCRTOMB 1
#define HAVE_WCSCMP 1
#define HAVE_WCSCPY 1
#define HAVE_WCSLEN 1
#define HAVE_WCTOMB 1
#define HAVE_WMEMCMP 1
#define HAVE_WMEMCPY 1
#define HAVE_WMEMMOVE 1
#define HAVE_STRUCT_VFSCONF 1
#define HAVE_STRUCT_STATFS 1
#define HAVE_READDIR_R 1
#define HAVE_DIRFD 1
#define HAVE_D_MD_ORDER 1
#define HAVE_DECL_EXTATTR_NAMESPACE_USER 0
#define HAVE_DECL_XATTR_NOFOLLOW 1
#define HAVE_FGETXATTR 1
#define HAVE_FLISTXATTR 1
#define HAVE_FSETXATTR 1
#define HAVE_GETXATTR 1
#define HAVE_LISTXATTR 1
#define HAVE_SETXATTR 1
#define ARCHIVE_XATTR_DARWIN 1
#define HAVE_ACL_T 1
#define HAVE_ACL_ENTRY_T 1
#define HAVE_ACL_PERMSET_T 1
#define HAVE_ACL_TAG_T 1
#define HAVE_ACL_ADD_PERM 1
#define HAVE_ACL_CLEAR_PERMS 1
#define HAVE_ACL_CREATE_ENTRY 1
#define HAVE_ACL_DELETE_DEF_FILE 1
#define HAVE_ACL_FREE 1
#define HAVE_ACL_GET_ENTRY 1
#define HAVE_ACL_GET_FD 1
#define HAVE_ACL_GET_FILE 1
#define HAVE_ACL_GET_PERMSET 1
#define HAVE_ACL_GET_QUALIFIER 1
#define HAVE_ACL_GET_TAG_TYPE 1
#define HAVE_ACL_INIT 1
#define HAVE_ACL_SET_FD 1
#define HAVE_ACL_SET_FILE 1
#define HAVE_ACL_SET_QUALIFIER 1
#define HAVE_ACL_SET_TAG_TYPE 1
#define HAVE_ACL_ADD_FLAG_NP 1
#define HAVE_ACL_CLEAR_FLAGS_NP 1
#define HAVE_ACL_GET_FLAG_NP 1
#define HAVE_ACL_GET_FLAGSET_NP 1
#define HAVE_ACL_GET_FD_NP 1
#define HAVE_ACL_GET_LINK_NP 1
#define HAVE_ACL_GET_PERM_NP 1
#define HAVE_ACL_SET_FD_NP 1
#define HAVE_ACL_SET_LINK_NP 1
#define HAVE_MBR_UID_TO_UUID 1
#define HAVE_MBR_UUID_TO_ID 1
#define HAVE_MBR_GID_TO_UUID 1
#define HAVE_DECL_ACL_TYPE_EXTENDED 1
#define HAVE_DECL_ACL_TYPE_NFS4 0
#define HAVE_DECL_ACL_USER 0
#define HAVE_DECL_ACL_SYNCHRONIZE 1
#define ARCHIVE_ACL_DARWIN 1
#define ARCHIVE_CRYPTO_MD5_LIBSYSTEM 1
#define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM 1
#define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM 1
#define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM 1
#define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM 1

configure: exit 0
