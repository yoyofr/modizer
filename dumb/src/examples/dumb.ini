# Please edit this file to control the playback quality for 'dumbplay'. Note
# that this does not affect DUMB when you use it in your own programs; you
# need to borrow some code from the example program in order to get that to
# happen.

# dumb_resampling_quality can be 0 for aliasing, 1 for linear interpolation
# or 2 for cubic interpolation. See docs/dumb.txt for details on what these
# terms mean.

# dumb_it_max_to_mix is the maximum number of samples DUMB will render at a
# time. See docs/dumb.txt for a more detailed description.

# Increase buffer_size to combat stuttering.

# The music module will be rendered at the sampling frequency specified by
# sound_freq. This variable is also used by Allegro for initialising the
# sound hardware.

# buffer_size and sound_freq are passed directly to al_start_duh(). See this
# function's description in docs/dumb.txt for information about how to use
# these variables.

# You can ignore the quality variable. Allegro uses it when relaying the
# audio stream to the sound card. Only a masochist would set it lower than 2;
# if your computer is powerful enough to run DUMB, it is powerful enough to
# use this setting with Allegro.

# For best results, choose a value for sound_freq that your sound card can do
# exactly. See Allegro's docs, "Standard config variables", for details. If
# you do not choose an exact value, Allegro will round it to the nearest
# value it can do; then when DUMB plays the stream at a sampling frequency of
# sound_freq, Allegro will have to resample it. Allegro's 'quality = 2'
# setting is only comparable with DUMB's 'dumb_resampling_quality = 1'
# setting. Therefore, in order to appreciate DUMB's cubic resampler fully,
# you will need to make sure Allegro doesn't do any resampling, by choosing
# an exact value for sound_freq.

[sound]
dumb_resampling_quality = 2
dumb_it_max_to_mix = 256
buffer_size = 4096
sound_freq = 44100

quality = 2
